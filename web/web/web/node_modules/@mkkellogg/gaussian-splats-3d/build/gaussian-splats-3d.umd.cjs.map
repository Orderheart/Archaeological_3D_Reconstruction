{"version":3,"file":"gaussian-splats-3d.umd.cjs","sources":["../src/loaders/UncompressedSplatArray.js","../src/AbortablePromise.js","../src/Util.js","../src/loaders/SplatBuffer.js","../src/loaders/ply/CompressedPlyParser.js","../src/loaders/ply/PlyParser.js","../src/loaders/SplatPartitioner.js","../src/loaders/SplatBufferGenerator.js","../src/loaders/LoaderStatus.js","../src/Constants.js","../src/loaders/ply/PlyLoader.js","../src/loaders/splat/SplatParser.js","../src/loaders/splat/SplatLoader.js","../src/loaders/ksplat/KSplatLoader.js","../src/loaders/SceneFormat.js","../src/loaders/Utils.js","../src/OrbitControls.js","../src/ui/Util.js","../src/ui/LoadingSpinner.js","../src/ui/LoadingProgressBar.js","../src/ui/InfoPanel.js","../src/ArrowHelper.js","../src/SceneHelper.js","../src/raycaster/Ray.js","../src/raycaster/Hit.js","../src/raycaster/Raycaster.js","../src/SplatScene.js","../src/splattree/SplatTree.js","../src/three-shim/WebGLExtensions.js","../src/three-shim/WebGLCapabilities.js","../src/SceneRevealMode.js","../src/SplatMesh.js","../src/worker/sorter.wasm","../src/worker/SortWorker.js","../src/webxr/WebXRMode.js","../src/webxr/VRButton.js","../src/webxr/ARButton.js","../src/RenderMode.js","../src/Viewer.js","../src/DropInViewer.js"],"sourcesContent":["\nexport class UncompressedSplatArray {\n\n    static OFFSET = {\n        X: 0,\n        Y: 1,\n        Z: 2,\n        SCALE0: 3,\n        SCALE1: 4,\n        SCALE2: 5,\n        ROTATION0: 6,\n        ROTATION1: 7,\n        ROTATION2: 8,\n        ROTATION3: 9,\n        FDC0: 10,\n        FDC1: 11,\n        FDC2: 12,\n        OPACITY: 13\n    };\n\n    constructor() {\n        this.splats = [];\n        this.splatCount = 0;\n    }\n\n    static createSplat() {\n        return [0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];\n    }\n\n    addSplat(splat) {\n        this.splats.push(splat);\n        this.splatCount++;\n    }\n\n    getSplat(index) {\n        return this.splats[index];\n    }\n\n    addDefaultSplat() {\n        const newSplat = UncompressedSplatArray.createSplat();\n        this.addSplat(newSplat);\n        return newSplat;\n    }\n\n    addSplatFromComonents(x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity) {\n        const newSplat = [x, y, z, scale0, scale1, scale2, rot0, rot1, rot2, rot3, r, g, b, opacity];\n        this.addSplat(newSplat);\n        return newSplat;\n    }\n\n    addSplatFromArray(src, srcIndex) {\n        const srcSplat = src.splats[srcIndex];\n        this.addSplatFromComonents(srcSplat[0], srcSplat[1], srcSplat[2], srcSplat[3], srcSplat[4], srcSplat[5],\n                                   srcSplat[6], srcSplat[7], srcSplat[8], srcSplat[9],\n                                   srcSplat[10], srcSplat[11], srcSplat[12], srcSplat[13]);\n    }\n}\n","/**\n * AbortablePromise: A quick & dirty wrapper for JavaScript's Promise class that allows the underlying\n * asynchronous operation to be cancelled. It is only meant for simple situations where no complex promise\n * chaining or merging occurs. It needs a significant amount of work to truly replicate the full\n * functionality of JavaScript's Promise class. Look at Util.fetchWithProgress() for example usage.\n *\n * This class was primarily added to allow splat scene downloads to be cancelled. It has not been tested\n * very thoroughly and the implementation is kinda janky. If you can at all help it, please avoid using it :)\n */\nexport class AbortablePromise {\n\n    static idGen = 0;\n\n    constructor(promiseFunc, abortHandler) {\n\n        let promiseResolve;\n        let promiseReject;\n        this.promise = new Promise((resolve, reject) => {\n            promiseResolve = resolve.bind(this);\n            promiseReject = reject.bind(this);\n        });\n\n        const resolve = (...args) => {\n            promiseResolve(...args);\n        };\n\n        const reject = (error) => {\n            promiseReject(error);\n        };\n\n        promiseFunc(resolve.bind(this), reject.bind(this));\n        this.abortHandler = abortHandler;\n        this.id = AbortablePromise.idGen++;\n    }\n\n    then(onResolve) {\n        return new AbortablePromise((resolve, reject) => {\n            this.promise = this.promise\n            .then((...args) => {\n                const onResolveResult = onResolve(...args);\n                if (onResolveResult instanceof Promise || onResolveResult instanceof AbortablePromise) {\n                    onResolveResult.then((...args2) => {\n                        resolve(...args2);\n                    });\n                } else {\n                    resolve(onResolveResult);\n                }\n            })\n            .catch((error) => {\n                reject(error);\n            });\n        }, this.abortHandler);\n    }\n\n    catch(onFail) {\n        return new AbortablePromise((resolve) => {\n            this.promise = this.promise.then((...args) => {\n                resolve(...args);\n            })\n            .catch(onFail);\n        }, this.abortHandler);\n    }\n\n    abort() {\n        if (this.abortHandler) this.abortHandler();\n    }\n\n}\n\nexport class AbortedPromiseError extends Error {\n\n    constructor(msg) {\n        super(msg);\n    }\n\n}\n","import { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\n\nexport const floatToHalf = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(val) {\n        floatView[0] = val;\n        const x = int32View[0];\n\n        let bits = (x >> 16) & 0x8000;\n        let m = (x >> 12) & 0x07ff;\n        const e = (x >> 23) & 0xff;\n\n        if (e < 103) return bits;\n\n        if (e > 142) {\n            bits |= 0x7c00;\n            bits |= ((e == 255) ? 0 : 1) && (x & 0x007fffff);\n            return bits;\n        }\n\n        if (e < 113) {\n            m |= 0x0800;\n            bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\n            return bits;\n        }\n\n        bits |= (( e - 112) << 10) | (m >> 1);\n        bits += m & 1;\n        return bits;\n    };\n\n}();\n\nexport const uintEncodedFloat = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(f) {\n        floatView[0] = f;\n        return int32View[0];\n    };\n\n}();\n\nexport const rgbaToInteger = function(r, g, b, a) {\n    return r + (g << 8) + (b << 16) + (a << 24);\n};\n\nexport const rgbaArrayToInteger = function(arr, offset) {\n    return arr[offset] + (arr[offset + 1] << 8) + (arr[offset + 2] << 16) + (arr[offset + 3] << 24);\n};\n\nexport const fetchWithProgress = function(path, onProgress, saveChunks = true) {\n\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    let aborted = false;\n    let rejectFunc = null;\n    const abortHandler = () => {\n        abortController.abort();\n        rejectFunc(new AbortedPromiseError('Fetch aborted.'));\n        aborted = true;\n    };\n\n    return new AbortablePromise((resolve, reject) => {\n        rejectFunc = reject;\n        fetch(path, { signal })\n        .then(async (data) => {\n            const reader = data.body.getReader();\n            let bytesDownloaded = 0;\n            let _fileSize = data.headers.get('Content-Length');\n            let fileSize = _fileSize ? parseInt(_fileSize) : undefined;\n\n            const chunks = [];\n\n            while (!aborted) {\n                try {\n                    const { value: chunk, done } = await reader.read();\n                    if (done) {\n                        if (onProgress) {\n                            onProgress(100, '100%', chunk, fileSize);\n                        }\n                        if (saveChunks) {\n                            const buffer = new Blob(chunks).arrayBuffer();\n                            resolve(buffer);\n                        } else {\n                            resolve();\n                        }\n                        break;\n                    }\n                    bytesDownloaded += chunk.length;\n                    let percent;\n                    let percentLabel;\n                    if (fileSize !== undefined) {\n                        percent = bytesDownloaded / fileSize * 100;\n                        percentLabel = `${percent.toFixed(2)}%`;\n                    }\n                    if (saveChunks) chunks.push(chunk);\n                    if (onProgress) {\n                        const cancelSaveChucnks = onProgress(percent, percentLabel, chunk, fileSize);\n                        if (cancelSaveChucnks) saveChunks = false;\n                    }\n                } catch (error) {\n                    reject(error);\n                    break;\n                }\n            }\n        });\n    }, abortHandler);\n\n};\n\nexport const clamp = function(val, min, max) {\n    return Math.max(Math.min(val, max), min);\n};\n\nexport const getCurrentTime = function() {\n    return performance.now() / 1000;\n};\n\nexport const disposeAllMeshes = (object3D) => {\n    if (object3D.geometry) {\n        object3D.geometry.dispose();\n        object3D.geometry = null;\n    }\n    if (object3D.material) {\n        object3D.material.dispose();\n        object3D.material = null;\n    }\n    if (object3D.children) {\n        for (let child of object3D.children) {\n            disposeAllMeshes(child);\n        }\n    }\n};\n\nexport const delayedExecute = (func, fast) => {\n    return new Promise((resolve) => {\n        window.setTimeout(() => {\n            resolve(func());\n        }, fast ? 1 : 50);\n    });\n};\n","import * as THREE from 'three';\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\nimport { clamp } from '../Util.js';\n\n/**\n * SplatBuffer: Container for splat data from a single scene/file and capable of (mediocre) compression.\n */\nexport class SplatBuffer {\n\n    static CurrentMajorVersion = 0;\n    static CurrentMinorVersion = 1;\n\n    static CenterComponentCount = 3;\n    static ScaleComponentCount = 3;\n    static RotationComponentCount = 4;\n    static ColorComponentCount = 4;\n    static CovarianceComponentCount = 6;\n\n    static SplatScaleOffsetFloat = 3;\n    static SplatRotationOffsetFloat = 6;\n\n    static CompressionLevels = {\n        0: {\n            BytesPerCenter: 12,\n            BytesPerColor: 4,\n            BytesPerScale: 12,\n            BytesPerRotation: 16,\n            BytesPerSplat: 44,\n            ScaleRange: 1\n        },\n        1: {\n            BytesPerCenter: 6,\n            BytesPerColor: 4,\n            BytesPerScale: 6,\n            BytesPerRotation: 8,\n            BytesPerSplat: 24,\n            ScaleRange: 32767\n        }\n    };\n\n    static CovarianceSizeFloats = 6;\n\n    static HeaderSizeBytes = 4096;\n    static SectionHeaderSizeBytes = 1024;\n\n    static BucketStorageSizeBytes = 12;\n    static BucketStorageSizeFloats = 3;\n\n    static BucketBlockSize = 5.0;\n    static BucketSize = 256;\n\n    constructor(bufferData, secLoadedCountsToMax = true) {\n        this.constructFromBuffer(bufferData, secLoadedCountsToMax);\n    }\n\n    fbf(f) {\n        if (this.compressionLevel === 0) {\n            return f;\n        } else {\n            return THREE.DataUtils.fromHalfFloat(f);\n        }\n    };\n\n    getSplatCount() {\n        return this.splatCount;\n    }\n\n    getMaxSplatCount() {\n        return this.maxSplatCount;\n    }\n\n    getBucketIndex(section, localSplatIndex) {\n        let bucketIndex;\n        const maxSplatIndexInFullBuckets = section.fullBucketCount * section.bucketSize;\n        if (localSplatIndex < maxSplatIndexInFullBuckets) {\n            bucketIndex = Math.floor(localSplatIndex / section.bucketSize);\n        } else {\n            let bucketSplatIndex = maxSplatIndexInFullBuckets;\n            bucketIndex = section.fullBucketCount;\n            let partiallyFullBucketIndex = 0;\n            while (bucketSplatIndex < section.splatCount) {\n                let currentPartiallyFilledBucketSize = section.partiallyFilledBucketLengths[partiallyFullBucketIndex];\n                if (localSplatIndex >= bucketSplatIndex && localSplatIndex < bucketSplatIndex + currentPartiallyFilledBucketSize) {\n                    break;\n                }\n                bucketSplatIndex += currentPartiallyFilledBucketSize;\n                bucketIndex++;\n                partiallyFullBucketIndex++;\n            }\n        }\n        return bucketIndex;\n    }\n\n    getSplatCenter(globalSplatIndex, outCenter, transform) {\n        const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\n        const section = this.sections[sectionIndex];\n        const localSplatIndex = globalSplatIndex - section.splatCountOffset;\n        if (this.compressionLevel === 1) {\n            const centerBase = localSplatIndex * this.uint16PerSplat;\n            const bucketIndex = this.getBucketIndex(section, localSplatIndex);\n            const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\n            const sf = section.compressionScaleFactor;\n            const sr = section.compressionScaleRange;\n            outCenter.x = (section.dataArrayUint16[centerBase] - sr) * sf + section.bucketArray[bucketBase];\n            outCenter.y = (section.dataArrayUint16[centerBase + 1] - sr) * sf + section.bucketArray[bucketBase + 1];\n            outCenter.z = (section.dataArrayUint16[centerBase + 2] - sr) * sf + section.bucketArray[bucketBase + 2];\n        } else {\n            const centerBase = localSplatIndex * this.float32PerSplat;\n            outCenter.x = section.dataArrayFloat32[centerBase];\n            outCenter.y = section.dataArrayFloat32[centerBase + 1];\n            outCenter.z = section.dataArrayFloat32[centerBase + 2];\n        }\n        if (transform) outCenter.applyMatrix4(transform);\n    }\n\n    getSplatScaleAndRotation = function() {\n\n        const scaleMatrix = new THREE.Matrix4();\n        const rotationMatrix = new THREE.Matrix4();\n        const tempMatrix = new THREE.Matrix4();\n        const tempPosition = new THREE.Vector3();\n\n        return function(index, outScale, outRotation, transform) {\n            const sectionIndex = this.globalSplatIndexToSectionMap[index];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = index - section.splatCountOffset;\n\n            const floatsPerSplat = this.compressionLevel === 1 ? this.uint16PerSplat : this.float32PerSplat;\n\n            const sectionFloatArray = this.compressionLevel === 1 ? section.dataArrayUint16 : section.dataArrayFloat32;\n            const splatFloatBase = floatsPerSplat * localSplatIndex;\n\n            const scaleBase = splatFloatBase + SplatBuffer.SplatScaleOffsetFloat;\n            outScale.set(this.fbf(sectionFloatArray[scaleBase]),\n                         this.fbf(sectionFloatArray[scaleBase + 1]),\n                         this.fbf(sectionFloatArray[scaleBase + 2]));\n\n            const rotationBase = splatFloatBase + SplatBuffer.SplatRotationOffsetFloat;\n            outRotation.set(this.fbf(sectionFloatArray[rotationBase + 1]),\n                            this.fbf(sectionFloatArray[rotationBase + 2]),\n                            this.fbf(sectionFloatArray[rotationBase + 3]),\n                            this.fbf(sectionFloatArray[rotationBase]));\n\n            if (transform) {\n                scaleMatrix.makeScale(outScale.x, outScale.y, outScale.z);\n                rotationMatrix.makeRotationFromQuaternion(outRotation);\n                tempMatrix.copy(scaleMatrix).multiply(rotationMatrix).multiply(transform);\n                tempMatrix.decompose(tempPosition, outRotation, outScale);\n            }\n        };\n\n    }();\n\n    getSplatColor(globalSplatIndex, outColor, transform) {\n        const sectionIndex = this.globalSplatIndexToSectionMap[globalSplatIndex];\n        const section = this.sections[sectionIndex];\n        const localSplatIndex = globalSplatIndex - section.splatCountOffset;\n        const colorBase = this.bytesPerSplat * localSplatIndex + this.bytesPerCenter + this.bytesPerScale + this.bytesPerRotation;\n        outColor.set(section.dataArrayUint8[colorBase], section.dataArrayUint8[colorBase + 1],\n                     section.dataArrayUint8[colorBase + 2], section.dataArrayUint8[colorBase + 3]);\n        // TODO: apply transform for spherical harmonics\n    }\n\n    fillSplatCenterArray(outCenterArray, transform, srcFrom, srcTo, destFrom) {\n        const splatCount = this.splatCount;\n\n        srcFrom = srcFrom || 0;\n        srcTo = srcTo || splatCount - 1;\n        if (destFrom === undefined) destFrom = srcFrom;\n\n        const center = new THREE.Vector3();\n        for (let i = srcFrom; i <= srcTo; i++) {\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = i - section.splatCountOffset;\n            const centerDestBase = (i - srcFrom + destFrom) * SplatBuffer.CenterComponentCount;\n            if (this.compressionLevel === 1) {\n                const centerBase = localSplatIndex * this.uint16PerSplat;\n                const bucketIndex = this.getBucketIndex(section, localSplatIndex);\n                const bucketBase = bucketIndex * SplatBuffer.BucketStorageSizeFloats;\n                const sf = section.compressionScaleFactor;\n                const sr = section.compressionScaleRange;\n                center.x = (section.dataArrayUint16[centerBase] - sr) * sf + section.bucketArray[bucketBase];\n                center.y = (section.dataArrayUint16[centerBase + 1] - sr) * sf + section.bucketArray[bucketBase + 1];\n                center.z = (section.dataArrayUint16[centerBase + 2] - sr) * sf + section.bucketArray[bucketBase + 2];\n            } else {\n                const centerBase = localSplatIndex * this.float32PerSplat;\n                center.x = section.dataArrayFloat32[centerBase];\n                center.y = section.dataArrayFloat32[centerBase + 1];\n                center.z = section.dataArrayFloat32[centerBase + 2];\n            }\n            if (transform) {\n                center.applyMatrix4(transform);\n            }\n            outCenterArray[centerDestBase] = center.x;\n            outCenterArray[centerDestBase + 1] = center.y;\n            outCenterArray[centerDestBase + 2] = center.z;\n        }\n    }\n\n    static computeCovariance = function() {\n\n        const tempMatrix4 = new THREE.Matrix4();\n        const scaleMatrix = new THREE.Matrix3();\n        const rotationMatrix = new THREE.Matrix3();\n        const covarianceMatrix = new THREE.Matrix3();\n        const transformedCovariance = new THREE.Matrix3();\n        const transform3x3 = new THREE.Matrix3();\n        const transform3x3Transpose = new THREE.Matrix3();\n        const thf = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\n\n        return function(scale, rotation, transform, outCovariance, outOffset = 0, desiredOutputCompressionLevel) {\n\n            tempMatrix4.makeScale(scale.x, scale.y, scale.z);\n            scaleMatrix.setFromMatrix4(tempMatrix4);\n\n            tempMatrix4.makeRotationFromQuaternion(rotation);\n            rotationMatrix.setFromMatrix4(tempMatrix4);\n\n            covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\n            transformedCovariance.copy(covarianceMatrix).transpose().premultiply(covarianceMatrix);\n\n            if (transform) {\n                transform3x3.setFromMatrix4(transform);\n                transform3x3Transpose.copy(transform3x3).transpose();\n                transformedCovariance.multiply(transform3x3Transpose);\n                transformedCovariance.premultiply(transform3x3);\n            }\n\n            if (desiredOutputCompressionLevel === 1) {\n                outCovariance[outOffset] = thf(transformedCovariance.elements[0]);\n                outCovariance[outOffset + 1] = thf(transformedCovariance.elements[3]);\n                outCovariance[outOffset + 2] = thf(transformedCovariance.elements[6]);\n                outCovariance[outOffset + 3] = thf(transformedCovariance.elements[4]);\n                outCovariance[outOffset + 4] = thf(transformedCovariance.elements[7]);\n                outCovariance[outOffset + 5] = thf(transformedCovariance.elements[8]);\n            } else {\n                outCovariance[outOffset] = transformedCovariance.elements[0];\n                outCovariance[outOffset + 1] = transformedCovariance.elements[3];\n                outCovariance[outOffset + 2] = transformedCovariance.elements[6];\n                outCovariance[outOffset + 3] = transformedCovariance.elements[4];\n                outCovariance[outOffset + 4] = transformedCovariance.elements[7];\n                outCovariance[outOffset + 5] = transformedCovariance.elements[8];\n            }\n\n        };\n\n    }();\n\n    fillSplatCovarianceArray(covarianceArray, transform, srcFrom, srcTo, destFrom, desiredOutputCompressionLevel) {\n        const splatCount = this.splatCount;\n\n        const scale = new THREE.Vector3();\n        const rotation = new THREE.Quaternion();\n\n        srcFrom = srcFrom || 0;\n        srcTo = srcTo || splatCount - 1;\n        if (destFrom === undefined) destFrom = srcFrom;\n        const floatsPerSplat = this.compressionLevel === 1 ? this.uint16PerSplat : this.float32PerSplat;\n\n        for (let i = srcFrom; i <= srcTo; i++) {\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = i - section.splatCountOffset;\n\n            const sectionFloatArray = this.compressionLevel === 1 ? section.dataArrayUint16 : section.dataArrayFloat32;\n            const splatFloatBase = floatsPerSplat * localSplatIndex;\n            const covarianceDestBase = (i - srcFrom + destFrom) * SplatBuffer.CovarianceComponentCount;\n\n            const scaleBase = splatFloatBase + SplatBuffer.SplatScaleOffsetFloat;\n            scale.set(this.fbf(sectionFloatArray[scaleBase]),\n                      this.fbf(sectionFloatArray[scaleBase + 1]),\n                      this.fbf(sectionFloatArray[scaleBase + 2]));\n\n            const rotationBase = splatFloatBase + SplatBuffer.SplatRotationOffsetFloat;\n            rotation.set(this.fbf(sectionFloatArray[rotationBase + 1]),\n                         this.fbf(sectionFloatArray[rotationBase + 2]),\n                         this.fbf(sectionFloatArray[rotationBase + 3]),\n                         this.fbf(sectionFloatArray[rotationBase]));\n\n            SplatBuffer.computeCovariance(scale, rotation, transform, covarianceArray, covarianceDestBase, desiredOutputCompressionLevel);\n        }\n    }\n\n    fillSplatColorArray(outColorArray, minimumAlpha, transform, srcFrom, srcTo, destFrom) {\n        const splatCount = this.splatCount;\n\n        srcFrom = srcFrom || 0;\n        srcTo = srcTo || splatCount - 1;\n        if (destFrom === undefined) destFrom = srcFrom;\n        const splatColorOffset = this.bytesPerCenter + this.bytesPerScale + this.bytesPerRotation;\n\n        for (let i = srcFrom; i <= srcTo; i++) {\n\n            const sectionIndex = this.globalSplatIndexToSectionMap[i];\n            const section = this.sections[sectionIndex];\n            const localSplatIndex = i - section.splatCountOffset;\n\n            const colorSrcBase = this.bytesPerSplat * localSplatIndex + splatColorOffset;\n            const colorDestBase = (i - srcFrom + destFrom) * SplatBuffer.ColorComponentCount;\n\n            let alpha = section.dataArrayUint8[colorSrcBase + 3];\n            alpha = (alpha >= minimumAlpha) ? alpha : 0;\n\n            outColorArray[colorDestBase] = section.dataArrayUint8[colorSrcBase];\n            outColorArray[colorDestBase + 1] = section.dataArrayUint8[colorSrcBase + 1];\n            outColorArray[colorDestBase + 2] = section.dataArrayUint8[colorSrcBase + 2];\n            outColorArray[colorDestBase + 3] = alpha;\n\n            // TODO: implement application of transform for spherical harmonics\n        }\n    }\n\n    static parseHeader(buffer) {\n        const headerArrayUint8 = new Uint8Array(buffer, 0, SplatBuffer.HeaderSizeBytes);\n        const headerArrayUint16 = new Uint16Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 2);\n        const headerArrayUint32 = new Uint32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        const headerArrayFloat32 = new Float32Array(buffer, 0, SplatBuffer.HeaderSizeBytes / 4);\n        const versionMajor = headerArrayUint8[0];\n        const versionMinor = headerArrayUint8[1];\n        const maxSectionCount = headerArrayUint32[1];\n        const sectionCount = headerArrayUint32[2];\n        const maxSplatCount = headerArrayUint32[3];\n        const splatCount = headerArrayUint32[4];\n        const compressionLevel = headerArrayUint16[10];\n        const sceneCenter = new THREE.Vector3(headerArrayFloat32[6], headerArrayFloat32[7], headerArrayFloat32[8]);\n\n        return {\n            versionMajor,\n            versionMinor,\n            maxSectionCount,\n            sectionCount,\n            maxSplatCount,\n            splatCount,\n            compressionLevel,\n            sceneCenter\n        };\n    }\n\n    static writeHeaderCountsToBuffer(sectionCount, splatCount, buffer) {\n        const headerArrayUint32 = new Uint32Array(buffer);\n        headerArrayUint32[2] = sectionCount;\n        headerArrayUint32[4] = splatCount;\n    }\n\n    static writeHeaderToBuffer(header, buffer) {\n        const headerArrayUint8 = new Uint8Array(buffer);\n        const headerArrayUint32 = new Uint32Array(buffer);\n        const headerArrayFloat32 = new Float32Array(buffer);\n        const headerArrayUint16 = new Uint16Array(buffer);\n        headerArrayUint8[0] = header.versionMajor;\n        headerArrayUint8[1] = header.versionMinor;\n        headerArrayUint8[2] = 0; // unused for now\n        headerArrayUint8[3] = 0; // unused for now\n        headerArrayUint32[1] = header.maxSectionCount;\n        headerArrayUint32[2] = header.sectionCount;\n        headerArrayUint32[3] = header.maxSplatCount;\n        headerArrayUint32[4] = header.splatCount;\n        headerArrayUint16[10] = header.compressionLevel;\n        headerArrayFloat32[6] = header.sceneCenter.x;\n        headerArrayFloat32[7] = header.sceneCenter.y;\n        headerArrayFloat32[8] = header.sceneCenter.z;\n    }\n\n    static parseSectionHeaders(header, buffer, offset = 0, secLoadedCountsToMax) {\n        const compressionLevel = header.compressionLevel;\n        const bytesPerCenter = SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\n        const bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\n        const bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\n        const bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\n\n        const maxSectionCount = header.maxSectionCount;\n        const sectionHeaderArrayUint16 = new Uint16Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 2);\n        const sectionHeaderArrayUint32 = new Uint32Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 4);\n        const sectionHeaderArrayFloat32 = new Float32Array(buffer, offset, maxSectionCount * SplatBuffer.SectionHeaderSizeBytes / 4);\n\n        const sectionHeaders = [];\n        let sectionHeaderBase = 0;\n        let sectionHeaderBaseUint16 = sectionHeaderBase / 2;\n        let sectionHeaderBaseUint32 = sectionHeaderBase / 4;\n        let sectionBase = SplatBuffer.HeaderSizeBytes + header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes;\n        let splatCountOffset = 0;\n        for (let i = 0; i < maxSectionCount; i++) {\n            const maxSplatCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 1];\n            const bucketSize = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 2];\n            const bucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 3];\n            const bucketBlockSize = sectionHeaderArrayFloat32[sectionHeaderBaseUint32 + 4];\n            const halfBucketBlockSize = bucketBlockSize / 2.0;\n            const bucketStorageSizeBytes = sectionHeaderArrayUint16[sectionHeaderBaseUint16 + 10];\n            const compressionScaleRange = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 6] ||\n                                          SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n            const fullBucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 8];\n            const partiallyFilledBucketCount = sectionHeaderArrayUint32[sectionHeaderBaseUint32 + 9];\n            const bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;\n            const bucketsStorageSizeBytes = bucketStorageSizeBytes * bucketCount + bucketsMetaDataSizeBytes;\n\n            const splatDataStorageSizeBytes = (bytesPerCenter + bytesPerScale + bytesPerRotation + bytesPerColor) * maxSplatCount;\n            const storageSizeBytes = splatDataStorageSizeBytes + bucketsStorageSizeBytes;\n            const sectionHeader = {\n                splatCountOffset: splatCountOffset,\n                splatCount: secLoadedCountsToMax ? maxSplatCount : 0,\n                maxSplatCount: maxSplatCount,\n                bucketSize: bucketSize,\n                bucketCount: bucketCount,\n                bucketBlockSize: bucketBlockSize,\n                halfBucketBlockSize: halfBucketBlockSize,\n                bucketStorageSizeBytes: bucketStorageSizeBytes,\n                bucketsStorageSizeBytes: bucketsStorageSizeBytes,\n                splatDataStorageSizeBytes: splatDataStorageSizeBytes,\n                storageSizeBytes: storageSizeBytes,\n                compressionScaleRange: compressionScaleRange,\n                compressionScaleFactor: halfBucketBlockSize / compressionScaleRange,\n                base: sectionBase,\n                bucketsBase: sectionBase + bucketsMetaDataSizeBytes,\n                dataBase: sectionBase + bucketsStorageSizeBytes,\n                fullBucketCount: fullBucketCount,\n                partiallyFilledBucketCount: partiallyFilledBucketCount\n            };\n            sectionHeaders[i] = sectionHeader;\n            sectionBase += storageSizeBytes;\n            sectionHeaderBase += SplatBuffer.SectionHeaderSizeBytes;\n            sectionHeaderBaseUint16 = sectionHeaderBase / 2;\n            sectionHeaderBaseUint32 = sectionHeaderBase / 4;\n            splatCountOffset += maxSplatCount;\n        }\n\n        return sectionHeaders;\n    }\n\n\n    static writeSectionHeaderToBuffer(sectionHeader, compressionLevel, buffer, offset = 0) {\n        const sectionHeadeArrayUint16 = new Uint16Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 2);\n        const sectionHeadeArrayUint32 = new Uint32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\n        const sectionHeadeArrayFloat32 = new Float32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\n\n        sectionHeadeArrayUint32[0] = sectionHeader.splatCount;\n        sectionHeadeArrayUint32[1] = sectionHeader.maxSplatCount;\n        sectionHeadeArrayUint32[2] = compressionLevel === 1 ? sectionHeader.bucketSize : 0;\n        sectionHeadeArrayUint32[3] = compressionLevel === 1 ? sectionHeader.bucketCount : 0;\n        sectionHeadeArrayFloat32[4] = compressionLevel === 1 ? sectionHeader.bucketBlockSize : 0.0;\n        sectionHeadeArrayUint16[10] = compressionLevel === 1 ? SplatBuffer.BucketStorageSizeBytes : 0;\n        sectionHeadeArrayUint32[6] = compressionLevel === 1 ? sectionHeader.compressionScaleRange : 0;\n        sectionHeadeArrayUint32[7] = sectionHeader.storageSizeBytes;\n        sectionHeadeArrayUint32[8] = compressionLevel === 1 ? sectionHeader.fullBucketCount : 0;\n        sectionHeadeArrayUint32[9] = compressionLevel === 1 ? sectionHeader.partiallyFilledBucketCount : 0;\n    }\n\n    static writeSectionHeaderSplatCountToBuffer(splatCount, buffer, offset = 0) {\n        const sectionHeadeArrayUint32 = new Uint32Array(buffer, offset, SplatBuffer.SectionHeaderSizeBytes / 4);\n        sectionHeadeArrayUint32[0] = splatCount;\n    }\n\n    constructFromBuffer(bufferData, secLoadedCountsToMax) {\n        this.bufferData = bufferData;\n\n        this.globalSplatIndexToLocalSplatIndexMap = [];\n        this.globalSplatIndexToSectionMap = [];\n\n        const header = SplatBuffer.parseHeader(this.bufferData);\n        this.versionMajor = header.versionMajor;\n        this.versionMinor = header.versionMinor;\n        this.maxSectionCount = header.maxSectionCount;\n        this.sectionCount = secLoadedCountsToMax ? header.maxSectionCount : 0;\n        this.maxSplatCount = header.maxSplatCount;\n        this.splatCount = secLoadedCountsToMax ? header.maxSplatCount : 0;\n        this.compressionLevel = header.compressionLevel;\n        this.sceneCenter = new THREE.Vector3().copy(header.sceneCenter);\n\n        this.bytesPerCenter = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerCenter;\n        this.bytesPerScale = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerScale;\n        this.bytesPerRotation = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerRotation;\n        this.bytesPerColor = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerColor;\n        this.bytesPerSplat = this.bytesPerCenter + this.bytesPerScale + this.bytesPerRotation + this.bytesPerColor;\n\n        this.float32PerSplat = this.bytesPerSplat / 4;\n        this.uint32PerSplat = this.bytesPerSplat / 4;\n        this.uint16PerSplat = this.bytesPerSplat / 2;\n\n        this.sections = SplatBuffer.parseSectionHeaders(header, this.bufferData, SplatBuffer.HeaderSizeBytes, secLoadedCountsToMax);\n\n        this.linkBufferArrays();\n        this.buildMaps();\n    }\n\n\n    linkBufferArrays() {\n        for (let i = 0; i < this.maxSectionCount; i++) {\n            const section = this.sections[i];\n            section.dataArrayUint8 = new Uint8Array(this.bufferData, section.dataBase, section.maxSplatCount * this.bytesPerSplat);\n            section.dataArrayUint16 = new Uint16Array(this.bufferData, section.dataBase, section.maxSplatCount * this.uint16PerSplat);\n            section.dataArrayUint32 = new Uint32Array(this.bufferData, section.dataBase, section.maxSplatCount * this.uint32PerSplat);\n            section.dataArrayFloat32 = new Float32Array(this.bufferData, section.dataBase, section.maxSplatCount * this.float32PerSplat);\n            section.bucketArray = new Float32Array(this.bufferData, section.bucketsBase,\n                                                   section.bucketCount * SplatBuffer.BucketStorageSizeFloats);\n            if (section.partiallyFilledBucketCount > 0) {\n                section.partiallyFilledBucketLengths = new Uint32Array(this.bufferData, section.base,\n                                                                       section.partiallyFilledBucketCount);\n            }\n        }\n    }\n\n    buildMaps() {\n        let cumulativeSplatCount = 0;\n        for (let i = 0; i < this.maxSectionCount; i++) {\n            const section = this.sections[i];\n            for (let j = 0; j < section.maxSplatCount; j++) {\n                const globalSplatIndex = cumulativeSplatCount + j;\n                this.globalSplatIndexToLocalSplatIndexMap[globalSplatIndex] = j;\n                this.globalSplatIndexToSectionMap[globalSplatIndex] = i;\n            }\n            cumulativeSplatCount += section.maxSplatCount;\n        }\n    }\n\n    updateLoadedCounts(newSectionCount, newSplatCount) {\n        SplatBuffer.writeHeaderCountsToBuffer(newSectionCount, newSplatCount, this.bufferData);\n        this.sectionCount = newSectionCount;\n        this.splatCount = newSplatCount;\n    }\n\n    updateSectionLoadedCounts(sectionIndex, newSplatCount) {\n        const sectionHeaderOffset = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * sectionIndex;\n        SplatBuffer.writeSectionHeaderSplatCountToBuffer(newSplatCount, this.bufferData, sectionHeaderOffset);\n        this.sections[sectionIndex].splatCount = newSplatCount;\n    }\n\n    static generateFromUncompressedSplatArrays(splatArrays, minimumAlpha, compressionLevel,\n                                               sceneCenter, blockSize, bucketSize, options = []) {\n\n        const bytesPerCenter = SplatBuffer.CompressionLevels[compressionLevel].BytesPerCenter;\n        const bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\n        const bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\n        const bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\n        const bytesPerSplat = bytesPerCenter + bytesPerScale + bytesPerRotation + bytesPerColor;\n        const compressionScaleRange = SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n\n        const sectionBuffers = [];\n        const sectionHeaderBuffers = [];\n        let totalSplatCount = 0;\n\n        const tempRotation = new THREE.Quaternion();\n        const thf = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\n\n        for (let sa = 0; sa < splatArrays.length; sa ++) {\n            const splatArray = splatArrays[sa];\n\n            const sectionOptions = options[sa] || {};\n\n            const sectionBlockSize = (sectionOptions.blockSizeFactor || 1) * (blockSize || SplatBuffer.BucketBlockSize);\n            const sectionBucketSize = Math.ceil((sectionOptions.bucketSizeFactor || 1) * (bucketSize || SplatBuffer.BucketSize));\n\n            const validSplats = new UncompressedSplatArray();\n\n            for (let i = 0; i < splatArray.splatCount; i++) {\n                const targetSplat = splatArray.splats[i];\n                let alpha;\n                if (targetSplat[UncompressedSplatArray.OFFSET.OPACITY]) {\n                    alpha = targetSplat[UncompressedSplatArray.OFFSET.OPACITY];\n                } else {\n                    alpha = 255;\n                }\n                if (alpha >= minimumAlpha) {\n                    validSplats.addSplatFromComonents(targetSplat[UncompressedSplatArray.OFFSET.X],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.Y],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.Z],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.SCALE0],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.SCALE1],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.SCALE2],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.ROTATION0],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.ROTATION1],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.ROTATION2],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.ROTATION3],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.FDC0],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.FDC1],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.FDC2],\n                                                      targetSplat[UncompressedSplatArray.OFFSET.OPACITY]);\n                }\n            }\n\n            const bucketInfo = SplatBuffer.computeBucketsForUncompressedSplatArray(validSplats, sectionBlockSize, sectionBucketSize);\n            const fullBucketCount = bucketInfo.fullBuckets.length;\n            const partiallyFullBucketLengths = bucketInfo.partiallyFullBuckets.map((bucket) => bucket.splats.length);\n            const partiallyFilledBucketCount = partiallyFullBucketLengths.length;\n            const buckets = [...bucketInfo.fullBuckets, ...bucketInfo.partiallyFullBuckets];\n\n            const sectionDataSizeBytes = validSplats.splats.length * bytesPerSplat;\n            const bucketMetaDataSizeBytes = partiallyFilledBucketCount * 4;\n            const bucketDataBytes = compressionLevel === 1 ? buckets.length *\n                                                             SplatBuffer.BucketStorageSizeBytes + bucketMetaDataSizeBytes : 0;\n            const sectionSizeBytes = sectionDataSizeBytes + bucketDataBytes;\n            const sectionBuffer = new ArrayBuffer(sectionSizeBytes);\n\n            const blockHalfSize = sectionBlockSize / 2.0;\n            const compressionScaleFactor = compressionScaleRange / blockHalfSize;\n            const doubleCompressionScaleRange = compressionScaleRange * 2 + 1;\n\n            const bucketCenter = new THREE.Vector3();\n            const bucketCenterDelta = new THREE.Vector3();\n            let outSplatCount = 0;\n            for (let b = 0; b < buckets.length; b++) {\n                const bucket = buckets[b];\n                bucketCenter.fromArray(bucket.center);\n                for (let i = 0; i < bucket.splats.length; i++) {\n                    let row = bucket.splats[i];\n                    const targetSplat = validSplats.splats[row];\n\n                    const centerBase = bucketDataBytes + outSplatCount * bytesPerSplat;\n                    const scaleBase = centerBase + bytesPerCenter;\n                    const rotationBase = scaleBase + bytesPerScale;\n                    const colorBase = rotationBase + bytesPerRotation;\n                    if (compressionLevel === 0) {\n                        const center = new Float32Array(sectionBuffer, centerBase, SplatBuffer.CenterComponentCount);\n                        const rot = new Float32Array(sectionBuffer, rotationBase, SplatBuffer.RotationComponentCount);\n                        const scale = new Float32Array(sectionBuffer, scaleBase, SplatBuffer.ScaleComponentCount);\n                        if (targetSplat[UncompressedSplatArray.OFFSET.SCALE0] !== undefined) {\n                            tempRotation.set(targetSplat[UncompressedSplatArray.OFFSET.ROTATION0],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION1],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION2],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION3]);\n                            tempRotation.normalize();\n                            rot.set([tempRotation.x, tempRotation.y, tempRotation.z, tempRotation.w]);\n                            scale.set([targetSplat[UncompressedSplatArray.OFFSET.SCALE0],\n                                       targetSplat[UncompressedSplatArray.OFFSET.SCALE1],\n                                       targetSplat[UncompressedSplatArray.OFFSET.SCALE2]]);\n                        } else {\n                            rot.set([1.0, 0.0, 0.0, 0.0]);\n                            scale.set([0.01, 0.01, 0.01]);\n                        }\n                        center.set([targetSplat[UncompressedSplatArray.OFFSET.X],\n                                    targetSplat[UncompressedSplatArray.OFFSET.Y],\n                                    targetSplat[UncompressedSplatArray.OFFSET.Z]]);\n                    } else {\n                        const center = new Uint16Array(sectionBuffer, centerBase, SplatBuffer.CenterComponentCount);\n                        const rot = new Uint16Array(sectionBuffer, rotationBase, SplatBuffer.RotationComponentCount);\n                        const scale = new Uint16Array(sectionBuffer, scaleBase, SplatBuffer.ScaleComponentCount);\n\n                        if (targetSplat[UncompressedSplatArray.OFFSET.SCALE0] !== undefined) {\n                            tempRotation.set(targetSplat[UncompressedSplatArray.OFFSET.ROTATION0],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION1],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION2],\n                                             targetSplat[UncompressedSplatArray.OFFSET.ROTATION3]);\n                            tempRotation.normalize();\n                            rot.set([thf(tempRotation.x), thf(tempRotation.y), thf(tempRotation.z), thf(tempRotation.w)]);\n                            scale.set([thf(targetSplat[UncompressedSplatArray.OFFSET.SCALE0]),\n                                       thf(targetSplat[UncompressedSplatArray.OFFSET.SCALE1]),\n                                       thf(targetSplat[UncompressedSplatArray.OFFSET.SCALE2])]);\n                        } else {\n                            rot.set([thf(1.), 0, 0, 0]);\n                            scale.set([thf(0.01), thf(0.01), thf(0.01)]);\n                        }\n                        bucketCenterDelta.set(targetSplat[UncompressedSplatArray.OFFSET.X],\n                                              targetSplat[UncompressedSplatArray.OFFSET.Y],\n                                              targetSplat[UncompressedSplatArray.OFFSET.Z]).sub(bucketCenter);\n                        bucketCenterDelta.x = Math.round(bucketCenterDelta.x * compressionScaleFactor) + compressionScaleRange;\n                        bucketCenterDelta.x = clamp(bucketCenterDelta.x, 0, doubleCompressionScaleRange);\n                        bucketCenterDelta.y = Math.round(bucketCenterDelta.y * compressionScaleFactor) + compressionScaleRange;\n                        bucketCenterDelta.y = clamp(bucketCenterDelta.y, 0, doubleCompressionScaleRange);\n                        bucketCenterDelta.z = Math.round(bucketCenterDelta.z * compressionScaleFactor) + compressionScaleRange;\n                        bucketCenterDelta.z = clamp(bucketCenterDelta.z, 0, doubleCompressionScaleRange);\n                        center.set([bucketCenterDelta.x, bucketCenterDelta.y, bucketCenterDelta.z]);\n                    }\n\n                    const rgba = new Uint8ClampedArray(sectionBuffer, colorBase, 4);\n\n                    if (targetSplat[UncompressedSplatArray.OFFSET.FDC0] !== undefined) {\n                        rgba.set([targetSplat[UncompressedSplatArray.OFFSET.FDC0],\n                                  targetSplat[UncompressedSplatArray.OFFSET.FDC1],\n                                  targetSplat[UncompressedSplatArray.OFFSET.FDC2]]);\n                    } else {\n                        rgba.set([255, 0, 0]);\n                    }\n                    if (targetSplat[UncompressedSplatArray.OFFSET.OPACITY] !== undefined) {\n                        rgba[3] = targetSplat[UncompressedSplatArray.OFFSET.OPACITY];\n                    } else {\n                        rgba[3] = 255;\n                    }\n\n                    outSplatCount++;\n                }\n            }\n            totalSplatCount += outSplatCount;\n\n            if (compressionLevel === 1) {\n                const bucketMetaDataArray = new Uint32Array(sectionBuffer);\n                for (let pfb = 0; pfb < partiallyFullBucketLengths.length; pfb ++) {\n                    bucketMetaDataArray[pfb] = partiallyFullBucketLengths[pfb];\n                }\n                const bucketArray = new Float32Array(sectionBuffer, bucketMetaDataSizeBytes,\n                                                     buckets.length * SplatBuffer.BucketStorageSizeFloats);\n                for (let b = 0; b < buckets.length; b++) {\n                    const bucket = buckets[b];\n                    const base = b * 3;\n                    bucketArray[base] = bucket.center[0];\n                    bucketArray[base + 1] = bucket.center[1];\n                    bucketArray[base + 2] = bucket.center[2];\n                }\n            }\n            sectionBuffers.push(sectionBuffer);\n\n            const sectionHeaderBuffer = new ArrayBuffer(SplatBuffer.SectionHeaderSizeBytes);\n            SplatBuffer.writeSectionHeaderToBuffer({\n                maxSplatCount: outSplatCount,\n                splatCount: outSplatCount,\n                bucketSize: sectionBucketSize,\n                bucketCount: buckets.length,\n                bucketBlockSize: sectionBlockSize,\n                compressionScaleRange: compressionScaleRange,\n                storageSizeBytes: sectionSizeBytes,\n                fullBucketCount: fullBucketCount,\n                partiallyFilledBucketCount: partiallyFilledBucketCount\n            }, compressionLevel, sectionHeaderBuffer, 0);\n            sectionHeaderBuffers.push(sectionHeaderBuffer);\n\n        }\n\n        let sectionsCumulativeSizeBytes = 0;\n        for (let sectionBuffer of sectionBuffers) sectionsCumulativeSizeBytes += sectionBuffer.byteLength;\n        const unifiedBufferSize = SplatBuffer.HeaderSizeBytes +\n                                  SplatBuffer.SectionHeaderSizeBytes * sectionBuffers.length + sectionsCumulativeSizeBytes;\n        const unifiedBuffer = new ArrayBuffer(unifiedBufferSize);\n\n        SplatBuffer.writeHeaderToBuffer({\n            versionMajor: 0,\n            versionMinor: 1,\n            maxSectionCount: sectionBuffers.length,\n            sectionCount: sectionBuffers.length,\n            maxSplatCount: totalSplatCount,\n            splatCount: totalSplatCount,\n            compressionLevel: compressionLevel,\n            sceneCenter: sceneCenter\n        }, unifiedBuffer);\n\n        let currentUnifiedBase = SplatBuffer.HeaderSizeBytes;\n        for (let sectionHeaderBuffer of sectionHeaderBuffers) {\n            new Uint8Array(unifiedBuffer, currentUnifiedBase, SplatBuffer.SectionHeaderSizeBytes).set(new Uint8Array(sectionHeaderBuffer));\n            currentUnifiedBase += SplatBuffer.SectionHeaderSizeBytes;\n        }\n\n        for (let sectionBuffer of sectionBuffers) {\n            new Uint8Array(unifiedBuffer, currentUnifiedBase, sectionBuffer.byteLength).set(new Uint8Array(sectionBuffer));\n            currentUnifiedBase += sectionBuffer.byteLength;\n        }\n\n        const splatBuffer = new SplatBuffer(unifiedBuffer);\n        return splatBuffer;\n    }\n\n    static computeBucketsForUncompressedSplatArray(splatArray, blockSize, bucketSize) {\n        let splatCount = splatArray.splatCount;\n        const halfBlockSize = blockSize / 2.0;\n\n        const min = new THREE.Vector3();\n        const max = new THREE.Vector3();\n\n        for (let i = 0; i < splatCount; i++) {\n            const targetSplat = splatArray.splats[i];\n            const center = [targetSplat[UncompressedSplatArray.OFFSET.X],\n                            targetSplat[UncompressedSplatArray.OFFSET.Y],\n                            targetSplat[UncompressedSplatArray.OFFSET.Z]];\n            if (i === 0 || center[0] < min.x) min.x = center[0];\n            if (i === 0 || center[0] > max.x) max.x = center[0];\n            if (i === 0 || center[1] < min.y) min.y = center[1];\n            if (i === 0 || center[1] > max.y) max.y = center[1];\n            if (i === 0 || center[2] < min.z) min.z = center[2];\n            if (i === 0 || center[2] > max.z) max.z = center[2];\n        }\n\n        const dimensions = new THREE.Vector3().copy(max).sub(min);\n        const yBlocks = Math.ceil(dimensions.y / blockSize);\n        const zBlocks = Math.ceil(dimensions.z / blockSize);\n\n        const blockCenter = new THREE.Vector3();\n        const fullBuckets = [];\n        const partiallyFullBuckets = {};\n\n        for (let i = 0; i < splatCount; i++) {\n            const targetSplat = splatArray.splats[i];\n            const center = [targetSplat[UncompressedSplatArray.OFFSET.X],\n                            targetSplat[UncompressedSplatArray.OFFSET.Y],\n                            targetSplat[UncompressedSplatArray.OFFSET.Z]];\n            const xBlock = Math.floor((center[0] - min.x) / blockSize);\n            const yBlock = Math.floor((center[1] - min.y) / blockSize);\n            const zBlock = Math.floor((center[2] - min.z) / blockSize);\n\n            blockCenter.x = xBlock * blockSize + min.x + halfBlockSize;\n            blockCenter.y = yBlock * blockSize + min.y + halfBlockSize;\n            blockCenter.z = zBlock * blockSize + min.z + halfBlockSize;\n\n            const bucketId = xBlock * (yBlocks * zBlocks) + yBlock * zBlocks + zBlock;\n            let bucket = partiallyFullBuckets[bucketId];\n            if (!bucket) {\n                partiallyFullBuckets[bucketId] = bucket = {\n                    'splats': [],\n                    'center': blockCenter.toArray()\n                };\n            }\n\n            bucket.splats.push(i);\n            if (bucket.splats.length >= bucketSize) {\n                fullBuckets.push(bucket);\n                partiallyFullBuckets[bucketId] = null;\n            }\n        }\n\n        const partiallyFullBucketArray = [];\n        for (let bucketId in partiallyFullBuckets) {\n            if (partiallyFullBuckets.hasOwnProperty(bucketId)) {\n                const bucket = partiallyFullBuckets[bucketId];\n                if (bucket) {\n                    partiallyFullBucketArray.push(bucket);\n                }\n            }\n        }\n\n        return {\n            'fullBuckets': fullBuckets,\n            'partiallyFullBuckets': partiallyFullBucketArray,\n        };\n    }\n\n}\n","import { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { clamp } from '../../Util.js';\nimport * as THREE from 'three';\n\nconst HeaderMagicBytes = new Uint8Array([112, 108, 121, 10]);\nconst HeaderEndTokenBytes = new Uint8Array([10, 101, 110, 100, 95, 104, 101, 97, 100, 101, 114, 10]);\nconst HeaderEndToken = 'end_header';\n\nconst DataTypeMap = new Map([\n  ['char', Int8Array],\n  ['uchar', Uint8Array],\n  ['short', Int16Array],\n  ['ushort', Uint16Array],\n  ['int', Int32Array],\n  ['uint', Uint32Array],\n  ['float', Float32Array],\n  ['double', Float64Array],\n]);\n\nconst unpackUnorm = (value, bits) => {\n  const t = (1 << bits) - 1;\n  return (value & t) / t;\n};\n\nconst unpack111011 = (result, value) => {\n  result.x = unpackUnorm(value >>> 21, 11);\n  result.y = unpackUnorm(value >>> 11, 10);\n  result.z = unpackUnorm(value, 11);\n};\n\nconst unpack8888 = (result, value) => {\n  result.x = unpackUnorm(value >>> 24, 8);\n  result.y = unpackUnorm(value >>> 16, 8);\n  result.z = unpackUnorm(value >>> 8, 8);\n  result.w = unpackUnorm(value, 8);\n};\n\n// unpack quaternion with 2,10,10,10 format (largest element, 3x10bit element)\nconst unpackRot = (result, value) => {\n  const norm = 1.0 / (Math.sqrt(2) * 0.5);\n  const a = (unpackUnorm(value >>> 20, 10) - 0.5) * norm;\n  const b = (unpackUnorm(value >>> 10, 10) - 0.5) * norm;\n  const c = (unpackUnorm(value, 10) - 0.5) * norm;\n  const m = Math.sqrt(1.0 - (a * a + b * b + c * c));\n\n  switch (value >>> 30) {\n    case 0:\n      result.set(m, a, b, c);\n      break;\n    case 1:\n      result.set(a, m, b, c);\n      break;\n    case 2:\n      result.set(a, b, m, c);\n      break;\n    case 3:\n      result.set(a, b, c, m);\n      break;\n  }\n};\n\nconst lerp = (a, b, t) => {\n  return a * (1 - t) + b * t;\n};\n\nconst getElementPropStorage = (element, name) => {\n  return element.properties.find((p) => p.name === name && p.storage)\n    ?.storage;\n};\n\nexport class CompressedPlyParser {\n\n  static decodeHeaderText(headerText) {\n\n    let element;\n    let chunkElement;\n    let vertexElement;\n\n    const headerLines = headerText.split('\\n').filter((line) => !line.startsWith('comment '));\n\n    let bytesPerSplat = 0;\n    let done = false;\n    for (let i = 1; i < headerLines.length; ++i) {\n      const words = headerLines[i].split(' ');\n\n      switch (words[0]) {\n        case 'format':\n          if (words[1] !== 'binary_little_endian') {\n            throw new Error('Unsupported ply format');\n          }\n          break;\n        case 'element':\n          element = {\n            name: words[1],\n            count: parseInt(words[2], 10),\n            properties: [],\n            storageSizeBytes: 0\n          };\n          if (element.name === 'chunk') chunkElement = element;\n          else if (element.name === 'vertex') vertexElement = element;\n          break;\n        case 'property': {\n          if (!DataTypeMap.has(words[1])) {\n            throw new Error(\n              `Unrecognized property data type '${words[1]}' in ply header`\n            );\n          }\n          const StorageType = DataTypeMap.get(words[1]);\n          const storageSizeByes = StorageType.BYTES_PER_ELEMENT * element.count;\n          if (element.name === 'vertex') bytesPerSplat += StorageType.BYTES_PER_ELEMENT;\n          element.properties.push({\n            type: words[1],\n            name: words[2],\n            storage: null,\n            byteSize: StorageType.BYTES_PER_ELEMENT,\n            storageSizeByes: storageSizeByes\n          });\n          element.storageSizeBytes += storageSizeByes;\n          break;\n        }\n        case HeaderEndToken:\n          done = true;\n        break;\n        default:\n          throw new Error(\n            `Unrecognized header value '${words[0]}' in ply header`\n          );\n      }\n      if (done) break;\n    }\n\n    return {\n      'chunkElement': chunkElement,\n      'vertexElement': vertexElement,\n      'bytesPerSplat': bytesPerSplat,\n      'headerSizeBytes': headerText.indexOf(HeaderEndToken) + HeaderEndToken.length + 1,\n    };\n  }\n\n  static decodeHeader(plyBuffer) {\n\n    /**\n     * Searches for the first occurrence of a sequence within a buffer.\n     * @example\n     * find(new Uint8Array([1, 2, 3, 4]), new Uint8Array([3, 4])); // 2\n     * @param {Uint8Array} buf - The buffer in which to search.\n     * @param {Uint8Array} search - The sequence to search for.\n     * @return {number} The index of the first occurrence of the search sequence in the buffer, or -1 if not found.\n     */\n    const find = (buf, search) => {\n      const endIndex = buf.length - search.length;\n      let i;\n      let j;\n      for (i = 0; i <= endIndex; ++i) {\n        for (j = 0; j < search.length; ++j) {\n          if (buf[i + j] !== search[j]) {\n            break;\n          }\n        }\n        if (j === search.length) {\n          return i;\n        }\n      }\n      return -1;\n    };\n\n    /**\n     * Checks if array 'a' starts with the same elements as array 'b'.\n     * @example\n     * startsWith(new Uint8Array([1, 2, 3, 4]), new Uint8Array([1, 2])); // true\n     * @param {Uint8Array} a - The array to check against.\n     * @param {Uint8Array} b - The array of elements to look for at the start of 'a'.\n     * @return {boolean} - True if 'a' starts with all elements of 'b', otherwise false.\n     */\n    const startsWith = (a, b) => {\n      if (a.length < b.length) {\n        return false;\n      }\n\n      for (let i = 0; i < b.length; ++i) {\n        if (a[i] !== b[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    let buf = new Uint8Array(plyBuffer);\n    let endHeaderTokenOffset;\n\n    if (buf.length >= HeaderMagicBytes.length && !startsWith(buf, HeaderMagicBytes)) {\n      throw new Error('Invalid PLY header');\n    }\n\n    endHeaderTokenOffset = find(buf, HeaderEndTokenBytes);\n    if (endHeaderTokenOffset === -1) {\n      throw new Error('End of PLY header not found');\n    }\n\n    const headerText = new TextDecoder('ascii').decode(\n      buf.slice(0, endHeaderTokenOffset)\n    );\n\n    const {chunkElement, vertexElement, bytesPerSplat} = CompressedPlyParser.decodeHeaderText(headerText);\n\n    return {\n      'headerSizeBytes': endHeaderTokenOffset + HeaderEndTokenBytes.length,\n      'bytesPerSplat': bytesPerSplat,\n      'chunkElement': chunkElement,\n      'vertexElement': vertexElement\n    };\n  }\n\n  static readElementData(element, readBuffer, readOffset, fromIndex, toIndex, propertyFilter = null) {\n\n    let dataView = readBuffer instanceof DataView ? readBuffer : new DataView(readBuffer);\n\n    fromIndex = fromIndex || 0;\n    toIndex = toIndex || element.count - 1;\n    for (let e = fromIndex; e <= toIndex; ++e) {\n      for (let j = 0; j < element.properties.length; ++j) {\n        const property = element.properties[j];\n\n        const StorageType = DataTypeMap.get(property.type);\n        const requiredStorageSizeBytes = StorageType.BYTES_PER_ELEMENT * element.count;\n        if ((!property.storage || property.storage.byteLength < requiredStorageSizeBytes) &&\n            (!propertyFilter || propertyFilter(property.name))) {\n          property.storage = new StorageType(element.count);\n        }\n\n        if (property.storage) {\n          switch (property.type) {\n            case 'char':\n              property.storage[e] = dataView.getInt8(readOffset);\n              break;\n            case 'uchar':\n              property.storage[e] = dataView.getUint8(readOffset);\n              break;\n            case 'short':\n              property.storage[e] = dataView.getInt16(readOffset, true);\n              break;\n            case 'ushort':\n              property.storage[e] = dataView.getUint16(readOffset, true);\n              break;\n            case 'int':\n              property.storage[e] = dataView.getInt32(readOffset, true);\n              break;\n            case 'uint':\n              property.storage[e] = dataView.getUint32(readOffset, true);\n              break;\n            case 'float':\n              property.storage[e] = dataView.getFloat32(readOffset, true);\n              break;\n            case 'double':\n              property.storage[e] = dataView.getFloat64(readOffset, true);\n              break;\n          }\n        }\n\n        readOffset += property.byteSize;\n      }\n    }\n\n    return readOffset;\n  }\n\n  static readPly(plyBuffer, propertyFilter = null) {\n\n    const header = CompressedPlyParser.decodeHeader(plyBuffer);\n\n    let readIndex = CompressedPlyParser.readElementData(header.chunkElement, plyBuffer, header.headerSizeBytes, null, null, propertyFilter);\n    CompressedPlyParser.readElementData(header.vertexElement, plyBuffer, readIndex, null, null, propertyFilter);\n\n    return {\n      'chunkElement': header.chunkElement,\n      'vertexElement': header.vertexElement\n    };\n  }\n\n  static getElementStorageArrays(chunkElement, vertexElement) {\n    const minX = getElementPropStorage(chunkElement, 'min_x');\n    const minY = getElementPropStorage(chunkElement, 'min_y');\n    const minZ = getElementPropStorage(chunkElement, 'min_z');\n    const maxX = getElementPropStorage(chunkElement, 'max_x');\n    const maxY = getElementPropStorage(chunkElement, 'max_y');\n    const maxZ = getElementPropStorage(chunkElement, 'max_z');\n    const minScaleX = getElementPropStorage(chunkElement, 'min_scale_x');\n    const minScaleY = getElementPropStorage(chunkElement, 'min_scale_y');\n    const minScaleZ = getElementPropStorage(chunkElement, 'min_scale_z');\n    const maxScaleX = getElementPropStorage(chunkElement, 'max_scale_x');\n    const maxScaleY = getElementPropStorage(chunkElement, 'max_scale_y');\n    const maxScaleZ = getElementPropStorage(chunkElement, 'max_scale_z');\n    const position = getElementPropStorage(vertexElement, 'packed_position');\n    const rotation = getElementPropStorage(vertexElement, 'packed_rotation');\n    const scale = getElementPropStorage(vertexElement, 'packed_scale');\n    const color = getElementPropStorage(vertexElement, 'packed_color');\n    return {\n      positionExtremes: {\n        minX, maxX,\n        minY, maxY,\n        minZ, maxZ\n      },\n      scaleExtremes: {\n        minScaleX, maxScaleX, minScaleY,\n        maxScaleY, minScaleZ, maxScaleZ\n      },\n      position,\n      rotation,\n      scale,\n      color\n    };\n  }\n\n  static decompressSplat = function() {\n\n    const p = new THREE.Vector3();\n    const r = new THREE.Quaternion();\n    const s = new THREE.Vector3();\n    const c = new THREE.Vector4();\n\n    const OFFSET = UncompressedSplatArray.OFFSET;\n\n    return function(index, chunkSplatIndexOffset, positionArray, positionExtremes, scaleArray, scaleExtremes,\n                    rotationArray, colorArray, outSplat) {\n      outSplat = outSplat || UncompressedSplatArray.createSplat();\n\n      const chunkIndex = Math.floor((chunkSplatIndexOffset + index) / 256);\n\n      unpack111011(p, positionArray[index]);\n      unpackRot(r, rotationArray[index]);\n      unpack111011(s, scaleArray[index]);\n      unpack8888(c, colorArray[index]);\n\n      outSplat[OFFSET.X] = lerp(positionExtremes.minX[chunkIndex], positionExtremes.maxX[chunkIndex], p.x);\n      outSplat[OFFSET.Y] = lerp(positionExtremes.minY[chunkIndex], positionExtremes.maxY[chunkIndex], p.y);\n      outSplat[OFFSET.Z] = lerp(positionExtremes.minZ[chunkIndex], positionExtremes.maxZ[chunkIndex], p.z);\n\n      outSplat[OFFSET.ROTATION0] = r.x;\n      outSplat[OFFSET.ROTATION1] = r.y;\n      outSplat[OFFSET.ROTATION2] = r.z;\n      outSplat[OFFSET.ROTATION3] = r.w;\n\n      outSplat[OFFSET.SCALE0] = Math.exp(lerp(scaleExtremes.minScaleX[chunkIndex], scaleExtremes.maxScaleX[chunkIndex], s.x));\n      outSplat[OFFSET.SCALE1] = Math.exp(lerp(scaleExtremes.minScaleY[chunkIndex], scaleExtremes.maxScaleY[chunkIndex], s.y));\n      outSplat[OFFSET.SCALE2] = Math.exp(lerp(scaleExtremes.minScaleZ[chunkIndex], scaleExtremes.maxScaleZ[chunkIndex], s.z));\n\n      outSplat[OFFSET.FDC0] = clamp(Math.floor(c.x * 255), 0, 255);\n      outSplat[OFFSET.FDC1] = clamp(Math.floor(c.y * 255), 0, 255);\n      outSplat[OFFSET.FDC2] = clamp(Math.floor(c.z * 255), 0, 255);\n      outSplat[OFFSET.OPACITY] = clamp(Math.floor(c.w * 255), 0, 255);\n\n      return outSplat;\n    };\n\n  }();\n\n  static parseToUncompressedSplatBufferSection(chunkElement, vertexElement, fromIndex, toIndex, chunkSplatIndexOffset,\n                                               vertexDataBuffer, veretxReadOffset, outBuffer, outOffset, propertyFilter = null) {\n\n    CompressedPlyParser.readElementData(vertexElement, vertexDataBuffer, veretxReadOffset, fromIndex, toIndex, propertyFilter);\n\n    const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\n    const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\n    const outBytesPerRotation = SplatBuffer.CompressionLevels[0].BytesPerRotation;\n    const outBytesPerSplat = SplatBuffer.CompressionLevels[0].BytesPerSplat;\n\n    const { positionExtremes, scaleExtremes, position, rotation, scale, color } =\n      CompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\n\n    const OFFSET = UncompressedSplatArray.OFFSET;\n    const tempSplat = UncompressedSplatArray.createSplat();\n\n    for (let i = fromIndex; i <= toIndex; ++i) {\n\n      CompressedPlyParser.decompressSplat(i, chunkSplatIndexOffset, position, positionExtremes,\n                                          scale, scaleExtremes, rotation, color, tempSplat);\n\n      const outBase = i * outBytesPerSplat + outOffset;\n      const outCenter = new Float32Array(outBuffer, outBase, 3);\n      const outScale = new Float32Array(outBuffer, outBase + outBytesPerCenter, 3);\n      const outRotation = new Float32Array(outBuffer, outBase + outBytesPerCenter + outBytesPerScale, 4);\n      const outColor = new Uint8Array(outBuffer, outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation, 4);\n\n      outCenter[0] = tempSplat[OFFSET.X];\n      outCenter[1] = tempSplat[OFFSET.Y];\n      outCenter[2] = tempSplat[OFFSET.Z];\n\n      outScale[0] = tempSplat[OFFSET.SCALE0];\n      outScale[1] = tempSplat[OFFSET.SCALE1];\n      outScale[2] = tempSplat[OFFSET.SCALE2];\n\n      outRotation[0] = tempSplat[OFFSET.ROTATION0];\n      outRotation[1] = tempSplat[OFFSET.ROTATION1];\n      outRotation[2] = tempSplat[OFFSET.ROTATION2];\n      outRotation[3] = tempSplat[OFFSET.ROTATION3];\n\n      outColor[0] = tempSplat[OFFSET.FDC0];\n      outColor[1] = tempSplat[OFFSET.FDC1];\n      outColor[2] = tempSplat[OFFSET.FDC2];\n      outColor[3] = tempSplat[OFFSET.OPACITY];\n    }\n  }\n\n  static parseToUncompressedSplatArray(plyBuffer) {\n    const { chunkElement, vertexElement } = CompressedPlyParser.readPly(plyBuffer);\n\n    const splatArray = new UncompressedSplatArray();\n\n    const { positionExtremes, scaleExtremes, position, rotation, scale, color } =\n      CompressedPlyParser.getElementStorageArrays(chunkElement, vertexElement);\n\n    for (let i = 0; i < vertexElement.count; ++i) {\n\n      splatArray.addDefaultSplat();\n      const newSplat = splatArray.getSplat(splatArray.splatCount - 1);\n\n      CompressedPlyParser.decompressSplat(i, 0, position, positionExtremes, scale, scaleExtremes, rotation, color, newSplat);\n    }\n\n    const mat = new THREE.Matrix4();\n    mat.identity();\n\n    return splatArray;\n  }\n\n}\n","import * as THREE from 'three';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\nimport { CompressedPlyParser } from './CompressedPlyParser.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { clamp } from '../../Util.js';\n\nexport class PlyParser {\n\n    static HeaderEndToken = 'end_header';\n\n    static Fields = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3',\n                     'x', 'y', 'z', 'f_dc_0', 'f_dc_1', 'f_dc_2', 'red', 'green', 'blue', 'opacity'];\n\n    static checkTextForEndHeader(endHeaderTestText) {\n        if (endHeaderTestText.includes(PlyParser.HeaderEndToken)) {\n            return true;\n        }\n        return false;\n    }\n\n    static checkBufferForEndHeader(buffer, searchOfset, chunkSize, decoder) {\n        const endHeaderTestChunk = new Uint8Array(buffer, Math.max(0, searchOfset - chunkSize), chunkSize);\n        const endHeaderTestText = decoder.decode(endHeaderTestChunk);\n        return PlyParser.checkTextForEndHeader(endHeaderTestText);\n    }\n\n    static decodeHeaderText(headerText) {\n        const headerLines = headerText.split('\\n');\n\n        const prunedLines = [];\n\n        let splatCount = 0;\n        let propertyTypes = {};\n        let compressed = false;\n\n        for (let i = 0; i < headerLines.length; i++) {\n            const line = headerLines[i].trim();\n            prunedLines.push(line);\n            if (line.startsWith('element chunk') || line.match(/[A-Za-z]*packed_[A-Za-z]*/)) {\n                compressed = true;\n            } else if (line.startsWith('element vertex')) {\n                const splatCountMatch = line.match(/\\d+/);\n                if (splatCountMatch) {\n                    splatCount = parseInt(splatCountMatch[0]);\n                }\n            } else if (line.startsWith('property')) {\n                const propertyMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\n                if (propertyMatch) {\n                    const propertyType = propertyMatch[2];\n                    const propertyName = propertyMatch[3];\n                    propertyTypes[propertyName] = propertyType;\n                }\n            } else if (line === PlyParser.HeaderEndToken) {\n                break;\n            }\n        }\n\n        let bytesPerSplat = 0;\n        let fieldOffsets = {};\n        const fieldSize = {\n            'double': 8,\n            'int': 4,\n            'uint': 4,\n            'float': 4,\n            'short': 2,\n            'ushort': 2,\n            'uchar': 1,\n        };\n\n        for (let fieldName in propertyTypes) {\n            if (propertyTypes.hasOwnProperty(fieldName)) {\n                const type = propertyTypes[fieldName];\n                fieldOffsets[fieldName] = bytesPerSplat;\n                bytesPerSplat += fieldSize[type];\n            }\n        }\n\n        return {\n            'splatCount': splatCount,\n            'propertyTypes': propertyTypes,\n            'compressed': compressed,\n            'headerText': headerText,\n            'headerLines': prunedLines,\n            'headerSizeBytes': headerText.indexOf(PlyParser.HeaderEndToken) + PlyParser.HeaderEndToken.length + 1,\n            'bytesPerSplat': bytesPerSplat,\n            'fieldOffsets': fieldOffsets\n        };\n    }\n\n    static decodeHeadeFromBuffer(plyBuffer) {\n        const decoder = new TextDecoder();\n        let headerOffset = 0;\n        let headerText = '';\n        const readChunkSize = 100;\n\n        while (true) {\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\n                throw new Error('End of file reached while searching for end of header');\n            }\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\n            headerText += decoder.decode(headerChunk);\n            headerOffset += readChunkSize;\n\n            if (PlyParser.checkBufferForEndHeader(plyBuffer, headerOffset, readChunkSize * 2, decoder)) {\n                break;\n            }\n        }\n\n        return PlyParser.decodeHeaderText(headerText);\n\n    }\n\n    static findVertexData(plyBuffer, header) {\n        return new DataView(plyBuffer, header.headerSizeBytes);\n    }\n\n    static readRawVertexFast(vertexData, offset, fieldOffsets, propertiesToRead, propertyTypes, outVertex) {\n        let rawVertex = outVertex || {};\n        for (let property of propertiesToRead) {\n            const propertyType = propertyTypes[property];\n            if (propertyType === 'float') {\n                rawVertex[property] = vertexData.getFloat32(offset + fieldOffsets[property], true);\n            } else if (propertyType === 'uchar') {\n                rawVertex[property] = vertexData.getUint8(offset + fieldOffsets[property]) / 255.0;\n            }\n        }\n    }\n\n    static parseToUncompressedSplatBufferSection(header, fromSplat, toSplat, vertexData, vertexDataOffset, toBuffer, toOffset) {\n        const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\n        const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\n        const outBytesPerRotation = SplatBuffer.CompressionLevels[0].BytesPerRotation;\n        const outBytesPerSplat = SplatBuffer.CompressionLevels[0].BytesPerSplat;\n\n        for (let i = fromSplat; i <= toSplat; i++) {\n\n            const parsedSplat = PlyParser.parseToUncompressedSplat(vertexData, i, header, vertexDataOffset);\n\n            const outBase = i * outBytesPerSplat + toOffset;\n            const outCenter = new Float32Array(toBuffer, outBase, 3);\n            const outScale = new Float32Array(toBuffer, outBase + outBytesPerCenter, 3);\n            const outRotation = new Float32Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale, 4);\n            const outColor = new Uint8Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation, 4);\n\n            outCenter[0] = parsedSplat[UncompressedSplatArray.OFFSET.X];\n            outCenter[1] = parsedSplat[UncompressedSplatArray.OFFSET.Y];\n            outCenter[2] = parsedSplat[UncompressedSplatArray.OFFSET.Z];\n\n            outScale[0] = parsedSplat[UncompressedSplatArray.OFFSET.SCALE0];\n            outScale[1] = parsedSplat[UncompressedSplatArray.OFFSET.SCALE1];\n            outScale[2] = parsedSplat[UncompressedSplatArray.OFFSET.SCALE2];\n\n            outRotation[0] = parsedSplat[UncompressedSplatArray.OFFSET.ROTATION0];\n            outRotation[1] = parsedSplat[UncompressedSplatArray.OFFSET.ROTATION1];\n            outRotation[2] = parsedSplat[UncompressedSplatArray.OFFSET.ROTATION2];\n            outRotation[3] = parsedSplat[UncompressedSplatArray.OFFSET.ROTATION3];\n\n            outColor[0] = parsedSplat[UncompressedSplatArray.OFFSET.FDC0];\n            outColor[1] = parsedSplat[UncompressedSplatArray.OFFSET.FDC1];\n            outColor[2] = parsedSplat[UncompressedSplatArray.OFFSET.FDC2];\n            outColor[3] = parsedSplat[UncompressedSplatArray.OFFSET.OPACITY];\n        }\n    }\n\n    static parseToUncompressedSplat = function() {\n\n        let rawVertex = {};\n        const tempRotation = new THREE.Quaternion();\n\n        return function(vertexData, row, header, vertexDataOffset = 0) {\n            PlyParser.readRawVertexFast(vertexData, row * header.bytesPerSplat + vertexDataOffset, header.fieldOffsets,\n                                        PlyParser.Fields, header.propertyTypes, rawVertex);\n            const newSplat = UncompressedSplatArray.createSplat();\n            if (rawVertex['scale_0'] !== undefined) {\n                newSplat[UncompressedSplatArray.OFFSET.SCALE0] = Math.exp(rawVertex['scale_0']);\n                newSplat[UncompressedSplatArray.OFFSET.SCALE1] = Math.exp(rawVertex['scale_1']);\n                newSplat[UncompressedSplatArray.OFFSET.SCALE2] = Math.exp(rawVertex['scale_2']);\n            } else {\n                newSplat[UncompressedSplatArray.OFFSET.SCALE0] = 0.01;\n                newSplat[UncompressedSplatArray.OFFSET.SCALE1] = 0.01;\n                newSplat[UncompressedSplatArray.OFFSET.SCALE2] = 0.01;\n            }\n\n            if (rawVertex['f_dc_0'] !== undefined) {\n                const SH_C0 = 0.28209479177387814;\n                newSplat[UncompressedSplatArray.OFFSET.FDC0] = (0.5 + SH_C0 * rawVertex['f_dc_0']) * 255;\n                newSplat[UncompressedSplatArray.OFFSET.FDC1] = (0.5 + SH_C0 * rawVertex['f_dc_1']) * 255;\n                newSplat[UncompressedSplatArray.OFFSET.FDC2] = (0.5 + SH_C0 * rawVertex['f_dc_2']) * 255;\n            } else if (rawVertex['red'] !== undefined) {\n                newSplat[UncompressedSplatArray.OFFSET.FDC0] = rawVertex['red'] * 255;\n                newSplat[UncompressedSplatArray.OFFSET.FDC1] = rawVertex['green'] * 255;\n                newSplat[UncompressedSplatArray.OFFSET.FDC2] = rawVertex['blue'] * 255;\n            } else {\n                newSplat[UncompressedSplatArray.OFFSET.FDC0] = 0;\n                newSplat[UncompressedSplatArray.OFFSET.FDC1] = 0;\n                newSplat[UncompressedSplatArray.OFFSET.FDC2] = 0;\n            }\n            if (rawVertex['opacity'] !== undefined) {\n                newSplat[UncompressedSplatArray.OFFSET.OPACITY] = (1 / (1 + Math.exp(-rawVertex['opacity']))) * 255;\n            }\n\n            newSplat[UncompressedSplatArray.OFFSET.FDC0] = clamp(Math.floor(newSplat[UncompressedSplatArray.OFFSET.FDC0]), 0, 255);\n            newSplat[UncompressedSplatArray.OFFSET.FDC1] = clamp(Math.floor(newSplat[UncompressedSplatArray.OFFSET.FDC1]), 0, 255);\n            newSplat[UncompressedSplatArray.OFFSET.FDC2] = clamp(Math.floor(newSplat[UncompressedSplatArray.OFFSET.FDC2]), 0, 255);\n            newSplat[UncompressedSplatArray.OFFSET.OPACITY] = clamp(Math.floor(newSplat[UncompressedSplatArray.OFFSET.OPACITY]), 0, 255);\n\n            tempRotation.set(rawVertex['rot_0'], rawVertex['rot_1'], rawVertex['rot_2'], rawVertex['rot_3']);\n            tempRotation.normalize();\n\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION0] = tempRotation.x;\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION1] = tempRotation.y;\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION2] = tempRotation.z;\n            newSplat[UncompressedSplatArray.OFFSET.ROTATION3] = tempRotation.w;\n\n            newSplat[UncompressedSplatArray.OFFSET.X] = rawVertex['x'];\n            newSplat[UncompressedSplatArray.OFFSET.Y] = rawVertex['y'];\n            newSplat[UncompressedSplatArray.OFFSET.Z] = rawVertex['z'];\n\n            return newSplat;\n        };\n\n    }();\n\n    static parseToUncompressedSplatArray(plyBuffer) {\n\n        const header = PlyParser.decodeHeadeFromBuffer(plyBuffer);\n\n        if (header.compressed) {\n\n            return CompressedPlyParser.parseToUncompressedSplatArray(plyBuffer);\n\n        } else {\n\n            const splatCount = header.splatCount;\n\n            const vertexData = PlyParser.findVertexData(plyBuffer, header);\n\n            // TODO: Eventually properly support multiple degree spherical harmonics\n            // figure out the SH degree from the number of coefficients\n            /* let nRestCoeffs = 0;\n            for (const propertyName in header.propertyTypes) {\n                if (propertyName.startsWith('f_rest_')) {\n                    nRestCoeffs += 1;\n                }\n            }\n            const nCoeffsPerColor = nRestCoeffs / 3;*/\n\n            // const sphericalHarmonicsDegree = Math.sqrt(nCoeffsPerColor + 1) - 1;\n            // const sphericalHarmonicsDegree = 0;\n            // console.log('Detected degree', sphericalHarmonicsDegree, 'with ', nCoeffsPerColor, 'coefficients per color');\n\n            // figure out the order in which spherical harmonics should be read\n            /* const shFeatureOrder = [];\n            for (let rgb = 0; rgb < 3; ++rgb) {\n                shFeatureOrder.push(`f_dc_${rgb}`);\n            }\n            for (let i = 0; i < nCoeffsPerColor; ++i) {\n                for (let rgb = 0; rgb < 3; ++rgb) {\n                    shFeatureOrder.push(`f_rest_${rgb * nCoeffsPerColor + i}`);\n                }\n            }*/\n\n            const splatArray = new UncompressedSplatArray();\n\n            for (let row = 0; row < splatCount; row++) {\n                const newSplat = PlyParser.parseToUncompressedSplat(vertexData, row, header);\n                splatArray.addSplat(newSplat);\n            }\n\n            return splatArray;\n        }\n    }\n\n}\n","import * as THREE from 'three';\nimport { UncompressedSplatArray } from './UncompressedSplatArray.js';\nimport { SplatBuffer } from './SplatBuffer.js';\n\nexport class SplatPartitioner {\n\n    constructor(sectionCount, sectionFilters, groupingParameters, partitionGenerator) {\n        this.sectionCount = sectionCount;\n        this.sectionFilters = sectionFilters;\n        this.groupingParameters = groupingParameters;\n        this.partitionGenerator = partitionGenerator;\n    }\n\n    partitionUncompressedSplatArray(splatArray) {\n        let groupingParameters;\n        let sectionCount;\n        let sectionFilters;\n        if (this.partitionGenerator) {\n            const results = this.partitionGenerator(splatArray);\n            groupingParameters = results.groupingParameters;\n            sectionCount = results.sectionCount;\n            sectionFilters = results.sectionFilters;\n        } else {\n            groupingParameters = this.groupingParameters;\n            sectionCount = this.sectionCount;\n            sectionFilters = this.sectionFilters;\n        }\n\n        const newArrays = [];\n        for (let s = 0; s < sectionCount; s++) {\n            const sectionSplats = new UncompressedSplatArray();\n            const sectionFilter = sectionFilters[s];\n            for (let i = 0; i < splatArray.splatCount; i++) {\n                if (sectionFilter(i)) {\n                    sectionSplats.addSplatFromArray(splatArray, i);\n                }\n            }\n            newArrays.push(sectionSplats);\n        }\n        return {\n            splatArrays: newArrays,\n            parameters: groupingParameters\n        };\n    }\n\n    static getStandardPartitioner(partitionSize = 0, sceneCenter = new THREE.Vector3(),\n                                  blockSize = SplatBuffer.BucketBlockSize, bucketSize = SplatBuffer.BucketSize) {\n        const partitionGenerator = (splatArray) => {\n\n            if (partitionSize <= 0) partitionSize = splatArray.splatCount;\n\n            const centerA = new THREE.Vector3();\n            const centerB = new THREE.Vector3();\n            const clampDistance = 0.5;\n            const clampPoint = (point) => {\n                point.x = Math.floor(point.x / clampDistance) * clampDistance;\n                point.y = Math.floor(point.y / clampDistance) * clampDistance;\n                point.z = Math.floor(point.z / clampDistance) * clampDistance;\n            };\n            splatArray.splats.sort((a, b) => {\n                centerA.set(a[UncompressedSplatArray.OFFSET.X],\n                            a[UncompressedSplatArray.OFFSET.Y],\n                            a[UncompressedSplatArray.OFFSET.Z]).sub(sceneCenter);\n                clampPoint(centerA);\n                const centerADist = centerA.lengthSq();\n                centerB.set(b[UncompressedSplatArray.OFFSET.X],\n                            b[UncompressedSplatArray.OFFSET.Y],\n                            b[UncompressedSplatArray.OFFSET.Z]).sub(sceneCenter);\n                clampPoint(centerB);\n                const centerBDist = centerB.lengthSq();\n                if (centerADist > centerBDist) return 1;\n                else return -1;\n            });\n\n            const sectionFilters = [];\n            const groupingParameters = [];\n            partitionSize = Math.min(splatArray.splatCount, partitionSize);\n            const patitionCount = Math.ceil(splatArray.splatCount / partitionSize);\n            let currentStartSplat = 0;\n            for (let i = 0; i < patitionCount; i ++) {\n                let startSplat = currentStartSplat;\n                sectionFilters.push((splatIndex) => {\n                    return splatIndex >= startSplat && splatIndex < startSplat + partitionSize;\n                });\n                groupingParameters.push({\n                    'blocksSize': blockSize,\n                    'bucketSize': bucketSize,\n                });\n                currentStartSplat += partitionSize;\n            }\n            return {\n                'sectionCount': sectionFilters.length,\n                sectionFilters,\n                groupingParameters\n            };\n        };\n        return new SplatPartitioner(undefined, undefined, undefined, partitionGenerator);\n    }\n}\n","import * as THREE from 'three';\nimport { SplatPartitioner } from './SplatPartitioner.js';\nimport { SplatBuffer } from './SplatBuffer.js';\n\nexport class SplatBufferGenerator {\n\n    constructor(splatPartitioner, alphaRemovalThreshold, compressionLevel, sectionSize, sceneCenter, blockSize, bucketSize) {\n        this.splatPartitioner = splatPartitioner;\n        this.alphaRemovalThreshold = alphaRemovalThreshold;\n        this.compressionLevel = compressionLevel;\n        this.sectionSize = sectionSize;\n        this.sceneCenter = sceneCenter ? new THREE.Vector3().copy(sceneCenter) : undefined;\n        this.blockSize = blockSize;\n        this.bucketSize = bucketSize;\n    }\n\n    generateFromUncompressedSplatArray(splatArray) {\n        const partitionResults = this.splatPartitioner.partitionUncompressedSplatArray(splatArray);\n        return SplatBuffer.generateFromUncompressedSplatArrays(partitionResults.splatArrays,\n                                                               this.alphaRemovalThreshold, this.compressionLevel,\n                                                               this.sceneCenter, this.blockSize, this.bucketSize,\n                                                               partitionResults.parameters);\n    }\n\n    static getStandardGenerator(alphaRemovalThreshold = 1, compressionLevel = 1, sectionSize = 0, sceneCenter = new THREE.Vector3(),\n                                blockSize = SplatBuffer.BucketBlockSize, bucketSize = SplatBuffer.BucketSize) {\n        const splatPartitioner = SplatPartitioner.getStandardPartitioner(sectionSize, sceneCenter, blockSize, bucketSize);\n        return new SplatBufferGenerator(splatPartitioner, alphaRemovalThreshold, compressionLevel,\n                                        sectionSize, sceneCenter, blockSize, bucketSize);\n    }\n}\n","export const LoaderStatus = {\n    'Downloading': 0,\n    'Processing': 1,\n    'Done': 2\n};\n","export class Constants {\n\n    static DepthMapRange = 1 << 16;\n    static MemoryPageSize = 65536;\n    static BytesPerFloat = 4;\n    static BytesPerInt = 4;\n    static MaxScenes = 32;\n    static StreamingSectionSize = 524288;\n\n}\n","import * as THREE from 'three';\nimport { PlyParser } from './PlyParser.js';\nimport { CompressedPlyParser } from './CompressedPlyParser.js';\nimport { fetchWithProgress, delayedExecute } from '../../Util.js';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { Constants } from '../../Constants.js';\n\nfunction storeChunksInBuffer(chunks, buffer) {\n    let inBytes = 0;\n    for (let chunk of chunks) inBytes += chunk.sizeBytes;\n\n    if (!buffer || buffer.byteLength < inBytes) {\n        buffer = new ArrayBuffer(inBytes);\n    }\n\n    let offset = 0;\n    for (let chunk of chunks) {\n        new Uint8Array(buffer, offset, chunk.sizeBytes).set(chunk.data);\n        offset += chunk.sizeBytes;\n    }\n\n    return buffer;\n}\n\nexport class PlyLoader {\n\n    static loadFromURL(fileName, onProgress, streamLoadData, onStreamedSectionProgress, minimumAlpha, compressionLevel,\n                       sectionSize, sceneCenter, blockSize, bucketSize) {\n\n        const streamedSectionSizeBytes = Constants.StreamingSectionSize;\n        const splatDataOffsetBytes = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\n        const sectionCount = 1;\n\n        let streamBufferIn;\n        let streamBufferOut;\n        let streamedSplatBuffer;\n        let compressedPlyHeaderChunksBuffer;\n        let maxSplatCount = 0;\n        let splatCount = 0;\n\n        let headerLoaded = false;\n        let readyToLoadSplatData = false;\n        let compressed = false;\n\n        let streamLoadCompleteResolver;\n        let streamLoadPromise = new Promise((resolve) => {\n            streamLoadCompleteResolver = resolve;\n        });\n\n        let numBytesStreamed = 0;\n        let numBytesParsed = 0;\n        let numBytesDownloaded = 0;\n        let headerText = '';\n        let header = null;\n        let chunks = [];\n\n        const textDecoder = new TextDecoder();\n\n        const localOnProgress = (percent, percentLabel, chunkData) => {\n            const loadComplete = percent >= 100;\n            if (streamLoadData) {\n\n                if (chunkData) {\n                    chunks.push({\n                        'data': chunkData,\n                        'sizeBytes': chunkData.byteLength,\n                        'startBytes': numBytesDownloaded,\n                        'endBytes': numBytesDownloaded + chunkData.byteLength\n                    });\n                    numBytesDownloaded += chunkData.byteLength;\n                }\n\n                if (!headerLoaded) {\n                    headerText += textDecoder.decode(chunkData);\n                    if (PlyParser.checkTextForEndHeader(headerText)) {\n                        header = PlyParser.decodeHeaderText(headerText);\n                        compressed = header.compressed;\n\n                        if (compressed) {\n                            header = CompressedPlyParser.decodeHeaderText(headerText);\n                            maxSplatCount = header.vertexElement.count;\n                        } else {\n                            maxSplatCount = header.splatCount;\n                            readyToLoadSplatData = true;\n                        }\n\n                        const splatBufferSizeBytes = splatDataOffsetBytes + SplatBuffer.CompressionLevels[0].BytesPerSplat * maxSplatCount;\n                        streamBufferOut = new ArrayBuffer(splatBufferSizeBytes);\n                        SplatBuffer.writeHeaderToBuffer({\n                            versionMajor: SplatBuffer.CurrentMajorVersion,\n                            versionMinor: SplatBuffer.CurrentMinorVersion,\n                            maxSectionCount: sectionCount,\n                            sectionCount: sectionCount,\n                            maxSplatCount: maxSplatCount,\n                            splatCount: splatCount,\n                            compressionLevel: 0,\n                            sceneCenter: new THREE.Vector3()\n                        }, streamBufferOut);\n\n                        numBytesStreamed = header.headerSizeBytes;\n                        numBytesParsed = header.headerSizeBytes;\n                        headerLoaded = true;\n                    }\n                } else if (compressed && !readyToLoadSplatData) {\n                    const sizeRequiredForHeaderAndChunks = header.headerSizeBytes + header.chunkElement.storageSizeBytes;\n                    compressedPlyHeaderChunksBuffer = storeChunksInBuffer(chunks, compressedPlyHeaderChunksBuffer);\n                    if (compressedPlyHeaderChunksBuffer.byteLength >= sizeRequiredForHeaderAndChunks) {\n                        CompressedPlyParser.readElementData(header.chunkElement, compressedPlyHeaderChunksBuffer, header.headerSizeBytes);\n                        numBytesStreamed = sizeRequiredForHeaderAndChunks;\n                        numBytesParsed = sizeRequiredForHeaderAndChunks;\n                        readyToLoadSplatData = true;\n                    }\n                }\n\n                if (headerLoaded && readyToLoadSplatData) {\n\n                    if (chunks.length > 0) {\n\n                        streamBufferIn = storeChunksInBuffer(chunks, streamBufferIn);\n\n                        const bytesLoadedSinceLastStreamedSection = numBytesDownloaded - numBytesStreamed;\n                        if (bytesLoadedSinceLastStreamedSection > streamedSectionSizeBytes || loadComplete) {\n                            const numBytesToProcess = numBytesDownloaded - numBytesParsed;\n                            const addedSplatCount = Math.floor(numBytesToProcess / header.bytesPerSplat);\n                            const numBytesToParse = addedSplatCount * header.bytesPerSplat;\n                            const numBytesLeftOver = numBytesToProcess - numBytesToParse;\n                            const newSplatCount = splatCount + addedSplatCount;\n                            const parsedDataViewOffset = numBytesParsed - chunks[0].startBytes;\n                            const dataToParse = new DataView(streamBufferIn, parsedDataViewOffset, numBytesToParse);\n\n                            const outOffset = splatCount * SplatBuffer.CompressionLevels[0].BytesPerSplat + splatDataOffsetBytes;\n\n                            if (compressed) {\n                                CompressedPlyParser.parseToUncompressedSplatBufferSection(header.chunkElement, header.vertexElement, 0,\n                                                                                          addedSplatCount - 1, splatCount,\n                                                                                          dataToParse, 0, streamBufferOut, outOffset);\n                            } else {\n                                PlyParser.parseToUncompressedSplatBufferSection(header, 0, addedSplatCount - 1,\n                                                                                dataToParse, 0, streamBufferOut, outOffset);\n                            }\n\n                            splatCount = newSplatCount;\n                            if (!streamedSplatBuffer) {\n                                SplatBuffer.writeSectionHeaderToBuffer({\n                                    maxSplatCount: maxSplatCount,\n                                    splatCount: splatCount,\n                                    bucketSize: 0,\n                                    bucketCount: 0,\n                                    bucketBlockSize: 0,\n                                    compressionScaleRange: 0,\n                                    storageSizeBytes: 0,\n                                    fullBucketCount: 0,\n                                    partiallyFilledBucketCount: 0\n                                }, 0, streamBufferOut, SplatBuffer.HeaderSizeBytes);\n                                streamedSplatBuffer = new SplatBuffer(streamBufferOut, false);\n                            }\n                            streamedSplatBuffer.updateLoadedCounts(1, splatCount);\n                            onStreamedSectionProgress(streamedSplatBuffer, loadComplete);\n                            numBytesStreamed += streamedSectionSizeBytes;\n                            numBytesParsed += numBytesToParse;\n\n                            if (numBytesLeftOver === 0) {\n                                chunks = [];\n                            } else {\n                                let keepChunks = [];\n                                let keepSize = 0;\n                                for (let i = chunks.length - 1; i >= 0; i--) {\n                                    const chunk = chunks[i];\n                                    keepSize += chunk.sizeBytes;\n                                    keepChunks.unshift(chunk);\n                                    if (keepSize >= numBytesLeftOver) break;\n                                }\n                                chunks = keepChunks;\n                            }\n                        }\n                    }\n\n                    if (loadComplete) {\n                        streamLoadCompleteResolver(streamedSplatBuffer);\n                    }\n                }\n\n            }\n            if (onProgress) onProgress(percent, percentLabel, LoaderStatus.Downloading);\n        };\n\n        return fetchWithProgress(fileName, localOnProgress, !streamLoadData).then((plyFileData) => {\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n            const loadPromise = streamLoadData ? streamLoadPromise : PlyLoader.loadFromFileData(plyFileData, minimumAlpha, compressionLevel,\n                                                                                        sectionSize, sceneCenter, blockSize, bucketSize);\n            return loadPromise.then((splatBuffer) => {\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n                return splatBuffer;\n            });\n        });\n    }\n\n    static loadFromFileData(plyFileData, minimumAlpha, compressionLevel, sectionSize, sceneCenter, blockSize, bucketSize) {\n        return delayedExecute(() => {\n            return PlyParser.parseToUncompressedSplatArray(plyFileData);\n        })\n        .then((splatArray) => {\n            const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(minimumAlpha, compressionLevel, sectionSize,\n                                                                                   sceneCenter, blockSize, bucketSize);\n            return splatBufferGenerator.generateFromUncompressedSplatArray(splatArray);\n        });\n    }\n}\n","import * as THREE from 'three';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { UncompressedSplatArray } from '../UncompressedSplatArray.js';\n\nexport class SplatParser {\n\n    static RowSizeBytes = 32;\n    static CenterSizeBytes = 12;\n    static ScaleSizeBytes = 12;\n    static RotationSizeBytes = 4;\n    static ColorSizeBytes = 4;\n\n    static parseToUncompressedSplatBufferSection(fromSplat, toSplat, fromBuffer, fromOffset, toBuffer, toOffset) {\n\n        const outBytesPerCenter = SplatBuffer.CompressionLevels[0].BytesPerCenter;\n        const outBytesPerScale = SplatBuffer.CompressionLevels[0].BytesPerScale;\n        const outBytesPerRotation = SplatBuffer.CompressionLevels[0].BytesPerRotation;\n        const outBytesPerSplat = SplatBuffer.CompressionLevels[0].BytesPerSplat;\n\n        for (let i = fromSplat; i <= toSplat; i++) {\n            const inBase = i * SplatParser.RowSizeBytes + fromOffset;\n            const inCenter = new Float32Array(fromBuffer, inBase, 3);\n            const inScale = new Float32Array(fromBuffer, inBase + SplatParser.CenterSizeBytes, 3);\n            const inColor = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\n            const inRotation = new Uint8Array(fromBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes +\n                                              SplatParser.RotationSizeBytes, 4);\n\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\n            quat.normalize();\n\n            const outBase = i * outBytesPerSplat + toOffset;\n            const outCenter = new Float32Array(toBuffer, outBase, 3);\n            const outScale = new Float32Array(toBuffer, outBase + outBytesPerCenter, 3);\n            const outRotation = new Float32Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale, 4);\n            const outColor = new Uint8Array(toBuffer, outBase + outBytesPerCenter + outBytesPerScale + outBytesPerRotation, 4);\n\n            outCenter[0] = inCenter[0];\n            outCenter[1] = inCenter[1];\n            outCenter[2] = inCenter[2];\n\n            outScale[0] = inScale[0];\n            outScale[1] = inScale[1];\n            outScale[2] = inScale[2];\n\n            outRotation[0] = quat.w;\n            outRotation[1] = quat.x;\n            outRotation[2] = quat.y;\n            outRotation[3] = quat.z;\n\n            outColor[0] = inColor[0];\n            outColor[1] = inColor[1];\n            outColor[2] = inColor[2];\n            outColor[3] = inColor[3];\n        }\n    }\n\n    static parseStandardSplatToUncompressedSplatArray(inBuffer) {\n        // Standard .splat row layout:\n        // XYZ - Position (Float32)\n        // XYZ - Scale (Float32)\n        // RGBA - colors (uint8)\n        // IJKL - quaternion/rot (uint8)\n\n        const splatCount = inBuffer.byteLength / SplatParser.RowSizeBytes;\n\n        const splatArray = new UncompressedSplatArray();\n\n        for (let i = 0; i < splatCount; i++) {\n            const inBase = i * SplatParser.RowSizeBytes;\n            const inCenter = new Float32Array(inBuffer, inBase, 3);\n            const inScale = new Float32Array(inBuffer, inBase + SplatParser.CenterSizeBytes, 3);\n            const inColor = new Uint8Array(inBuffer, inBase + SplatParser.CenterSizeBytes + SplatParser.ScaleSizeBytes, 4);\n            const inRotation = new Uint8Array(inBuffer, inBase + SplatParser.CenterSizeBytes +\n                                              SplatParser.ScaleSizeBytes + SplatParser.ColorSizeBytes, 4);\n\n            const quat = new THREE.Quaternion((inRotation[1] - 128) / 128, (inRotation[2] - 128) / 128,\n                                              (inRotation[3] - 128) / 128, (inRotation[0] - 128) / 128);\n            quat.normalize();\n\n            splatArray.addSplatFromComonents(inCenter[0], inCenter[1], inCenter[2], inScale[0], inScale[1], inScale[2],\n                                             quat.w, quat.x, quat.y, quat.z, inColor[0], inColor[1], inColor[2], inColor[3]);\n        }\n\n        return splatArray;\n    }\n\n}\n","import * as THREE from 'three';\nimport { SplatBuffer } from '../SplatBuffer.js';\nimport { SplatBufferGenerator } from '../SplatBufferGenerator.js';\nimport { SplatParser } from './SplatParser.js';\nimport { fetchWithProgress, delayedExecute } from '../../Util.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { Constants } from '../../Constants.js';\n\nexport class SplatLoader {\n\n    static loadFromURL(fileName, onProgress, streamLoadData, onStreamedSectionProgress, minimumAlpha, compressionLevel,\n                       optimizeSplatData, sectionSize, sceneCenter, blockSize, bucketSize) {\n\n        const splatDataOffsetBytes = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes;\n        const streamSectionSizeBytes = Constants.StreamingSectionSize;\n        const sectionCount = 1;\n\n        let streamBufferIn;\n        let streamBufferOut;\n        let streamSplatBuffer;\n        let maxSplatCount = 0;\n        let splatCount = 0;\n\n        let streamLoadCompleteResolver;\n        let streamLoadPromise = new Promise((resolve) => {\n            streamLoadCompleteResolver = resolve;\n        });\n\n        let numBytesStreamed = 0;\n        let numBytesLoaded = 0;\n        let chunks = [];\n\n        const localOnProgress = (percent, percentStr, chunk, fileSize) => {\n            const loadComplete = percent >= 100;\n            if (!fileSize) streamLoadData = false;\n            if (streamLoadData) {\n                if (!streamBufferIn) {\n                    maxSplatCount = fileSize / SplatParser.RowSizeBytes;\n                    streamBufferIn = new ArrayBuffer(fileSize);\n                    const splatBufferSizeBytes = splatDataOffsetBytes + SplatBuffer.CompressionLevels[0].BytesPerSplat * maxSplatCount;\n                    streamBufferOut = new ArrayBuffer(splatBufferSizeBytes);\n                    SplatBuffer.writeHeaderToBuffer({\n                        versionMajor: SplatBuffer.CurrentMajorVersion,\n                        versionMinor: SplatBuffer.CurrentMinorVersion,\n                        maxSectionCount: sectionCount,\n                        sectionCount: sectionCount,\n                        maxSplatCount: maxSplatCount,\n                        splatCount: splatCount,\n                        compressionLevel: 0,\n                        sceneCenter: new THREE.Vector3()\n                    }, streamBufferOut);\n                }\n\n                if (chunk) {\n                    chunks.push(chunk);\n                    new Uint8Array(streamBufferIn, numBytesLoaded, chunk.byteLength).set(new Uint8Array(chunk));\n                    numBytesLoaded += chunk.byteLength;\n\n                    const bytesLoadedSinceLastSection = numBytesLoaded - numBytesStreamed;\n                    if (bytesLoadedSinceLastSection > streamSectionSizeBytes || loadComplete) {\n                        const bytesToUpdate = loadComplete ? bytesLoadedSinceLastSection : streamSectionSizeBytes;\n                        const addedSplatCount = bytesToUpdate / SplatParser.RowSizeBytes;\n                        const newSplatCount = splatCount + addedSplatCount;\n                        SplatParser.parseToUncompressedSplatBufferSection(splatCount, newSplatCount - 1, streamBufferIn, 0,\n                                                                          streamBufferOut, splatDataOffsetBytes);\n                        splatCount = newSplatCount;\n                        if (!streamSplatBuffer) {\n                            SplatBuffer.writeSectionHeaderToBuffer({\n                                maxSplatCount: maxSplatCount,\n                                splatCount: splatCount,\n                                bucketSize: 0,\n                                bucketCount: 0,\n                                bucketBlockSize: 0,\n                                compressionScaleRange: 0,\n                                storageSizeBytes: 0,\n                                fullBucketCount: 0,\n                                partiallyFilledBucketCount: 0\n                            }, 0, streamBufferOut, SplatBuffer.HeaderSizeBytes);\n                            streamSplatBuffer = new SplatBuffer(streamBufferOut, false);\n                        }\n                        streamSplatBuffer.updateLoadedCounts(1, splatCount);\n                        onStreamedSectionProgress(streamSplatBuffer, loadComplete);\n                        numBytesStreamed += streamSectionSizeBytes;\n                    }\n                }\n                if (loadComplete) {\n                    streamLoadCompleteResolver(streamSplatBuffer);\n                }\n            }\n            if (onProgress) onProgress(percent, percentStr, LoaderStatus.Downloading);\n            return streamLoadData;\n        };\n\n        return fetchWithProgress(fileName, localOnProgress, true).then((fullBuffer) => {\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n            const loadPromise = streamLoadData ? streamLoadPromise :\n                SplatLoader.loadFromFileData(fullBuffer, minimumAlpha, compressionLevel, optimizeSplatData,\n                                             sectionSize, sceneCenter, blockSize, bucketSize);\n            return loadPromise.then((splatBuffer) => {\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n                return splatBuffer;\n            });\n        });\n    }\n\n    static loadFromFileData(splatFileData, minimumAlpha, compressionLevel, optimizeSplatData,\n                            sectionSize, sceneCenter, blockSize, bucketSize) {\n        return delayedExecute(() => {\n            const splatArray = SplatParser.parseStandardSplatToUncompressedSplatArray(splatFileData);\n            if (optimizeSplatData) {\n                const splatBufferGenerator = SplatBufferGenerator.getStandardGenerator(minimumAlpha, compressionLevel,\n                                                                                       sectionSize, sceneCenter, blockSize,\n                                                                                       bucketSize);\n                return splatBufferGenerator.generateFromUncompressedSplatArray(splatArray);\n            } else {\n                return SplatBuffer.generateFromUncompressedSplatArrays([splatArray], minimumAlpha, 0, new THREE.Vector3());\n            }\n        });\n    }\n\n}\n","import { SplatBuffer } from '../SplatBuffer.js';\nimport { fetchWithProgress, delayedExecute } from '../../Util.js';\nimport { LoaderStatus } from '../LoaderStatus.js';\nimport { Constants } from '../../Constants.js';\n\nexport class KSplatLoader {\n\n   static checkVersion(buffer) {\n        const minVersionMajor = SplatBuffer.CurrentMajorVersion;\n        const minVersionMinor = SplatBuffer.CurrentMinorVersion;\n        const header = SplatBuffer.parseHeader(buffer);\n        if (header.versionMajor === minVersionMajor &&\n            header.versionMinor >= minVersionMinor ||\n            header.versionMajor > minVersionMajor) {\n           return true;\n        } else {\n            throw new Error(`KSplat version not supported: v${header.versionMajor}.${header.versionMinor}. ` +\n                            `Minimum required: v${minVersionMajor}.${minVersionMinor}`);\n        }\n    };\n\n    static loadFromURL(fileName, onProgress, streamLoadData, onSectionBuilt) {\n        let streamBuffer;\n        let streamSplatBuffer;\n\n        let headerBuffer;\n        let header;\n        let headerLoaded = false;\n        let headerLoading = false;\n\n        let sectionHeadersBuffer;\n        let sectionHeaders = [];\n        let sectionHeadersLoaded = false;\n        let sectionHeadersLoading = false;\n\n        let numBytesLoaded = 0;\n        let numBytesStreamed = 0;\n        let streamSectionSizeBytes = Constants.StreamingSectionSize;\n        let totalBytesToDownload = 0;\n\n        let loadComplete = false;\n\n        let chunks = [];\n\n        let streamLoadCompleteResolver;\n        let streamLoadPromise = new Promise((resolve) => {\n            streamLoadCompleteResolver = resolve;\n        });\n\n        const checkAndLoadHeader = () => {\n            if (!headerLoaded && !headerLoading && numBytesLoaded >= SplatBuffer.HeaderSizeBytes) {\n                headerLoading = true;\n                const headerAssemblyPromise = new Blob(chunks).arrayBuffer();\n                headerAssemblyPromise.then((bufferData) => {\n                    headerBuffer = new ArrayBuffer(SplatBuffer.HeaderSizeBytes);\n                    new Uint8Array(headerBuffer).set(new Uint8Array(bufferData, 0, SplatBuffer.HeaderSizeBytes));\n                    KSplatLoader.checkVersion(headerBuffer);\n                    headerLoading = false;\n                    headerLoaded = true;\n                    header = SplatBuffer.parseHeader(headerBuffer);\n                    window.setTimeout(() => {\n                        checkAndLoadSectionHeaders();\n                    }, 1);\n                });\n            }\n        };\n\n        let queuedCheckAndLoadSectionsCount = 0;\n        const queueCheckAndLoadSections = () => {\n            if (queuedCheckAndLoadSectionsCount === 0) {\n                queuedCheckAndLoadSectionsCount++;\n                window.setTimeout(() => {\n                    queuedCheckAndLoadSectionsCount--;\n                    checkAndLoadSections(true);\n                }, 1);\n            }\n        };\n\n        const checkAndLoadSectionHeaders = () => {\n            const performLoad = () => {\n                sectionHeadersLoading = true;\n                const sectionHeadersAssemblyPromise = new Blob(chunks).arrayBuffer();\n                sectionHeadersAssemblyPromise.then((bufferData) => {\n                    sectionHeadersLoading = false;\n                    sectionHeadersLoaded = true;\n                    sectionHeadersBuffer = new ArrayBuffer(header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes);\n                    new Uint8Array(sectionHeadersBuffer).set(new Uint8Array(bufferData, SplatBuffer.HeaderSizeBytes,\n                                                                            header.maxSectionCount * SplatBuffer.SectionHeaderSizeBytes));\n                    sectionHeaders = SplatBuffer.parseSectionHeaders(header, sectionHeadersBuffer, 0, false);\n                    let totalSectionStorageStorageByes = 0;\n                    for (let i = 0; i < header.maxSectionCount; i++) {\n                        totalSectionStorageStorageByes += sectionHeaders[i].storageSizeBytes;\n                    }\n                    const totalStorageSizeBytes = SplatBuffer.HeaderSizeBytes + header.maxSectionCount *\n                                                  SplatBuffer.SectionHeaderSizeBytes + totalSectionStorageStorageByes;\n                    if (!streamBuffer) {\n                        streamBuffer = new ArrayBuffer(totalStorageSizeBytes);\n                        let offset = 0;\n                        for (let i = 0; i < chunks.length; i++) {\n                            const chunk = chunks[i];\n                            new Uint8Array(streamBuffer, offset, chunk.byteLength).set(new Uint8Array(chunk));\n                            offset += chunk.byteLength;\n                        }\n                    }\n\n                    totalBytesToDownload = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\n                    for (let i = 0; i <= sectionHeaders.length && i < header.maxSectionCount; i++) {\n                        totalBytesToDownload += sectionHeaders[i].storageSizeBytes;\n                    }\n\n                    queueCheckAndLoadSections();\n                });\n            };\n\n            if (!sectionHeadersLoading && !sectionHeadersLoaded && headerLoaded &&\n                numBytesLoaded >= SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount) {\n                performLoad();\n            }\n        };\n\n        const checkAndLoadSections = () => {\n            if (sectionHeadersLoaded) {\n\n                if (loadComplete) return;\n\n                loadComplete = numBytesLoaded >= totalBytesToDownload;\n\n                const bytesLoadedSinceLastSection = numBytesLoaded - numBytesStreamed;\n                if (bytesLoadedSinceLastSection > streamSectionSizeBytes || loadComplete) {\n\n                    numBytesStreamed = numBytesLoaded;\n\n                    if (!streamSplatBuffer) streamSplatBuffer = new SplatBuffer(streamBuffer, false);\n\n                    const baseDataOffset = SplatBuffer.HeaderSizeBytes + SplatBuffer.SectionHeaderSizeBytes * header.maxSectionCount;\n                    let sectionBase = 0;\n                    let reachedSections = 0;\n                    let loadedSplatCount = 0;\n                    for (let i = 0; i < header.maxSectionCount; i++) {\n                        const sectionHeader = sectionHeaders[i];\n                        const bucketsDataOffset = sectionBase + sectionHeader.partiallyFilledBucketCount * 4 +\n                                                  sectionHeader.bucketStorageSizeBytes * sectionHeader.bucketCount;\n                        const bytesRequiredToReachSectionSplatData = baseDataOffset + bucketsDataOffset;\n                        if (numBytesLoaded >= bytesRequiredToReachSectionSplatData) {\n                            reachedSections++;\n                            const bytesPastSSectionSplatDataStart = numBytesLoaded - bytesRequiredToReachSectionSplatData;\n                            const bytesPerSplat = SplatBuffer.CompressionLevels[header.compressionLevel].BytesPerSplat;\n                            let loadedSplatsForSection = Math.floor(bytesPastSSectionSplatDataStart / bytesPerSplat);\n                            loadedSplatsForSection = Math.min(loadedSplatsForSection, sectionHeader.maxSplatCount);\n                            loadedSplatCount += loadedSplatsForSection;\n                            streamSplatBuffer.updateLoadedCounts(reachedSections, loadedSplatCount);\n                            streamSplatBuffer.updateSectionLoadedCounts(i, loadedSplatsForSection);\n                        } else {\n                            break;\n                        }\n                        sectionBase += sectionHeader.storageSizeBytes;\n                    }\n\n                    onSectionBuilt(streamSplatBuffer, loadComplete);\n\n                    if (loadComplete) {\n                        streamLoadCompleteResolver(streamSplatBuffer);\n                    }\n                }\n            }\n        };\n\n        const localOnProgress = (percent, percentStr, chunk) => {\n            if (chunk) {\n                chunks.push(chunk);\n                if (streamBuffer) {\n                    new Uint8Array(streamBuffer, numBytesLoaded, chunk.byteLength).set(new Uint8Array(chunk));\n                }\n                numBytesLoaded += chunk.byteLength;\n            }\n            if (streamLoadData) {\n                checkAndLoadHeader();\n                checkAndLoadSectionHeaders();\n                checkAndLoadSections();\n            }\n            if (onProgress) onProgress(percent, percentStr, LoaderStatus.Downloading);\n        };\n\n        return fetchWithProgress(fileName, localOnProgress, !streamLoadData).then((fullBuffer) => {\n            if (onProgress) onProgress(0, '0%', LoaderStatus.Processing);\n            const loadPromise = streamLoadData ? streamLoadPromise : KSplatLoader.loadFromFileData(fullBuffer);\n            return loadPromise.then((splatBuffer) => {\n                if (onProgress) onProgress(100, '100%', LoaderStatus.Done);\n                return splatBuffer;\n            });\n        });\n    }\n\n    static loadFromFileData(fileData) {\n        return delayedExecute(() => {\n            KSplatLoader.checkVersion(fileData);\n            return new SplatBuffer(fileData);\n        });\n    }\n\n    static downloadFile = function() {\n\n        let downLoadLink;\n\n        return function(splatBuffer, fileName) {\n            const blob = new Blob([splatBuffer.bufferData], {\n                type: 'application/octet-stream',\n            });\n\n            if (!downLoadLink) {\n                downLoadLink = document.createElement('a');\n                document.body.appendChild(downLoadLink);\n            }\n            downLoadLink.download = fileName;\n            downLoadLink.href = URL.createObjectURL(blob);\n            downLoadLink.click();\n        };\n\n    }();\n\n}\n","export const SceneFormat = {\n    'Splat': 0,\n    'KSplat': 1,\n    'Ply': 2\n};\n","import { SceneFormat } from './SceneFormat.js';\n\nexport const sceneFormatFromPath = (path) => {\n    if (path.endsWith('.ply')) return SceneFormat.Ply;\n    else if (path.endsWith('.splat')) return SceneFormat.Splat;\n    else if (path.endsWith('.ksplat')) return SceneFormat.KSplat;\n    return null;\n};\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nimport {\n    EventDispatcher,\n    MOUSE,\n    Quaternion,\n    Spherical,\n    TOUCH,\n    Vector2,\n    Vector3,\n    Plane,\n    Ray,\n    MathUtils\n} from 'three';\n\n// OrbitControls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nconst _changeEvent = { type: 'change' };\nconst _startEvent = { type: 'start' };\nconst _endEvent = { type: 'end' };\nconst _ray = new Ray();\nconst _plane = new Plane();\nconst TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\n\nclass OrbitControls extends EventDispatcher {\n\n    constructor( object, domElement ) {\n\n        super();\n\n        this.object = object;\n        this.domElement = domElement;\n        this.domElement.style.touchAction = 'none'; // disable touch scroll\n\n        // Set to false to disable this control\n        this.enabled = true;\n\n        // \"target\" sets the location of focus, where the object orbits around\n        this.target = new Vector3();\n\n        // How far you can dolly in and out ( PerspectiveCamera only )\n        this.minDistance = 0;\n        this.maxDistance = Infinity;\n\n        // How far you can zoom in and out ( OrthographicCamera only )\n        this.minZoom = 0;\n        this.maxZoom = Infinity;\n\n        // How far you can orbit vertically, upper and lower limits.\n        // Range is 0 to Math.PI radians.\n        this.minPolarAngle = 0; // radians\n        this.maxPolarAngle = Math.PI; // radians\n\n        // How far you can orbit horizontally, upper and lower limits.\n        // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\n        this.minAzimuthAngle = - Infinity; // radians\n        this.maxAzimuthAngle = Infinity; // radians\n\n        // Set to true to enable damping (inertia)\n        // If damping is enabled, you must call controls.update() in your animation loop\n        this.enableDamping = false;\n        this.dampingFactor = 0.05;\n\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n        // Set to false to disable zooming\n        this.enableZoom = true;\n        this.zoomSpeed = 1.0;\n\n        // Set to false to disable rotating\n        this.enableRotate = true;\n        this.rotateSpeed = 1.0;\n\n        // Set to false to disable panning\n        this.enablePan = true;\n        this.panSpeed = 1.0;\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n        this.zoomToCursor = false;\n\n        // Set to true to automatically rotate around the target\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\n        this.autoRotate = false;\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n        // The four arrow keys\n        this.keys = { LEFT: 'KeyA', UP: 'KeyW', RIGHT: 'KeyD', BOTTOM: 'KeyS' };\n\n        // Mouse buttons\n        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n        // Touch fingers\n        this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n        // for reset\n        this.target0 = this.target.clone();\n        this.position0 = this.object.position.clone();\n        this.zoom0 = this.object.zoom;\n\n        // the target DOM element for key events\n        this._domElementKeyEvents = null;\n\n        //\n        // public methods\n        //\n\n        this.getPolarAngle = function() {\n\n            return spherical.phi;\n\n        };\n\n        this.getAzimuthalAngle = function() {\n\n            return spherical.theta;\n\n        };\n\n        this.getDistance = function() {\n\n            return this.object.position.distanceTo( this.target );\n\n        };\n\n        this.listenToKeyEvents = function( domElement ) {\n\n            domElement.addEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = domElement;\n\n        };\n\n        this.stopListenToKeyEvents = function() {\n\n            this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = null;\n\n        };\n\n        this.saveState = function() {\n\n            scope.target0.copy( scope.target );\n            scope.position0.copy( scope.object.position );\n            scope.zoom0 = scope.object.zoom;\n\n        };\n\n        this.reset = function() {\n\n            scope.target.copy( scope.target0 );\n            scope.object.position.copy( scope.position0 );\n            scope.object.zoom = scope.zoom0;\n\n            scope.object.updateProjectionMatrix();\n            scope.dispatchEvent( _changeEvent );\n\n            scope.update();\n\n            state = STATE.NONE;\n\n        };\n\n        // this method is exposed, but perhaps it would be better if we can make it private...\n        this.update = function() {\n\n            const offset = new Vector3();\n\n            // so camera.up is the orbit axis\n            const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n            const quatInverse = quat.clone().invert();\n\n            const lastPosition = new Vector3();\n            const lastQuaternion = new Quaternion();\n            const lastTargetPosition = new Vector3();\n\n            const twoPI = 2 * Math.PI;\n\n            return function update() {\n\n                quat.setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n                quatInverse.copy(quat).invert();\n\n                const position = scope.object.position;\n\n                offset.copy( position ).sub( scope.target );\n\n                // rotate offset to \"y-axis-is-up\" space\n                offset.applyQuaternion( quat );\n\n                // angle from z-axis around y-axis\n                spherical.setFromVector3( offset );\n\n                if ( scope.autoRotate && state === STATE.NONE ) {\n\n                    rotateLeft( getAutoRotationAngle() );\n\n                }\n\n                if ( scope.enableDamping ) {\n\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n                } else {\n\n                    spherical.theta += sphericalDelta.theta;\n                    spherical.phi += sphericalDelta.phi;\n\n                }\n\n                // restrict theta to be between desired limits\n\n                let min = scope.minAzimuthAngle;\n                let max = scope.maxAzimuthAngle;\n\n                if ( isFinite( min ) && isFinite( max ) ) {\n\n                    if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n                    if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n                    if ( min <= max ) {\n\n                        spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n                    } else {\n\n                        spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n                            Math.max( min, spherical.theta ) :\n                            Math.min( max, spherical.theta );\n\n                    }\n\n                }\n\n                // restrict phi to be between desired limits\n                spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n                spherical.makeSafe();\n\n\n                // move target to panned location\n\n                if ( scope.enableDamping === true ) {\n\n                    scope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n                } else {\n\n                    scope.target.add( panOffset );\n\n                }\n\n                // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n                // we adjust zoom later in these cases\n                if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {\n\n                    spherical.radius = clampDistance( spherical.radius );\n\n                } else {\n\n                    spherical.radius = clampDistance( spherical.radius * scale );\n\n                }\n\n\n                offset.setFromSpherical( spherical );\n\n                // rotate offset back to \"camera-up-vector-is-up\" space\n                offset.applyQuaternion( quatInverse );\n\n                position.copy( scope.target ).add( offset );\n\n                scope.object.lookAt( scope.target );\n\n                if ( scope.enableDamping === true ) {\n\n                    sphericalDelta.theta *= ( 1 - scope.dampingFactor );\n                    sphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n                    panOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n                } else {\n\n                    sphericalDelta.set( 0, 0, 0 );\n\n                    panOffset.set( 0, 0, 0 );\n\n                }\n\n                // adjust camera position\n                let zoomChanged = false;\n                if ( scope.zoomToCursor && performCursorZoom ) {\n\n                    let newRadius = null;\n                    if ( scope.object.isPerspectiveCamera ) {\n\n                        // move the camera down the pointer ray\n                        // this method avoids floating point error\n                        const prevRadius = offset.length();\n                        newRadius = clampDistance( prevRadius * scale );\n\n                        const radiusDelta = prevRadius - newRadius;\n                        scope.object.position.addScaledVector( dollyDirection, radiusDelta );\n                        scope.object.updateMatrixWorld();\n\n                    } else if ( scope.object.isOrthographicCamera ) {\n\n                        // adjust the ortho camera position based on zoom changes\n                        const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseBefore.unproject( scope.object );\n\n                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                        scope.object.updateProjectionMatrix();\n                        zoomChanged = true;\n\n                        const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseAfter.unproject( scope.object );\n\n                        scope.object.position.sub( mouseAfter ).add( mouseBefore );\n                        scope.object.updateMatrixWorld();\n\n                        newRadius = offset.length();\n\n                    } else {\n\n                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\n                        scope.zoomToCursor = false;\n\n                    }\n\n                    // handle the placement of the target\n                    if ( newRadius !== null ) {\n\n                        if ( this.screenSpacePanning ) {\n\n                            // position the orbit target in front of the new camera position\n                            scope.target.set( 0, 0, - 1 )\n                                .transformDirection( scope.object.matrix )\n                                .multiplyScalar( newRadius )\n                                .add( scope.object.position );\n\n                        } else {\n\n                            // get the ray and translation plane to compute target\n                            _ray.origin.copy( scope.object.position );\n                            _ray.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );\n\n                            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n                            // extremely large values\n                            if ( Math.abs( scope.object.up.dot( _ray.direction ) ) < TILT_LIMIT ) {\n\n                                object.lookAt( scope.target );\n\n                            } else {\n\n                                _plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );\n                                _ray.intersectPlane( _plane, scope.target );\n\n                            }\n\n                        }\n\n                    }\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                    scope.object.updateProjectionMatrix();\n                    zoomChanged = true;\n\n                }\n\n                scale = 1;\n                performCursorZoom = false;\n\n                // update condition is:\n                // min(camera displacement, camera rotation in radians)^2 > EPS\n                // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n                if ( zoomChanged ||\n                    lastPosition.distanceToSquared( scope.object.position ) > EPS ||\n                    8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||\n                    lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {\n\n                    scope.dispatchEvent( _changeEvent );\n\n                    lastPosition.copy( scope.object.position );\n                    lastQuaternion.copy( scope.object.quaternion );\n                    lastTargetPosition.copy( scope.target );\n\n                    zoomChanged = false;\n\n                    return true;\n\n                }\n\n                return false;\n\n            };\n\n        }();\n\n        this.dispose = function() {\n\n            scope.domElement.removeEventListener( 'contextmenu', onContextMenu );\n\n            scope.domElement.removeEventListener( 'pointerdown', onPointerDown );\n            scope.domElement.removeEventListener( 'pointercancel', onPointerUp );\n            scope.domElement.removeEventListener( 'wheel', onMouseWheel );\n\n            scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n            scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n\n            if ( scope._domElementKeyEvents !== null ) {\n\n                scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n                scope._domElementKeyEvents = null;\n\n            }\n\n        };\n\n        this.clearDampedRotation = function() {\n            sphericalDelta.theta = 0.0;\n            sphericalDelta.phi = 0.0;\n        };\n\n        //\n        // internals\n        //\n\n        const scope = this;\n\n        const STATE = {\n            NONE: - 1,\n            ROTATE: 0,\n            DOLLY: 1,\n            PAN: 2,\n            TOUCH_ROTATE: 3,\n            TOUCH_PAN: 4,\n            TOUCH_DOLLY_PAN: 5,\n            TOUCH_DOLLY_ROTATE: 6\n        };\n\n        let state = STATE.NONE;\n\n        const EPS = 0.000001;\n\n        // current position in spherical coordinates\n        const spherical = new Spherical();\n        const sphericalDelta = new Spherical();\n\n        let scale = 1;\n        const panOffset = new Vector3();\n\n        const rotateStart = new Vector2();\n        const rotateEnd = new Vector2();\n        const rotateDelta = new Vector2();\n\n        const panStart = new Vector2();\n        const panEnd = new Vector2();\n        const panDelta = new Vector2();\n\n        const dollyStart = new Vector2();\n        const dollyEnd = new Vector2();\n        const dollyDelta = new Vector2();\n\n        const dollyDirection = new Vector3();\n        const mouse = new Vector2();\n        let performCursorZoom = false;\n\n        const pointers = [];\n        const pointerPositions = {};\n\n        function getAutoRotationAngle() {\n\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n        }\n\n        function getZoomScale() {\n\n            return Math.pow( 0.95, scope.zoomSpeed );\n\n        }\n\n        function rotateLeft( angle ) {\n\n            sphericalDelta.theta -= angle;\n\n        }\n\n        function rotateUp( angle ) {\n\n            sphericalDelta.phi -= angle;\n\n        }\n\n        const panLeft = function() {\n\n            const v = new Vector3();\n\n            return function panLeft( distance, objectMatrix ) {\n\n                v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n                v.multiplyScalar( - distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        const panUp = function() {\n\n            const v = new Vector3();\n\n            return function panUp( distance, objectMatrix ) {\n\n                if ( scope.screenSpacePanning === true ) {\n\n                    v.setFromMatrixColumn( objectMatrix, 1 );\n\n                } else {\n\n                    v.setFromMatrixColumn( objectMatrix, 0 );\n                    v.crossVectors( scope.object.up, v );\n\n                }\n\n                v.multiplyScalar( distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        // deltaX and deltaY are in pixels; right and down are positive\n        const pan = function() {\n\n            const offset = new Vector3();\n\n            return function pan( deltaX, deltaY ) {\n\n                const element = scope.domElement;\n\n                if ( scope.object.isPerspectiveCamera ) {\n\n                    // perspective\n                    const position = scope.object.position;\n                    offset.copy( position ).sub( scope.target );\n                    let targetDistance = offset.length();\n\n                    // half of the fov is center to top of screen\n                    targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n                    // we use only clientHeight here so aspect ratio does not distort speed\n                    panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n                    panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    // orthographic\n                    panLeft( deltaX * ( scope.object.right - scope.object.left ) /\n                                        scope.object.zoom / element.clientWidth, scope.object.matrix );\n                    panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom /\n                                      element.clientHeight, scope.object.matrix );\n\n                } else {\n\n                    // camera neither orthographic nor perspective\n                    console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n                    scope.enablePan = false;\n\n                }\n\n            };\n\n        }();\n\n        function dollyOut( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale /= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function dollyIn( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale *= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function updateMouseParameters( event ) {\n\n            if ( ! scope.zoomToCursor ) {\n\n                return;\n\n            }\n\n            performCursorZoom = true;\n\n            const rect = scope.domElement.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            const w = rect.width;\n            const h = rect.height;\n\n            mouse.x = ( x / w ) * 2 - 1;\n            mouse.y = - ( y / h ) * 2 + 1;\n\n            dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( object ).sub( object.position ).normalize();\n\n        }\n\n        function clampDistance( dist ) {\n\n            return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );\n\n        }\n\n        //\n        // event callbacks - update the object state\n        //\n\n        function handleMouseDownRotate( event ) {\n\n            rotateStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownDolly( event ) {\n\n            updateMouseParameters( event );\n            dollyStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownPan( event ) {\n\n            panStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseMoveRotate( event ) {\n\n            rotateEnd.set( event.clientX, event.clientY );\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMoveDolly( event ) {\n\n            dollyEnd.set( event.clientX, event.clientY );\n\n            dollyDelta.subVectors( dollyEnd, dollyStart );\n\n            if ( dollyDelta.y > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            } else if ( dollyDelta.y < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            }\n\n            dollyStart.copy( dollyEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMovePan( event ) {\n\n            panEnd.set( event.clientX, event.clientY );\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseWheel( event ) {\n\n            updateMouseParameters( event );\n\n            if ( event.deltaY < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            } else if ( event.deltaY > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            }\n\n            scope.update();\n\n        }\n\n        function handleKeyDown( event ) {\n\n            let needsUpdate = false;\n\n            switch ( event.code ) {\n\n                case scope.keys.UP:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.BOTTOM:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, - scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.LEFT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.RIGHT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( - scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n            }\n\n            if ( needsUpdate ) {\n\n                // prevent the browser from scrolling on cursor keys\n                event.preventDefault();\n\n                scope.update();\n\n            }\n\n\n        }\n\n        function handleTouchStartRotate() {\n\n            if ( pointers.length === 1 ) {\n\n                rotateStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                rotateStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartPan() {\n\n            if ( pointers.length === 1 ) {\n\n                panStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                panStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartDolly() {\n\n            const dx = pointers[0].pageX - pointers[1].pageX;\n            const dy = pointers[0].pageY - pointers[1].pageY;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyStart.set( 0, distance );\n\n        }\n\n        function handleTouchStartDollyPan() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enablePan ) handleTouchStartPan();\n\n        }\n\n        function handleTouchStartDollyRotate() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enableRotate ) handleTouchStartRotate();\n\n        }\n\n        function handleTouchMoveRotate( event ) {\n\n            if ( pointers.length == 1 ) {\n\n                rotateEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                rotateEnd.set( x, y );\n\n            }\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n        }\n\n        function handleTouchMovePan( event ) {\n\n            if ( pointers.length === 1 ) {\n\n                panEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                panEnd.set( x, y );\n\n            }\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n        }\n\n        function handleTouchMoveDolly( event ) {\n\n            const position = getSecondPointerPosition( event );\n\n            const dx = event.pageX - position.x;\n            const dy = event.pageY - position.y;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyEnd.set( 0, distance );\n\n            dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n            dollyOut( dollyDelta.y );\n\n            dollyStart.copy( dollyEnd );\n\n        }\n\n        function handleTouchMoveDollyPan( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enablePan ) handleTouchMovePan( event );\n\n        }\n\n        function handleTouchMoveDollyRotate( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n        }\n\n        //\n        // event handlers - FSM: listen for events and reset state\n        //\n\n        function onPointerDown( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.setPointerCapture( event.pointerId );\n\n                scope.domElement.addEventListener( 'pointermove', onPointerMove );\n                scope.domElement.addEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            //\n\n            addPointer( event );\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchStart( event );\n\n            } else {\n\n                onMouseDown( event );\n\n            }\n\n        }\n\n        function onPointerMove( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchMove( event );\n\n            } else {\n\n                onMouseMove( event );\n\n            }\n\n        }\n\n        function onPointerUp( event ) {\n\n            removePointer( event );\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.releasePointerCapture( event.pointerId );\n\n                scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n                scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            scope.dispatchEvent( _endEvent );\n\n            state = STATE.NONE;\n\n        }\n\n        function onMouseDown( event ) {\n\n            let mouseAction;\n\n            switch ( event.button ) {\n\n                case 0:\n\n                    mouseAction = scope.mouseButtons.LEFT;\n                    break;\n\n                case 1:\n\n                    mouseAction = scope.mouseButtons.MIDDLE;\n                    break;\n\n                case 2:\n\n                    mouseAction = scope.mouseButtons.RIGHT;\n                    break;\n\n                default:\n\n                    mouseAction = - 1;\n\n            }\n\n            switch ( mouseAction ) {\n\n                case MOUSE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseDownDolly( event );\n\n                    state = STATE.DOLLY;\n\n                    break;\n\n                case MOUSE.ROTATE:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    } else {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    }\n\n                    break;\n\n                case MOUSE.PAN:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    } else {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onMouseMove( event ) {\n\n            switch ( state ) {\n\n                case STATE.ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleMouseMoveRotate( event );\n\n                    break;\n\n                case STATE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseMoveDolly( event );\n\n                    break;\n\n                case STATE.PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleMouseMovePan( event );\n\n                    break;\n\n            }\n\n        }\n\n        function onMouseWheel( event ) {\n\n            if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\n\n            event.preventDefault();\n\n            scope.dispatchEvent( _startEvent );\n\n            handleMouseWheel( event );\n\n            scope.dispatchEvent( _endEvent );\n\n        }\n\n        function onKeyDown( event ) {\n\n            if ( scope.enabled === false || scope.enablePan === false ) return;\n\n            handleKeyDown( event );\n\n        }\n\n        function onTouchStart( event ) {\n\n            trackPointer( event );\n\n            switch ( pointers.length ) {\n\n                case 1:\n\n                    switch ( scope.touches.ONE ) {\n\n                        case TOUCH.ROTATE:\n\n                            if ( scope.enableRotate === false ) return;\n\n                            handleTouchStartRotate();\n\n                            state = STATE.TOUCH_ROTATE;\n\n                            break;\n\n                        case TOUCH.PAN:\n\n                            if ( scope.enablePan === false ) return;\n\n                            handleTouchStartPan();\n\n                            state = STATE.TOUCH_PAN;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                case 2:\n\n                    switch ( scope.touches.TWO ) {\n\n                        case TOUCH.DOLLY_PAN:\n\n                            if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                            handleTouchStartDollyPan();\n\n                            state = STATE.TOUCH_DOLLY_PAN;\n\n                            break;\n\n                        case TOUCH.DOLLY_ROTATE:\n\n                            if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                            handleTouchStartDollyRotate();\n\n                            state = STATE.TOUCH_DOLLY_ROTATE;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onTouchMove( event ) {\n\n            trackPointer( event );\n\n            switch ( state ) {\n\n                case STATE.TOUCH_ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleTouchMoveRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleTouchMovePan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_PAN:\n\n                    if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                    handleTouchMoveDollyPan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_ROTATE:\n\n                    if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                    handleTouchMoveDollyRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n        }\n\n        function onContextMenu( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            event.preventDefault();\n\n        }\n\n        function addPointer( event ) {\n\n            pointers.push( event );\n\n        }\n\n        function removePointer( event ) {\n\n            delete pointerPositions[event.pointerId];\n\n            for ( let i = 0; i < pointers.length; i ++ ) {\n\n                if ( pointers[i].pointerId == event.pointerId ) {\n\n                    pointers.splice( i, 1 );\n                    return;\n\n                }\n\n            }\n\n        }\n\n        function trackPointer( event ) {\n\n            let position = pointerPositions[event.pointerId];\n\n            if ( position === undefined ) {\n\n                position = new Vector2();\n                pointerPositions[event.pointerId] = position;\n\n            }\n\n            position.set( event.pageX, event.pageY );\n\n        }\n\n        function getSecondPointerPosition( event ) {\n\n            const pointer = ( event.pointerId === pointers[0].pointerId ) ? pointers[1] : pointers[0];\n\n            return pointerPositions[pointer.pointerId];\n\n        }\n\n        //\n\n        scope.domElement.addEventListener( 'contextmenu', onContextMenu );\n\n        scope.domElement.addEventListener( 'pointerdown', onPointerDown );\n        scope.domElement.addEventListener( 'pointercancel', onPointerUp );\n        scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\n\n        // force an update at start\n\n        this.update();\n\n    }\n\n}\n\nexport { OrbitControls };\n","export const fadeElement = (element, out, displayStyle, duration, onComplete) => {\n    const startTime = performance.now();\n\n    let startOpacity = element.style.display === 'none' ? 0 : parseFloat(element.style.opacity);\n    if (isNaN(startOpacity)) startOpacity = 1;\n\n    const interval = window.setInterval(() => {\n        const currentTime = performance.now();\n        const elapsed = currentTime - startTime;\n\n        let t = Math.min(elapsed / duration, 1.0);\n        if (t > 0.999) t = 1;\n\n        let opacity;\n        if (out) {\n            opacity = (1.0 - t) * startOpacity;\n            if (opacity < 0.0001) opacity = 0;\n        } else {\n            opacity = (1.0 - startOpacity) * t + startOpacity;\n        }\n\n        if (opacity > 0) {\n            element.style.display = displayStyle;\n            element.style.opacity = opacity;\n        } else {\n            element.style.display = 'none';\n        }\n\n        if (t >= 1) {\n            if (onComplete) onComplete();\n            window.clearInterval(interval);\n        }\n    }, 16);\n    return interval;\n};\n\nexport const cancelFade = (interval) => {\n    window.clearInterval(interval);\n};\n","import { fadeElement } from './Util.js';\n\nconst STANDARD_FADE_DURATION = 500;\n\nexport class LoadingSpinner {\n\n    static elementIDGen = 0;\n\n    constructor(message, container) {\n\n        this.taskIDGen = 0;\n        this.elementID = LoadingSpinner.elementIDGen++;\n\n        this.tasks = [];\n\n        this.message = message || 'Loading...';\n        this.container = container || document.body;\n\n        this.spinnerContainerOuter = document.createElement('div');\n        this.spinnerContainerOuter.className = `spinnerOuterContainer${this.elementID}`;\n        this.spinnerContainerOuter.style.display = 'none';\n\n        this.spinnerContainerPrimary = document.createElement('div');\n        this.spinnerContainerPrimary.className = `spinnerContainerPrimary${this.elementID}`;\n        this.spinnerPrimary = document.createElement('div');\n        this.spinnerPrimary.classList.add(`spinner${this.elementID}`, `spinnerPrimary${this.elementID}`);\n        this.messageContainerPrimary = document.createElement('div');\n        this.messageContainerPrimary.classList.add(`messageContainer${this.elementID}`, `messageContainerPrimary${this.elementID}`);\n        this.messageContainerPrimary.innerHTML = this.message;\n\n        this.spinnerContainerMin = document.createElement('div');\n        this.spinnerContainerMin.className = `spinnerContainerMin${this.elementID}`;\n        this.spinnerMin = document.createElement('div');\n        this.spinnerMin.classList.add(`spinner${this.elementID}`, `spinnerMin${this.elementID}`);\n        this.messageContainerMin = document.createElement('div');\n        this.messageContainerMin.classList.add(`messageContainer${this.elementID}`, `messageContainerMin${this.elementID}`);\n        this.messageContainerMin.innerHTML = this.message;\n\n        this.spinnerContainerPrimary.appendChild(this.spinnerPrimary);\n        this.spinnerContainerPrimary.appendChild(this.messageContainerPrimary);\n        this.spinnerContainerOuter.appendChild(this.spinnerContainerPrimary);\n\n        this.spinnerContainerMin.appendChild(this.spinnerMin);\n        this.spinnerContainerMin.appendChild(this.messageContainerMin);\n        this.spinnerContainerOuter.appendChild(this.spinnerContainerMin);\n\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .spinnerOuterContainer${this.elementID} {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .messageContainer${this.elementID} {\n                height: 20px;\n                font-family: arial;\n                font-size: 12pt;\n                color: #ffffff;\n                text-align: center;\n                vertical-align: middle;\n            }\n\n            .spinner${this.elementID} {\n                padding: 15px;\n                background: #07e8d6;\n                z-index:99999;\n            \n                aspect-ratio: 1;\n                border-radius: 50%;\n                --_m: \n                    conic-gradient(#0000,#000),\n                    linear-gradient(#000 0 0) content-box;\n                -webkit-mask: var(--_m);\n                    mask: var(--_m);\n                -webkit-mask-composite: source-out;\n                    mask-composite: subtract;\n                box-sizing: border-box;\n                animation: load 1s linear infinite;\n            }\n\n            .spinnerContainerPrimary${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 10px;\n                margin: 0;\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-80px, -80px);\n                width: 180px;\n                pointer-events: auto;\n            }\n\n            .spinnerPrimary${this.elementID} {\n                width: 120px;\n                margin-left: 30px;\n            }\n\n            .messageContainerPrimary${this.elementID} {\n                padding-top: 15px;\n            }\n\n            .spinnerContainerMin${this.elementID} {\n                z-index:99999;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #666666 1px solid;\n                border-radius: 5px;\n                padding-top: 20px;\n                padding-bottom: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                display: flex;\n                flex-direction: left;\n                pointer-events: auto;\n                min-width: 250px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                margin-right: 15px;\n            }\n\n            .spinnerMin${this.elementID} {\n                width: 50px;\n                height: 50px;\n                margin-left: 15px;\n                margin-right: 25px;\n            }\n\n            .messageContainerMin${this.elementID} {\n                padding-top: 15px;\n            }\n            \n            @keyframes load {\n                to{transform: rotate(1turn)}\n            }\n\n        `;\n        this.spinnerContainerOuter.appendChild(style);\n        this.container.appendChild(this.spinnerContainerOuter);\n\n        this.setMinimized(false, true);\n\n        this.fadeTransitions = [];\n    }\n\n    addTask(message) {\n        const newTask = {\n            'message': message,\n            'id': this.taskIDGen++\n        };\n        this.tasks.push(newTask);\n        this.update();\n        return newTask.id;\n    }\n\n    removeTask(id) {\n        let index = 0;\n        for (let task of this.tasks) {\n            if (task.id === id) {\n                this.tasks.splice(index, 1);\n                break;\n            }\n            index++;\n        }\n        this.update();\n    }\n\n    removeAllTasks() {\n        this.tasks = [];\n        this.update();\n    }\n\n    setMessageForTask(id, message) {\n        for (let task of this.tasks) {\n            if (task.id === id) {\n                task.message = message;\n                break;\n            }\n        }\n        this.update();\n    }\n\n    update() {\n        if (this.tasks.length > 0) {\n            this.show();\n            this.setMessage(this.tasks[this.tasks.length - 1].message);\n        } else {\n            this.hide();\n        }\n    }\n\n    show() {\n        this.spinnerContainerOuter.style.display = 'block';\n        this.visible = true;\n    }\n\n    hide() {\n        this.spinnerContainerOuter.style.display = 'none';\n        this.visible = false;\n    }\n\n    setContainer(container) {\n        if (this.container) {\n            this.container.removeChild(this.spinnerContainerOuter);\n        }\n        if (container) {\n            this.container = container;\n            this.container.appendChild(this.spinnerContainerOuter);\n            this.spinnerContainerOuter.style.zIndex = this.container.style.zIndex + 1;\n        }\n    }\n\n    setMinimized(minimized, instant) {\n        const showHideSpinner = (element, show, instant, displayStyle, fadeTransitionsIndex) => {\n            if (instant) {\n                element.style.display = show ? displayStyle : 'none';\n            } else {\n                this.fadeTransitions[fadeTransitionsIndex] = fadeElement(element, !show, displayStyle, STANDARD_FADE_DURATION, () => {\n                    this.fadeTransitions[fadeTransitionsIndex] = null;\n                });\n            }\n        };\n        showHideSpinner(this.spinnerContainerPrimary, !minimized, instant, 'block', 0);\n        showHideSpinner(this.spinnerContainerMin, minimized, instant, 'flex', 1);\n        this.minimized = minimized;\n    }\n\n    setMessage(msg) {\n        this.messageContainerPrimary.innerHTML = msg;\n        this.messageContainerMin.innerHTML = msg;\n    }\n}\n","export class LoadingProgressBar {\n\n    constructor(container) {\n\n        this.idGen = 0;\n\n        this.tasks = [];\n\n        this.container = container || document.body;\n\n        this.progressBarContainerOuter = document.createElement('div');\n        this.progressBarContainerOuter.className = 'progressBarOuterContainer';\n        this.progressBarContainerOuter.style.display = 'none';\n\n        this.progressBarBox = document.createElement('div');\n        this.progressBarBox.className = 'progressBarBox';\n\n        this.progressBarBackground = document.createElement('div');\n        this.progressBarBackground.className = 'progressBarBackground';\n\n        this.progressBar = document.createElement('div');\n        this.progressBar.className = 'progressBar';\n\n        this.progressBarBackground.appendChild(this.progressBar);\n        this.progressBarBox.appendChild(this.progressBarBackground);\n        this.progressBarContainerOuter.appendChild(this.progressBarBox);\n\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .progressBarOuterContainer {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                top: 0;\n                left: 0;\n                position: absolute;\n                pointer-events: none;\n            }\n\n            .progressBarBox {\n                z-index:99999;\n                padding: 7px 9px 5px 7px;\n                background-color: rgba(190, 190, 190, 0.75);\n                border: #555555 1px solid;\n                border-radius: 15px;\n                margin: 0;\n                position: absolute;\n                bottom: 50px;\n                left: 50%;\n                transform: translate(-50%, 0);\n                width: 180px;\n                height: 30px;\n                pointer-events: auto;\n            }\n\n            .progressBarBackground {\n                width: 100%;\n                height: 25px;\n                border-radius:10px;\n                background-color: rgba(128, 128, 128, 0.75);\n                border: #444444 1px solid;\n                box-shadow: inset 0 0 10px #333333;\n            }\n\n            .progressBar {\n                height: 25px;\n                width: 0px;\n                border-radius:10px;\n                background-color: rgba(0, 200, 0, 0.75);\n                box-shadow: inset 0 0 10px #003300;\n            }\n\n        `;\n        this.progressBarContainerOuter.appendChild(style);\n        this.container.appendChild(this.progressBarContainerOuter);\n    }\n\n    show() {\n        this.progressBarContainerOuter.style.display = 'block';\n    }\n\n    hide() {\n        this.progressBarContainerOuter.style.display = 'none';\n    }\n\n    setProgress(progress) {\n        this.progressBar.style.width = progress + '%';\n    }\n\n    setContainer(container) {\n        if (this.container) {\n            this.container.removeChild(this.progressBarContainerOuter);\n        }\n        if (container) {\n            this.container = container;\n            this.container.appendChild(this.progressBarContainerOuter);\n            this.progressBarContainerOuter.style.zIndex = this.container.style.zIndex + 1;\n        }\n    }\n\n}\n","export class InfoPanel {\n\n    constructor(container) {\n\n        this.container = container || document.body;\n\n        this.infoCells = {};\n\n        const layout = [\n            ['Camera position', 'cameraPosition'],\n            ['Camera look-at', 'cameraLookAt'],\n            ['Camera up', 'cameraUp'],\n            ['Camera mode', 'orthographicCamera'],\n            ['Cursor position', 'cursorPosition'],\n            ['FPS', 'fps'],\n            ['Rendering:', 'renderSplatCount'],\n            ['Sort time', 'sortTime'],\n            ['Render window', 'renderWindow'],\n            ['Focal adjustment', 'focalAdjustment'],\n            ['Splat scale', 'splatScale'],\n            ['Point cloud mode', 'pointCloudMode']\n        ];\n\n        this.infoPanelContainer = document.createElement('div');\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .infoPanel {\n                width: 430px;\n                padding: 10px;\n                background-color: rgba(50, 50, 50, 0.85);\n                border: #555555 2px solid;\n                color: #dddddd;\n                border-radius: 10px;\n                z-index: 9999;\n                font-family: arial;\n                font-size: 11pt;\n                text-align: left;\n                margin: 0;\n                top: 10px;\n                left:10px;\n                position: absolute;\n                pointer-events: auto;\n            }\n\n            .info-panel-cell {\n                margin-bottom: 5px;\n                padding-bottom: 2px;\n            }\n\n            .label-cell {\n                font-weight: bold;\n                font-size: 12pt;\n                width: 140px;\n            }\n\n        `;\n        this.infoPanelContainer.append(style);\n\n        this.infoPanel = document.createElement('div');\n        this.infoPanel.className = 'infoPanel';\n\n        const infoTable = document.createElement('div');\n        infoTable.style.display = 'table';\n\n        for (let layoutEntry of layout) {\n            const row = document.createElement('div');\n            row.style.display = 'table-row';\n            row.className = 'info-panel-row';\n\n            const labelCell = document.createElement('div');\n            labelCell.style.display = 'table-cell';\n            labelCell.innerHTML = `${layoutEntry[0]}: `;\n            labelCell.classList.add('info-panel-cell', 'label-cell');\n\n            const spacerCell = document.createElement('div');\n            spacerCell.style.display = 'table-cell';\n            spacerCell.style.width = '10px';\n            spacerCell.innerHTML = ' ';\n            spacerCell.className = 'info-panel-cell';\n\n            const infoCell = document.createElement('div');\n            infoCell.style.display = 'table-cell';\n            infoCell.innerHTML = '';\n            infoCell.className = 'info-panel-cell';\n\n            this.infoCells[layoutEntry[1]] = infoCell;\n\n            row.appendChild(labelCell);\n            row.appendChild(spacerCell);\n            row.appendChild(infoCell);\n\n            infoTable.appendChild(row);\n        }\n\n        this.infoPanel.appendChild(infoTable);\n        this.infoPanelContainer.append(this.infoPanel);\n        this.infoPanelContainer.style.display = 'none';\n        this.container.appendChild(this.infoPanelContainer);\n\n        this.visible = false;\n    }\n\n    update = function(renderDimensions, cameraPosition, cameraLookAtPosition, cameraUp, orthographicCamera,\n                      meshCursorPosition, currentFPS, splatCount, splatRenderCount,\n                      splatRenderCountPct, lastSortTime, focalAdjustment, splatScale, pointCloudMode) {\n\n        const cameraPosString = `${cameraPosition.x.toFixed(5)}, ${cameraPosition.y.toFixed(5)}, ${cameraPosition.z.toFixed(5)}`;\n        if (this.infoCells.cameraPosition.innerHTML !== cameraPosString) {\n            this.infoCells.cameraPosition.innerHTML = cameraPosString;\n        }\n\n        if (cameraLookAtPosition) {\n            const cla = cameraLookAtPosition;\n            const cameraLookAtString = `${cla.x.toFixed(5)}, ${cla.y.toFixed(5)}, ${cla.z.toFixed(5)}`;\n            if (this.infoCells.cameraLookAt.innerHTML !== cameraLookAtString) {\n                this.infoCells.cameraLookAt.innerHTML = cameraLookAtString;\n            }\n        }\n\n        const cameraUpString = `${cameraUp.x.toFixed(5)}, ${cameraUp.y.toFixed(5)}, ${cameraUp.z.toFixed(5)}`;\n        if (this.infoCells.cameraUp.innerHTML !== cameraUpString) {\n            this.infoCells.cameraUp.innerHTML = cameraUpString;\n        }\n\n        this.infoCells.orthographicCamera.innerHTML = orthographicCamera ? 'Orthographic' : 'Perspective';\n\n        if (meshCursorPosition) {\n            const cursPos = meshCursorPosition;\n            const cursorPosString = `${cursPos.x.toFixed(5)}, ${cursPos.y.toFixed(5)}, ${cursPos.z.toFixed(5)}`;\n            this.infoCells.cursorPosition.innerHTML = cursorPosString;\n        } else {\n            this.infoCells.cursorPosition.innerHTML = 'N/A';\n        }\n\n        this.infoCells.fps.innerHTML = currentFPS;\n        this.infoCells.renderWindow.innerHTML = `${renderDimensions.x} x ${renderDimensions.y}`;\n\n        this.infoCells.renderSplatCount.innerHTML =\n            `${splatRenderCount} splats out of ${splatCount} (${splatRenderCountPct.toFixed(2)}%)`;\n\n        this.infoCells.sortTime.innerHTML = `${lastSortTime.toFixed(3)} ms`;\n        this.infoCells.focalAdjustment.innerHTML = `${focalAdjustment.toFixed(3)}`;\n        this.infoCells.splatScale.innerHTML = `${splatScale.toFixed(3)}`;\n        this.infoCells.pointCloudMode.innerHTML = `${pointCloudMode}`;\n    };\n\n    setContainer(container) {\n        if (this.container) {\n            this.container.removeChild(this.infoPanelContainer);\n        }\n        if (container) {\n            this.container = container;\n            this.container.appendChild(this.infoPanelContainer);\n            this.infoPanelContainer.style.zIndex = this.container.style.zIndex + 1;\n        }\n    }\n\n    show() {\n        this.infoPanelContainer.style.display = 'block';\n        this.visible = true;\n    }\n\n    hide() {\n        this.infoPanelContainer.style.display = 'none';\n        this.visible = false;\n    }\n\n}\n","import * as THREE from 'three';\n\nexport class ArrowHelper extends THREE.Object3D {\n\n    constructor(dir = new THREE.Vector3(0, 0, 1), origin = new THREE.Vector3(0, 0, 0), length = 1,\n                radius = 0.1, color = 0xffff00, headLength = length * 0.2, headRadius = headLength * 0.2) {\n        super();\n\n        this.type = 'ArrowHelper';\n\n        const lineGeometry = new THREE.CylinderGeometry(radius, radius, length, 32);\n        lineGeometry.translate(0, length / 2.0, 0);\n        const coneGeometry = new THREE.CylinderGeometry( 0, headRadius, headLength, 32);\n        coneGeometry.translate(0, length, 0);\n\n        this.position.copy( origin );\n\n        this.line = new THREE.Mesh(lineGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\n        this.line.matrixAutoUpdate = false;\n        this.add(this.line);\n\n        this.cone = new THREE.Mesh(coneGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\n        this.cone.matrixAutoUpdate = false;\n        this.add(this.cone);\n\n        this.setDirection(dir);\n    }\n\n    setDirection( dir ) {\n        if (dir.y > 0.99999) {\n            this.quaternion.set(0, 0, 0, 1);\n        } else if (dir.y < - 0.99999) {\n            this.quaternion.set(1, 0, 0, 0);\n        } else {\n            _axis.set(dir.z, 0, -dir.x).normalize();\n            const radians = Math.acos(dir.y);\n            this.quaternion.setFromAxisAngle(_axis, radians);\n        }\n    }\n\n    setColor( color ) {\n        this.line.material.color.set(color);\n        this.cone.material.color.set(color);\n    }\n\n    copy(source) {\n        super.copy(source, false);\n        this.line.copy(source.line);\n        this.cone.copy(source.cone);\n        return this;\n    }\n\n    dispose() {\n        this.line.geometry.dispose();\n        this.line.material.dispose();\n        this.cone.geometry.dispose();\n        this.cone.material.dispose();\n    }\n\n}\n","import * as THREE from 'three';\nimport { ArrowHelper } from './ArrowHelper.js';\nimport { disposeAllMeshes } from './Util.js';\n\nexport class SceneHelper {\n\n    constructor(threeScene) {\n        this.threeScene = threeScene;\n        this.splatRenderTarget = null;\n        this.renderTargetCopyQuad = null;\n        this.renderTargetCopyCamera = null;\n        this.meshCursor = null;\n        this.focusMarker = null;\n        this.controlPlane = null;\n        this.debugRoot = null;\n        this.secondaryDebugRoot = null;\n    }\n\n    updateSplatRenderTargetForRenderDimensions(width, height) {\n        this.destroySplatRendertarget();\n        this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\n            format: THREE.RGBAFormat,\n            stencilBuffer: false,\n            depthBuffer: true,\n\n        });\n        this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\n        this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\n        this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\n    }\n\n    destroySplatRendertarget() {\n        if (this.splatRenderTarget) {\n            this.splatRenderTarget = null;\n        }\n    }\n\n    setupRenderTargetCopyObjects() {\n        const uniforms = {\n            'sourceColorTexture': {\n                'type': 't',\n                'value': null\n            },\n            'sourceDepthTexture': {\n                'type': 't',\n                'value': null\n            },\n        };\n        const renderTargetCopyMaterial = new THREE.ShaderMaterial({\n            vertexShader: `\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \n                }\n            `,\n            fragmentShader: `\n                #include <common>\n                #include <packing>\n                varying vec2 vUv;\n                uniform sampler2D sourceColorTexture;\n                uniform sampler2D sourceDepthTexture;\n                void main() {\n                    vec4 color = texture2D(sourceColorTexture, vUv);\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\n                    gl_FragDepth = fragDepth;\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\n              }\n            `,\n            uniforms: uniforms,\n            depthWrite: false,\n            depthTest: false,\n            transparent: true,\n            blending: THREE.CustomBlending,\n            blendSrc: THREE.SrcAlphaFactor,\n            blendSrcAlpha: THREE.SrcAlphaFactor,\n            blendDst: THREE.OneMinusSrcAlphaFactor,\n            blendDstAlpha: THREE.OneMinusSrcAlphaFactor\n        });\n        renderTargetCopyMaterial.extensions.fragDepth = true;\n        this.renderTargetCopyQuad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), renderTargetCopyMaterial);\n        this.renderTargetCopyCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    }\n\n    destroyRenderTargetCopyObjects() {\n        if (this.renderTargetCopyQuad) {\n            disposeAllMeshes(this.renderTargetCopyQuad);\n            this.renderTargetCopyQuad = null;\n        }\n    }\n\n    setupMeshCursor() {\n        if (!this.meshCursor) {\n            const coneGeometry = new THREE.ConeGeometry(0.5, 1.5, 32);\n            const coneMaterial = new THREE.MeshBasicMaterial({color: 0xFFFFFF});\n\n            const downArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            downArrow.rotation.set(0, 0, Math.PI);\n            downArrow.position.set(0, 1, 0);\n            const upArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            upArrow.position.set(0, -1, 0);\n            const leftArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            leftArrow.rotation.set(0, 0, Math.PI / 2.0);\n            leftArrow.position.set(1, 0, 0);\n            const rightArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            rightArrow.rotation.set(0, 0, -Math.PI / 2.0);\n            rightArrow.position.set(-1, 0, 0);\n\n            this.meshCursor = new THREE.Object3D();\n            this.meshCursor.add(downArrow);\n            this.meshCursor.add(upArrow);\n            this.meshCursor.add(leftArrow);\n            this.meshCursor.add(rightArrow);\n            this.meshCursor.scale.set(0.1, 0.1, 0.1);\n            this.threeScene.add(this.meshCursor);\n            this.meshCursor.visible = false;\n        }\n    }\n\n    destroyMeshCursor() {\n        if (this.meshCursor) {\n            disposeAllMeshes(this.meshCursor);\n            this.threeScene.remove(this.meshCursor);\n            this.meshCursor = null;\n        }\n    }\n\n    setMeshCursorVisibility(visible) {\n        this.meshCursor.visible = visible;\n    }\n\n    getMeschCursorVisibility() {\n        return this.meshCursor.visible;\n    }\n\n    setMeshCursorPosition(position) {\n        this.meshCursor.position.copy(position);\n    }\n\n    positionAndOrientMeshCursor(position, camera) {\n        this.meshCursor.position.copy(position);\n        this.meshCursor.up.copy(camera.up);\n        this.meshCursor.lookAt(camera.position);\n    }\n\n    setupFocusMarker() {\n        if (!this.focusMarker) {\n            const sphereGeometry = new THREE.SphereGeometry(.5, 32, 32);\n            const focusMarkerMaterial = SceneHelper.buildFocusMarkerMaterial();\n            focusMarkerMaterial.depthTest = false;\n            focusMarkerMaterial.depthWrite = false;\n            focusMarkerMaterial.transparent = true;\n            this.focusMarker = new THREE.Mesh(sphereGeometry, focusMarkerMaterial);\n        }\n    }\n\n    destroyFocusMarker() {\n        if (this.focusMarker) {\n            disposeAllMeshes(this.focusMarker);\n            this.focusMarker = null;\n        }\n    }\n\n    updateFocusMarker = function() {\n\n        const tempPosition = new THREE.Vector3();\n        const tempMatrix = new THREE.Matrix4();\n        const toCamera = new THREE.Vector3();\n\n        return function(position, camera, viewport) {\n            tempMatrix.copy(camera.matrixWorld).invert();\n            tempPosition.copy(position).applyMatrix4(tempMatrix);\n            tempPosition.normalize().multiplyScalar(10);\n            tempPosition.applyMatrix4(camera.matrixWorld);\n            toCamera.copy(camera.position).sub(position);\n            const toCameraDistance = toCamera.length();\n            this.focusMarker.position.copy(position);\n            this.focusMarker.scale.set(toCameraDistance, toCameraDistance, toCameraDistance);\n            this.focusMarker.material.uniforms.realFocusPosition.value.copy(position);\n            this.focusMarker.material.uniforms.viewport.value.copy(viewport);\n            this.focusMarker.material.uniformsNeedUpdate = true;\n        };\n\n    }();\n\n    setFocusMarkerVisibility(visible) {\n        this.focusMarker.visible = visible;\n    }\n\n    setFocusMarkerOpacity(opacity) {\n        this.focusMarker.material.uniforms.opacity.value = opacity;\n        this.focusMarker.material.uniformsNeedUpdate = true;\n    }\n\n    getFocusMarkerOpacity() {\n        return this.focusMarker.material.uniforms.opacity.value;\n    }\n\n    setupControlPlane() {\n        if (!this.controlPlane) {\n            const planeGeometry = new THREE.PlaneGeometry(1, 1);\n            planeGeometry.rotateX(-Math.PI / 2);\n            const planeMaterial = new THREE.MeshBasicMaterial({color: 0xffffff});\n            planeMaterial.transparent = true;\n            planeMaterial.opacity = 0.6;\n            planeMaterial.depthTest = false;\n            planeMaterial.depthWrite = false;\n            planeMaterial.side = THREE.DoubleSide;\n            const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\n\n            const arrowDir = new THREE.Vector3(0, 1, 0);\n            arrowDir.normalize();\n            const arrowOrigin = new THREE.Vector3(0, 0, 0);\n            const arrowLength = 0.5;\n            const arrowRadius = 0.01;\n            const arrowColor = 0x00dd00;\n            const arrowHelper = new ArrowHelper(arrowDir, arrowOrigin, arrowLength, arrowRadius, arrowColor, 0.1, 0.03);\n\n            this.controlPlane = new THREE.Object3D();\n            this.controlPlane.add(planeMesh);\n            this.controlPlane.add(arrowHelper);\n        }\n    }\n\n    destroyControlPlane() {\n        if (this.controlPlane) {\n            disposeAllMeshes(this.controlPlane);\n            this.controlPlane = null;\n        }\n    }\n\n    setControlPlaneVisibility(visible) {\n        this.controlPlane.visible = visible;\n    }\n\n    positionAndOrientControlPlane = function() {\n\n        const tempQuaternion = new THREE.Quaternion();\n        const defaultUp = new THREE.Vector3(0, 1, 0);\n\n        return function(position, up) {\n            tempQuaternion.setFromUnitVectors(defaultUp, up);\n            this.controlPlane.position.copy(position);\n            this.controlPlane.quaternion.copy(tempQuaternion);\n        };\n\n    }();\n\n    addDebugMeshes() {\n        this.debugRoot = this.createDebugMeshes();\n        this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\n        this.threeScene.add(this.debugRoot);\n        this.threeScene.add(this.secondaryDebugRoot);\n    }\n\n    destroyDebugMeshes() {\n        for (let debugRoot of [this.debugRoot, this.secondaryDebugRoot]) {\n            if (debugRoot) {\n                disposeAllMeshes(debugRoot);\n                this.threeScene.remove(debugRoot);\n            }\n        }\n        this.debugRoot = null;\n        this.secondaryDebugRoot = null;\n    }\n\n    createDebugMeshes(renderOrder) {\n        const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n        const debugMeshRoot = new THREE.Object3D();\n\n        const createMesh = (color, position) => {\n            let sphereMesh = new THREE.Mesh(sphereGeometry, SceneHelper.buildDebugMaterial(color));\n            sphereMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(sphereMesh);\n            sphereMesh.position.fromArray(position);\n        };\n\n        createMesh(0xff0000, [-50, 0, 0]);\n        createMesh(0xff0000, [50, 0, 0]);\n        createMesh(0x00ff00, [0, 0, -50]);\n        createMesh(0x00ff00, [0, 0, 50]);\n        createMesh(0xffaa00, [5, 0, 5]);\n\n        return debugMeshRoot;\n    }\n\n    createSecondaryDebugMeshes(renderOrder) {\n        const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\n        const debugMeshRoot = new THREE.Object3D();\n\n        let boxColor = 0xBBBBBB;\n        const createMesh = (position) => {\n            let boxMesh = new THREE.Mesh(boxGeometry, SceneHelper.buildDebugMaterial(boxColor));\n            boxMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(boxMesh);\n            boxMesh.position.fromArray(position);\n        };\n\n        let separation = 10;\n        createMesh([-separation, 0, -separation]);\n        createMesh([-separation, 0, separation]);\n        createMesh([separation, 0, -separation]);\n        createMesh([separation, 0, separation]);\n\n        return debugMeshRoot;\n    }\n\n    static buildDebugMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n            varying float ndcDepth;\n\n            void main() {\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\n                ndcDepth = gl_Position.z / gl_Position.w;\n                gl_Position.x = gl_Position.x / gl_Position.w;\n                gl_Position.y = gl_Position.y / gl_Position.w;\n                gl_Position.z = 0.0;\n                gl_Position.w = 1.0;\n    \n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            varying float ndcDepth;\n            void main() {\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\n                gl_FragColor = vec4(color.rgb, 0.0);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: false,\n            depthTest: true,\n            depthWrite: true,\n            side: THREE.FrontSide\n        });\n        material.extensions.fragDepth = true;\n\n        return material;\n    }\n\n    static buildFocusMarkerMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n\n            uniform vec2 viewport;\n            uniform vec3 realFocusPosition;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                float radius = 0.01;\n\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\n\n                ndcPosition = projectionMatrix * viewPosition;\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\n                ndcCenter = projectionMatrix * viewCenter;\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\n\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\n\n                gl_Position = projectionMatrix * viewPosition;\n\n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            uniform vec2 viewport;\n            uniform float opacity;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\n\n                vec2 screenVec = screenPosition - screenCenter;\n\n                float projectedRadius = length(screenVec);\n\n                float lineWidth = 0.0005 * viewport.y;\n                float aaRange = 0.0025 * viewport.y;\n                float radius = 0.06 * viewport.y;\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \n\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n            'realFocusPosition': {\n                'type': 'v3',\n                'value': new THREE.Vector3()\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'opacity': {\n                'value': 0.0\n            }\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            depthTest: false,\n            depthWrite: false,\n            side: THREE.FrontSide\n        });\n\n        return material;\n    }\n\n    dispose() {\n        this.destroyMeshCursor();\n        this.destroyFocusMarker();\n        this.destroyDebugMeshes();\n        this.destroyControlPlane();\n        this.destroyRenderTargetCopyObjects();\n        this.destroySplatRendertarget();\n    }\n}\n","import * as THREE from 'three';\n\nconst VectorRight = new THREE.Vector3(1, 0, 0);\nconst VectorUp = new THREE.Vector3(0, 1, 0);\nconst VectorBackward = new THREE.Vector3(0, 0, 1);\n\nexport class Ray {\n\n    constructor(origin = new THREE.Vector3(), direction = new THREE.Vector3()) {\n        this.origin = new THREE.Vector3();\n        this.direction = new THREE.Vector3();\n        this.setParameters(origin, direction);\n    }\n\n    setParameters(origin, direction) {\n        this.origin.copy(origin);\n        this.direction.copy(direction).normalize();\n    }\n\n    boxContainsPoint(box, point, epsilon) {\n        return point.x < box.min.x - epsilon || point.x > box.max.x + epsilon ||\n               point.y < box.min.y - epsilon || point.y > box.max.y + epsilon ||\n               point.z < box.min.z - epsilon || point.z > box.max.z + epsilon ? false : true;\n    }\n\n    intersectBox = function() {\n\n        const planeIntersectionPoint = new THREE.Vector3();\n        const planeIntersectionPointArray = [];\n        const originArray = [];\n        const directionArray = [];\n\n        return function(box, outHit) {\n\n            originArray[0] = this.origin.x;\n            originArray[1] = this.origin.y;\n            originArray[2] = this.origin.z;\n            directionArray[0] = this.direction.x;\n            directionArray[1] = this.direction.y;\n            directionArray[2] = this.direction.z;\n\n            if (this.boxContainsPoint(box, this.origin, 0.0001)) {\n                if (outHit) {\n                    outHit.origin.copy(this.origin);\n                    outHit.normal.set(0, 0, 0);\n                    outHit.distance = -1;\n                }\n                return true;\n            }\n\n            for (let i = 0; i < 3; i++) {\n                if (directionArray[i] == 0.0) continue;\n\n                const hitNormal = i == 0 ? VectorRight : i == 1 ? VectorUp : VectorBackward;\n                const extremeVec = directionArray[i] < 0 ? box.max : box.min;\n                let multiplier = -Math.sign(directionArray[i]);\n                planeIntersectionPointArray[0] = i == 0 ? extremeVec.x : i == 1 ? extremeVec.y : extremeVec.z;\n                let toSide = planeIntersectionPointArray[0] - originArray[i];\n\n                if (toSide * multiplier < 0) {\n                    const idx1 = (i + 1) % 3;\n                    const idx2 = (i + 2) % 3;\n                    planeIntersectionPointArray[2] = directionArray[idx1] / directionArray[i] * toSide + originArray[idx1];\n                    planeIntersectionPointArray[1] = directionArray[idx2] / directionArray[i] * toSide + originArray[idx2];\n                    planeIntersectionPoint.set(planeIntersectionPointArray[i],\n                                               planeIntersectionPointArray[idx2],\n                                               planeIntersectionPointArray[idx1]);\n                    if (this.boxContainsPoint(box, planeIntersectionPoint, 0.0001)) {\n                        if (outHit) {\n                            outHit.origin.copy(planeIntersectionPoint);\n                            outHit.normal.copy(hitNormal).multiplyScalar(multiplier);\n                            outHit.distance = planeIntersectionPoint.sub(this.origin).length();\n                        }\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        };\n\n    }();\n\n    intersectSphere = function() {\n\n        const toSphereCenterVec = new THREE.Vector3();\n\n        return function(center, radius, outHit) {\n            toSphereCenterVec.copy(center).sub(this.origin);\n            const toClosestApproach = toSphereCenterVec.dot(this.direction);\n            const toClosestApproachSq = toClosestApproach * toClosestApproach;\n            const toSphereCenterSq = toSphereCenterVec.dot(toSphereCenterVec);\n            const diffSq = toSphereCenterSq - toClosestApproachSq;\n            const radiusSq = radius * radius;\n\n            if (diffSq > radiusSq) return false;\n\n            const thc = Math.sqrt(radiusSq - diffSq);\n            const t0 = toClosestApproach - thc;\n            const t1 = toClosestApproach + thc;\n\n            if (t1 < 0) return false;\n            let t = t0 < 0 ? t1 : t0;\n\n            if (outHit) {\n                outHit.origin.copy(this.origin).addScaledVector(this.direction, t);\n                outHit.normal.copy(outHit.origin).sub(center).normalize();\n                outHit.distance = t;\n            }\n            return true;\n        };\n\n    }();\n}\n","import * as THREE from 'three';\n\nexport class Hit {\n\n    constructor() {\n        this.origin = new THREE.Vector3();\n        this.normal = new THREE.Vector3();\n        this.distance = 0;\n        this.splatIndex = 0;\n    }\n\n    set(origin, normal, distance, splatIndex) {\n        this.origin.copy(origin);\n        this.normal.copy(normal);\n        this.distance = distance;\n        this.splatIndex = splatIndex;\n    }\n\n    clone() {\n        const hitClone = new Hit();\n        hitClone.origin.copy(this.origin);\n        hitClone.normal.copy(this.normal);\n        hitClone.distance = this.distance;\n        hitClone.splatIndex = this.splatIndex;\n        return hitClone;\n    }\n\n}\n","import * as THREE from 'three';\nimport { Ray } from './Ray.js';\nimport { Hit } from './Hit.js';\n\nexport class Raycaster {\n\n    constructor(origin, direction, raycastAgainstTrueSplatEllipsoid = false) {\n        this.ray = new Ray(origin, direction);\n        this.raycastAgainstTrueSplatEllipsoid = raycastAgainstTrueSplatEllipsoid;\n    }\n\n    setFromCameraAndScreenPosition = function() {\n\n        const ndcCoords = new THREE.Vector2();\n\n        return function(camera, screenPosition, screenDimensions) {\n            ndcCoords.x = screenPosition.x / screenDimensions.x * 2.0 - 1.0;\n            ndcCoords.y = (screenDimensions.y - screenPosition.y) / screenDimensions.y * 2.0 - 1.0;\n            if (camera.isPerspectiveCamera) {\n                this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n                this.ray.direction.set(ndcCoords.x, ndcCoords.y, 0.5 ).unproject(camera).sub(this.ray.origin).normalize();\n                this.camera = camera;\n            } else if (camera.isOrthographicCamera) {\n                this.ray.origin.set(ndcCoords.x, ndcCoords.y,\n                                   (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);\n                this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n                this.camera = camera;\n            } else {\n                throw new Error('Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type');\n            }\n        };\n\n    }();\n\n    intersectSplatMesh = function() {\n\n        const toLocal = new THREE.Matrix4();\n        const fromLocal = new THREE.Matrix4();\n        const sceneTransform = new THREE.Matrix4();\n        const localRay = new Ray();\n        const tempPoint = new THREE.Vector3();\n\n        return function(splatMesh, outHits = []) {\n            const splatTree = splatMesh.getSplatTree();\n\n            if (!splatTree) return;\n\n            for (let s = 0; s < splatTree.subTrees.length; s++) {\n                const subTree = splatTree.subTrees[s];\n\n                fromLocal.copy(splatMesh.matrixWorld);\n                if (splatMesh.dynamicMode) {\n                    splatMesh.getSceneTransform(s, sceneTransform);\n                    fromLocal.multiply(sceneTransform);\n                }\n                toLocal.copy(fromLocal).invert();\n\n                localRay.origin.copy(this.ray.origin).applyMatrix4(toLocal);\n                localRay.direction.copy(this.ray.origin).add(this.ray.direction);\n                localRay.direction.applyMatrix4(toLocal).sub(localRay.origin).normalize();\n\n                const outHitsForSubTree = [];\n                if (subTree.rootNode) {\n                    this.castRayAtSplatTreeNode(localRay, splatTree, subTree.rootNode, outHitsForSubTree);\n                }\n\n                outHitsForSubTree.forEach((hit) => {\n                    hit.origin.applyMatrix4(fromLocal);\n                    hit.normal.applyMatrix4(fromLocal).normalize();\n                    hit.distance = tempPoint.copy(hit.origin).sub(this.ray.origin).length();\n                });\n\n                outHits.push(...outHitsForSubTree);\n            }\n\n            outHits.sort((a, b) => {\n                if (a.distance > b.distance) return 1;\n                else return -1;\n            });\n\n            return outHits;\n        };\n\n    }();\n\n    castRayAtSplatTreeNode = function() {\n\n        const tempColor = new THREE.Vector4();\n        const tempCenter = new THREE.Vector3();\n        const tempScale = new THREE.Vector3();\n        const tempRotation = new THREE.Quaternion();\n        const tempHit = new Hit();\n        const scaleEpsilon = 0.0000001;\n\n        const origin = new THREE.Vector3(0, 0, 0);\n        const uniformScaleMatrix = new THREE.Matrix4();\n        const scaleMatrix = new THREE.Matrix4();\n        const rotationMatrix = new THREE.Matrix4();\n        const toSphereSpace = new THREE.Matrix4();\n        const fromSphereSpace = new THREE.Matrix4();\n        const tempRay = new Ray();\n\n        return function(ray, splatTree, node, outHits = []) {\n            if (!ray.intersectBox(node.boundingBox)) {\n                return;\n            }\n            if (node.data && node.data.indexes && node.data.indexes.length > 0) {\n                for (let i = 0; i < node.data.indexes.length; i++) {\n                    const splatGlobalIndex = node.data.indexes[i];\n                    splatTree.splatMesh.getSplatColor(splatGlobalIndex, tempColor);\n                    splatTree.splatMesh.getSplatCenter(splatGlobalIndex, tempCenter);\n                    splatTree.splatMesh.getSplatScaleAndRotation(splatGlobalIndex, tempScale, tempRotation);\n\n                    if (tempScale.x <= scaleEpsilon || tempScale.y <= scaleEpsilon || tempScale.z <= scaleEpsilon) {\n                        continue;\n                    }\n\n                    if (!this.raycastAgainstTrueSplatEllipsoid) {\n                        const radius = (tempScale.x + tempScale.y + tempScale.z) / 3;\n                        if (ray.intersectSphere(tempCenter, radius, tempHit)) {\n                            const hitClone = tempHit.clone();\n                            hitClone.splatIndex = splatGlobalIndex;\n                            outHits.push(hitClone);\n                        }\n                    } else {\n                        scaleMatrix.makeScale(tempScale.x, tempScale.y, tempScale.z);\n                        rotationMatrix.makeRotationFromQuaternion(tempRotation);\n                        const uniformScale = Math.log10(tempColor.w) * 2.0;\n                        uniformScaleMatrix.makeScale(uniformScale, uniformScale, uniformScale);\n                        fromSphereSpace.copy(uniformScaleMatrix).multiply(rotationMatrix).multiply(scaleMatrix);\n                        toSphereSpace.copy(fromSphereSpace).invert();\n                        tempRay.origin.copy(ray.origin).sub(tempCenter).applyMatrix4(toSphereSpace);\n                        tempRay.direction.copy(ray.origin).add(ray.direction).sub(tempCenter);\n                        tempRay.direction.applyMatrix4(toSphereSpace).sub(tempRay.origin).normalize();\n                        if (tempRay.intersectSphere(origin, 1.0, tempHit)) {\n                            const hitClone = tempHit.clone();\n                            hitClone.splatIndex = splatGlobalIndex;\n                            hitClone.origin.applyMatrix4(fromSphereSpace).add(tempCenter);\n                            outHits.push(hitClone);\n                        }\n                    }\n                }\n             }\n            if (node.children && node.children.length > 0) {\n                for (let child of node.children) {\n                    this.castRayAtSplatTreeNode(ray, splatTree, child, outHits);\n                }\n            }\n            return outHits;\n        };\n\n    }();\n}\n","import * as THREE from 'three';\n\n/**\n * SplatScene: Descriptor for a single splat scene managed by an instance of SplatMesh.\n */\nexport class SplatScene {\n\n    constructor(splatBuffer, position = new THREE.Vector3(), quaternion = new THREE.Quaternion(),\n                scale = new THREE.Vector3(1, 1, 1), minimumAlpha = 1) {\n        this.splatBuffer = splatBuffer;\n        this.position = position.clone();\n        this.quaternion = quaternion.clone();\n        this.scale = scale.clone();\n        this.transform = new THREE.Matrix4();\n        this.minimumAlpha = minimumAlpha;\n        this.updateTransform();\n    }\n\n    copyTransformData(otherScene) {\n        this.position.copy(otherScene.position);\n        this.quaternion.copy(otherScene.quaternion);\n        this.scale.copy(otherScene.scale);\n        this.transform.copy(otherScene.transform);\n    }\n\n    updateTransform() {\n        this.transform.compose(this.position, this.quaternion, this.scale);\n    }\n}\n","import * as THREE from 'three';\nimport { delayedExecute } from '../Util.js';\n\nclass SplatTreeNode {\n\n    static idGen = 0;\n\n    constructor(min, max, depth, id) {\n        this.min = new THREE.Vector3().copy(min);\n        this.max = new THREE.Vector3().copy(max);\n        this.boundingBox = new THREE.Box3(this.min, this.max);\n        this.center = new THREE.Vector3().copy(this.max).sub(this.min).multiplyScalar(0.5).add(this.min);\n        this.depth = depth;\n        this.children = [];\n        this.data = null;\n        this.id = id || SplatTreeNode.idGen++;\n    }\n\n}\n\nclass SplatSubTree {\n\n    constructor(maxDepth, maxCentersPerNode) {\n        this.maxDepth = maxDepth;\n        this.maxCentersPerNode = maxCentersPerNode;\n        this.sceneDimensions = new THREE.Vector3();\n        this.sceneMin = new THREE.Vector3();\n        this.sceneMax = new THREE.Vector3();\n        this.rootNode = null;\n        this.nodesWithIndexes = [];\n        this.splatMesh = null;\n    }\n\n    static convertWorkerSubTreeNode(workerSubTreeNode) {\n        const minVector = new THREE.Vector3().fromArray(workerSubTreeNode.min);\n        const maxVector = new THREE.Vector3().fromArray(workerSubTreeNode.max);\n        const convertedNode = new SplatTreeNode(minVector, maxVector, workerSubTreeNode.depth, workerSubTreeNode.id);\n        if (workerSubTreeNode.data.indexes) {\n            convertedNode.data = {\n                'indexes': []\n            };\n            for (let index of workerSubTreeNode.data.indexes) {\n                convertedNode.data.indexes.push(index);\n            }\n        }\n        if (workerSubTreeNode.children) {\n            for (let child of workerSubTreeNode.children) {\n                convertedNode.children.push(SplatSubTree.convertWorkerSubTreeNode(child));\n            }\n        }\n        return convertedNode;\n    }\n\n    static convertWorkerSubTree(workerSubTree, splatMesh) {\n        const convertedSubTree = new SplatSubTree(workerSubTree.maxDepth, workerSubTree.maxCentersPerNode);\n        convertedSubTree.sceneMin = new THREE.Vector3().fromArray(workerSubTree.sceneMin);\n        convertedSubTree.sceneMax = new THREE.Vector3().fromArray(workerSubTree.sceneMax);\n\n        convertedSubTree.splatMesh = splatMesh;\n        convertedSubTree.rootNode = SplatSubTree.convertWorkerSubTreeNode(workerSubTree.rootNode);\n\n\n        const visitLeavesFromNode = (node, visitFunc) => {\n            if (node.children.length === 0) visitFunc(node);\n            for (let child of node.children) {\n                visitLeavesFromNode(child, visitFunc);\n            }\n        };\n\n        convertedSubTree.nodesWithIndexes = [];\n        visitLeavesFromNode(convertedSubTree.rootNode, (node) => {\n            if (node.data && node.data.indexes && node.data.indexes.length > 0) {\n                convertedSubTree.nodesWithIndexes.push(node);\n            }\n        });\n\n        return convertedSubTree;\n    }\n}\n\nfunction createSplatTreeWorker(self) {\n\n    let WorkerSplatTreeNodeIDGen = 0;\n\n    class WorkerBox3 {\n\n        constructor(min, max) {\n            this.min = [min[0], min[1], min[2]];\n            this.max = [max[0], max[1], max[2]];\n        }\n\n        containsPoint(point) {\n            return point[0] >= this.min[0] && point[0] <= this.max[0] &&\n                   point[1] >= this.min[1] && point[1] <= this.max[1] &&\n                   point[2] >= this.min[2] && point[2] <= this.max[2];\n        }\n    }\n\n    class WorkerSplatSubTree {\n\n        constructor(maxDepth, maxCentersPerNode) {\n            this.maxDepth = maxDepth;\n            this.maxCentersPerNode = maxCentersPerNode;\n            this.sceneDimensions = [];\n            this.sceneMin = [];\n            this.sceneMax = [];\n            this.rootNode = null;\n            this.addedIndexes = {};\n            this.nodesWithIndexes = [];\n            this.splatMesh = null;\n            this.disposed = false;\n        }\n\n    }\n\n    class WorkerSplatTreeNode {\n\n        constructor(min, max, depth, id) {\n            this.min = [min[0], min[1], min[2]];\n            this.max = [max[0], max[1], max[2]];\n            this.center = [(max[0] - min[0]) * 0.5 + min[0],\n                           (max[1] - min[1]) * 0.5 + min[1],\n                           (max[2] - min[2]) * 0.5 + min[2]];\n            this.depth = depth;\n            this.children = [];\n            this.data = null;\n            this.id = id || WorkerSplatTreeNodeIDGen++;\n        }\n\n    }\n\n    processSplatTreeNode = function(tree, node, indexToCenter, sceneCenters) {\n        const splatCount = node.data.indexes.length;\n\n        if (splatCount < tree.maxCentersPerNode || node.depth > tree.maxDepth) {\n            const newIndexes = [];\n            for (let i = 0; i < node.data.indexes.length; i++) {\n                if (!tree.addedIndexes[node.data.indexes[i]]) {\n                    newIndexes.push(node.data.indexes[i]);\n                    tree.addedIndexes[node.data.indexes[i]] = true;\n                }\n            }\n            node.data.indexes = newIndexes;\n            node.data.indexes.sort((a, b) => {\n                if (a > b) return 1;\n                else return -1;\n            });\n            tree.nodesWithIndexes.push(node);\n            return;\n        }\n\n        const nodeDimensions = [node.max[0] - node.min[0],\n                                node.max[1] - node.min[1],\n                                node.max[2] - node.min[2]];\n        const halfDimensions = [nodeDimensions[0] * 0.5,\n                                nodeDimensions[1] * 0.5,\n                                nodeDimensions[2] * 0.5];\n        const nodeCenter = [node.min[0] + halfDimensions[0],\n                            node.min[1] + halfDimensions[1],\n                            node.min[2] + halfDimensions[2]];\n\n        const childrenBounds = [\n            // top section, clockwise from upper-left (looking from above, +Y)\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1], nodeCenter[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2] + halfDimensions[2]]),\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1], nodeCenter[2]],\n                           [nodeCenter[0], nodeCenter[1] + halfDimensions[1], nodeCenter[2] + halfDimensions[2]]),\n\n            // bottom section, clockwise from lower-left (looking from above, +Y)\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0], nodeCenter[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2] - halfDimensions[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2]]),\n            new WorkerBox3([nodeCenter[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\n                           [nodeCenter[0] + halfDimensions[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]]),\n            new WorkerBox3([nodeCenter[0] - halfDimensions[0], nodeCenter[1] - halfDimensions[1], nodeCenter[2]],\n                           [nodeCenter[0], nodeCenter[1], nodeCenter[2] + halfDimensions[2]]),\n        ];\n\n        const splatCounts = [];\n        const baseIndexes = [];\n        for (let i = 0; i < childrenBounds.length; i++) {\n            splatCounts[i] = 0;\n            baseIndexes[i] = [];\n        }\n\n        const center = [0, 0, 0];\n        for (let i = 0; i < splatCount; i++) {\n            const splatGlobalIndex = node.data.indexes[i];\n            const centerBase = indexToCenter[splatGlobalIndex];\n            center[0] = sceneCenters[centerBase];\n            center[1] = sceneCenters[centerBase + 1];\n            center[2] = sceneCenters[centerBase + 2];\n            for (let j = 0; j < childrenBounds.length; j++) {\n                if (childrenBounds[j].containsPoint(center)) {\n                    splatCounts[j]++;\n                    baseIndexes[j].push(splatGlobalIndex);\n                }\n            }\n        }\n\n        for (let i = 0; i < childrenBounds.length; i++) {\n            const childNode = new WorkerSplatTreeNode(childrenBounds[i].min, childrenBounds[i].max, node.depth + 1);\n            childNode.data = {\n                'indexes': baseIndexes[i]\n            };\n            node.children.push(childNode);\n        }\n\n        node.data = {};\n        for (let child of node.children) {\n            processSplatTreeNode(tree, child, indexToCenter, sceneCenters);\n        }\n        return;\n    };\n\n    const buildSubTree = (sceneCenters, maxDepth, maxCentersPerNode) => {\n\n        const sceneMin = [0, 0, 0];\n        const sceneMax = [0, 0, 0];\n        const indexes = [];\n        const centerCount = Math.floor(sceneCenters.length / 4);\n        for ( let i = 0; i < centerCount; i ++) {\n            const base = i * 4;\n            const x = sceneCenters[base];\n            const y = sceneCenters[base + 1];\n            const z = sceneCenters[base + 2];\n            const index = Math.round(sceneCenters[base + 3]);\n            if (i === 0 || x < sceneMin[0]) sceneMin[0] = x;\n            if (i === 0 || x > sceneMax[0]) sceneMax[0] = x;\n            if (i === 0 || y < sceneMin[1]) sceneMin[1] = y;\n            if (i === 0 || y > sceneMax[1]) sceneMax[1] = y;\n            if (i === 0 || z < sceneMin[2]) sceneMin[2] = z;\n            if (i === 0 || z > sceneMax[2]) sceneMax[2] = z;\n            indexes.push(index);\n        }\n        const subTree = new WorkerSplatSubTree(maxDepth, maxCentersPerNode);\n        subTree.sceneMin = sceneMin;\n        subTree.sceneMax = sceneMax;\n        subTree.rootNode = new WorkerSplatTreeNode(subTree.sceneMin, subTree.sceneMax, 0);\n        subTree.rootNode.data = {\n            'indexes': indexes\n        };\n\n        return subTree;\n    };\n\n    function createSplatTree(allCenters, maxDepth, maxCentersPerNode) {\n        const indexToCenter = [];\n        for (let sceneCenters of allCenters) {\n            const centerCount = Math.floor(sceneCenters.length / 4);\n            for ( let i = 0; i < centerCount; i ++) {\n                const base = i * 4;\n                const index = Math.round(sceneCenters[base + 3]);\n                indexToCenter[index] = base;\n            }\n        }\n        const subTrees = [];\n        for (let sceneCenters of allCenters) {\n            const subTree = buildSubTree(sceneCenters, maxDepth, maxCentersPerNode);\n            subTrees.push(subTree);\n            processSplatTreeNode(subTree, subTree.rootNode, indexToCenter, sceneCenters);\n        }\n        self.postMessage({\n            'subTrees': subTrees\n        });\n    }\n\n    self.onmessage = (e) => {\n        if (e.data.process) {\n            createSplatTree(e.data.process.centers, e.data.process.maxDepth, e.data.process.maxCentersPerNode);\n        }\n    };\n}\n\nfunction workerProcessCenters(splatTreeWorker, centers, transferBuffers, maxDepth, maxCentersPerNode) {\n    splatTreeWorker.postMessage({\n        'process': {\n            'centers': centers,\n            'maxDepth': maxDepth,\n            'maxCentersPerNode': maxCentersPerNode\n        }\n    }, transferBuffers);\n}\n\nfunction checkAndCreateWorker() {\n    const splatTreeWorker = new Worker(\n        URL.createObjectURL(\n            new Blob(['(', createSplatTreeWorker.toString(), ')(self)'], {\n                type: 'application/javascript',\n            }),\n        ),\n    );\n    return splatTreeWorker;\n}\n\n/**\n * SplatTree: Octree tailored to splat data from a SplatMesh instance\n */\nexport class SplatTree {\n\n    constructor(maxDepth, maxCentersPerNode) {\n        this.maxDepth = maxDepth;\n        this.maxCentersPerNode = maxCentersPerNode;\n        this.subTrees = [];\n        this.splatMesh = null;\n    }\n\n\n    dispose() {\n        this.diposeSplatTreeWorker();\n        this.disposed = true;\n    }\n\n    diposeSplatTreeWorker() {\n        if (this.splatTreeWorker) this.splatTreeWorker.terminate();\n        this.splatTreeWorker = null;\n    };\n\n    /**\n     * Construct this instance of SplatTree from an instance of SplatMesh.\n     *\n     * @param {SplatMesh} splatMesh The instance of SplatMesh from which to construct this splat tree.\n     * @param {function} filterFunc Optional function to filter out unwanted splats.\n     * @param {function} onIndexesUpload Function to be called when the upload of splat centers to the splat tree\n     *                                   builder worker starts and finishes.\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n     *                                           the format produced by the splat tree builder worker starts and ends.\n     * @return {undefined}\n     */\n    processSplatMesh = function(splatMesh, filterFunc = () => true, onIndexesUpload, onSplatTreeConstruction) {\n        if (!this.splatTreeWorker) this.splatTreeWorker = checkAndCreateWorker();\n\n        this.splatMesh = splatMesh;\n        this.subTrees = [];\n        const center = new THREE.Vector3();\n\n        const addCentersForScene = (splatOffset, splatCount) => {\n            const sceneCenters = new Float32Array(splatCount * 4);\n            let addedCount = 0;\n            for (let i = 0; i < splatCount; i++) {\n                const globalSplatIndex = i + splatOffset;\n                if (filterFunc(globalSplatIndex)) {\n                    splatMesh.getSplatCenter(globalSplatIndex, center);\n                    const addBase = addedCount * 4;\n                    sceneCenters[addBase] = center.x;\n                    sceneCenters[addBase + 1] = center.y;\n                    sceneCenters[addBase + 2] = center.z;\n                    sceneCenters[addBase + 3] = globalSplatIndex;\n                    addedCount++;\n                }\n            }\n            return sceneCenters;\n        };\n\n        return new Promise((resolve) => {\n\n            const checkForEarlyExit = () => {\n                if (this.disposed) {\n                    this.diposeSplatTreeWorker();\n                    resolve();\n                    return true;\n                }\n                return false;\n            };\n\n            if (onIndexesUpload) onIndexesUpload(false);\n\n            delayedExecute(() => {\n\n                if (checkForEarlyExit()) return;\n\n                const allCenters = [];\n                if (splatMesh.dynamicMode) {\n                    let splatOffset = 0;\n                    for (let s = 0; s < splatMesh.scenes.length; s++) {\n                        const scene = splatMesh.getScene(s);\n                        const splatCount = scene.splatBuffer.getSplatCount();\n                        const sceneCenters = addCentersForScene(splatOffset, splatCount);\n                        allCenters.push(sceneCenters);\n                        splatOffset += splatCount;\n                    }\n                } else {\n                    const sceneCenters = addCentersForScene(0, splatMesh.getSplatCount());\n                    allCenters.push(sceneCenters);\n                }\n\n                this.splatTreeWorker.onmessage = (e) => {\n\n                    if (checkForEarlyExit()) return;\n\n                    if (e.data.subTrees) {\n\n                        if (onSplatTreeConstruction) onSplatTreeConstruction(false);\n\n                        delayedExecute(() => {\n\n                            if (checkForEarlyExit()) return;\n\n                            for (let workerSubTree of e.data.subTrees) {\n                                const convertedSubTree = SplatSubTree.convertWorkerSubTree(workerSubTree, splatMesh);\n                                this.subTrees.push(convertedSubTree);\n                            }\n                            this.diposeSplatTreeWorker();\n\n                            if (onSplatTreeConstruction) onSplatTreeConstruction(true);\n\n                            delayedExecute(() => {\n                                resolve();\n                            });\n\n                        });\n                    }\n                };\n\n                delayedExecute(() => {\n                    if (checkForEarlyExit()) return;\n                    if (onIndexesUpload) onIndexesUpload(true);\n                    const transferBuffers = allCenters.map((array) => array.buffer);\n                    workerProcessCenters(this.splatTreeWorker, allCenters, transferBuffers, this.maxDepth, this.maxCentersPerNode);\n                });\n\n            });\n\n        });\n\n    };\n\n    countLeaves() {\n\n        let leafCount = 0;\n        this.visitLeaves(() => {\n            leafCount++;\n        });\n\n        return leafCount;\n    }\n\n    visitLeaves(visitFunc) {\n\n        const visitLeavesFromNode = (node, visitFunc) => {\n            if (node.children.length === 0) visitFunc(node);\n            for (let child of node.children) {\n                visitLeavesFromNode(child, visitFunc);\n            }\n        };\n\n        for (let subTree of this.subTrees) {\n            visitLeavesFromNode(subTree.rootNode, visitFunc);\n        }\n    }\n\n}\n","function WebGLExtensions( gl ) {\n\n    const extensions = {};\n\n    function getExtension( name ) {\n\n        if ( extensions[name] !== undefined ) {\n\n            return extensions[name];\n\n        }\n\n        let extension;\n\n        switch ( name ) {\n\n            case 'WEBGL_depth_texture':\n                extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) ||\n                            gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );\n                break;\n\n            case 'EXT_texture_filter_anisotropic':\n                extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) ||\n                            gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) ||\n                            gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );\n                break;\n\n            case 'WEBGL_compressed_texture_s3tc':\n                extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) ||\n                            gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) ||\n                            gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );\n                break;\n\n            case 'WEBGL_compressed_texture_pvrtc':\n                extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) ||\n                           gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n                break;\n\n            default:\n                extension = gl.getExtension( name );\n\n        }\n\n        extensions[name] = extension;\n\n        return extension;\n\n    }\n\n    return {\n\n        has: function( name ) {\n\n            return getExtension( name ) !== null;\n\n        },\n\n        init: function( capabilities ) {\n\n            if ( capabilities.isWebGL2 ) {\n\n                getExtension( 'EXT_color_buffer_float' );\n                getExtension( 'WEBGL_clip_cull_distance' );\n\n            } else {\n\n                getExtension( 'WEBGL_depth_texture' );\n                getExtension( 'OES_texture_float' );\n                getExtension( 'OES_texture_half_float' );\n                getExtension( 'OES_texture_half_float_linear' );\n                getExtension( 'OES_standard_derivatives' );\n                getExtension( 'OES_element_index_uint' );\n                getExtension( 'OES_vertex_array_object' );\n                getExtension( 'ANGLE_instanced_arrays' );\n\n            }\n\n            getExtension( 'OES_texture_float_linear' );\n            getExtension( 'EXT_color_buffer_half_float' );\n            getExtension( 'WEBGL_multisampled_render_to_texture' );\n\n        },\n\n        get: function( name ) {\n\n            const extension = getExtension( name );\n\n            if ( extension === null ) {\n\n                console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );\n\n            }\n\n            return extension;\n\n        }\n\n    };\n\n}\n\nexport { WebGLExtensions };\n","function WebGLCapabilities( gl, extensions, parameters ) {\n\n    let maxAnisotropy;\n\n    function getMaxAnisotropy() {\n\n        if ( maxAnisotropy !== undefined ) return maxAnisotropy;\n\n        if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {\n\n            const extension = extensions.get( 'EXT_texture_filter_anisotropic' );\n\n            maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );\n\n        } else {\n\n            maxAnisotropy = 0;\n\n        }\n\n        return maxAnisotropy;\n\n    }\n\n    function getMaxPrecision( precision ) {\n\n        if ( precision === 'highp' ) {\n\n            if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&\n                gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {\n\n                return 'highp';\n\n            }\n\n            precision = 'mediump';\n\n        }\n\n        if ( precision === 'mediump' ) {\n\n            if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&\n                gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {\n\n                return 'mediump';\n\n            }\n\n        }\n\n        return 'lowp';\n\n    }\n\n    const isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl.constructor.name === 'WebGL2RenderingContext';\n\n    let precision = parameters.precision !== undefined ? parameters.precision : 'highp';\n    const maxPrecision = getMaxPrecision( precision );\n\n    if ( maxPrecision !== precision ) {\n\n        console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );\n        precision = maxPrecision;\n\n    }\n\n    const drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );\n\n    const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;\n\n    const maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );\n    const maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );\n    const maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );\n    const maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );\n\n    const maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );\n    const maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );\n    const maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );\n    const maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );\n\n    const vertexTextures = maxVertexTextures > 0;\n    const floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );\n    const floatVertexTextures = vertexTextures && floatFragmentTextures;\n\n    const maxSamples = isWebGL2 ? gl.getParameter( gl.MAX_SAMPLES ) : 0;\n\n    return {\n\n        isWebGL2: isWebGL2,\n\n        drawBuffers: drawBuffers,\n\n        getMaxAnisotropy: getMaxAnisotropy,\n        getMaxPrecision: getMaxPrecision,\n\n        precision: precision,\n        logarithmicDepthBuffer: logarithmicDepthBuffer,\n\n        maxTextures: maxTextures,\n        maxVertexTextures: maxVertexTextures,\n        maxTextureSize: maxTextureSize,\n        maxCubemapSize: maxCubemapSize,\n\n        maxAttributes: maxAttributes,\n        maxVertexUniforms: maxVertexUniforms,\n        maxVaryings: maxVaryings,\n        maxFragmentUniforms: maxFragmentUniforms,\n\n        vertexTextures: vertexTextures,\n        floatFragmentTextures: floatFragmentTextures,\n        floatVertexTextures: floatVertexTextures,\n\n        maxSamples: maxSamples\n\n    };\n\n}\n\n\nexport { WebGLCapabilities };\n","export const SceneRevealMode = {\n    Default: 0,\n    Gradual: 1,\n    Instant: 2\n};\n","import * as THREE from 'three';\nimport { SplatScene } from './SplatScene.js';\nimport { SplatTree } from './splattree/SplatTree.js';\nimport { WebGLExtensions } from './three-shim/WebGLExtensions.js';\nimport { WebGLCapabilities } from './three-shim/WebGLCapabilities.js';\nimport { uintEncodedFloat, rgbaArrayToInteger } from './Util.js';\nimport { Constants } from './Constants.js';\nimport { SceneRevealMode } from './SceneRevealMode.js';\n\nconst dummyGeometry = new THREE.BufferGeometry();\nconst dummyMaterial = new THREE.MeshBasicMaterial();\n\nconst COVARIANCES_ELEMENTS_PER_SPLAT = 6;\nconst CENTER_COLORS_ELEMENTS_PER_SPLAT = 4;\n\nconst SCENE_FADEIN_RATE_FAST = 0.012;\nconst SCENE_FADEIN_RATE_GRADUAL = 0.003;\n\nconst VISIBLE_REGION_EXPANSION_DELTA = 1;\n\n/**\n * SplatMesh: Container for one or more splat scenes, abstracting them into a single unified container for\n * splat data. Additionally contains data structures and code to make the splat data renderable as a Three.js mesh.\n */\nexport class SplatMesh extends THREE.Mesh {\n\n    constructor(dynamicMode = true, halfPrecisionCovariancesOnGPU = false, devicePixelRatio = 1,\n                enableDistancesComputationOnGPU = true, integerBasedDistancesComputation = false,\n                antialiased = false, maxScreenSpaceSplatSize = 2048) {\n        super(dummyGeometry, dummyMaterial);\n        // Reference to a Three.js renderer\n        this.renderer = undefined;\n        // Use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\n        this.halfPrecisionCovariancesOnGPU = halfPrecisionCovariancesOnGPU;\n        // When 'dynamicMode' is true, scenes are assumed to be non-static. Dynamic scenes are handled differently\n        // and certain optimizations cannot be made for them. Additionally, by default, all splat data retrieved from\n        // this splat mesh will not have their scene transform applied to them if the splat mesh is dynamic. That\n        // can be overriden via parameters to the individual functions that are used to retrieve splat data.\n        this.dynamicMode = dynamicMode;\n        // Ratio of the resolution in physical pixels to the resolution in CSS pixels for the current display device\n        this.devicePixelRatio = devicePixelRatio;\n        // Use a transform feedback to calculate splat distances from the camera\n        this.enableDistancesComputationOnGPU = enableDistancesComputationOnGPU;\n        // Use a faster integer-based approach for calculating splat distances from the camera\n        this.integerBasedDistancesComputation = integerBasedDistancesComputation;\n        // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\n        // substantially different resolution than that at which they were rendered during training. This will only work correctly\n        // for models that were trained using a process that utilizes this compensation calculation. For more details:\n        // https://github.com/nerfstudio-project/gsplat/pull/117\n        // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\n        this.antialiased = antialiased;\n        // Specify the maximum clip space splat size, can help deal with large splats that get too unwieldy\n        this.maxScreenSpaceSplatSize = maxScreenSpaceSplatSize;\n        // The individual splat scenes stored in this splat mesh, each containing their own transform\n        this.scenes = [];\n        // Special octree tailored to SplatMesh instances\n        this.splatTree = null;\n        this.baseSplatTree = null;\n        // Textures in which splat data will be stored for rendering\n        this.splatDataTextures = {};\n        this.distancesTransformFeedback = {\n            'id': null,\n            'vertexShader': null,\n            'fragmentShader': null,\n            'program': null,\n            'centersBuffer': null,\n            'transformIndexesBuffer': null,\n            'outDistancesBuffer': null,\n            'centersLoc': -1,\n            'modelViewProjLoc': -1,\n            'transformIndexesLoc': -1,\n            'transformsLocs': []\n        };\n        this.globalSplatIndexToLocalSplatIndexMap = [];\n        this.globalSplatIndexToSceneIndexMap = [];\n\n        this.lastBuildSplatCount = 0;\n        this.lastBuildScenes = [];\n        this.lastBuildMaxSplatCount = 0;\n        this.lastBuildSceneCount = 0;\n        this.firstRenderTime = -1;\n        this.finalBuild = false;\n\n        this.webGLUtils = null;\n\n        this.boundingBox = new THREE.Box3();\n        this.calculatedSceneCenter = new THREE.Vector3();\n        this.maxSplatDistanceFromSceneCenter = 0;\n        this.visibleRegionBufferRadius = 0;\n        this.visibleRegionRadius = 0;\n        this.visibleRegionFadeStartRadius = 0;\n        this.visibleRegionChanging = false;\n\n        this.splatScale = 1.0;\n        this.pointCloudModeEnabled = false;\n\n        this.disposed = false;\n        this.lastRenderer = null;\n        this.visible = false;\n    }\n\n    /**\n     * Build the Three.js material that is used to render the splats.\n     * @param {number} dynamicMode If true, it means the scene geometry represented by this splat mesh is not stationary or\n     *                             that the splat count might change\n     * @param {boolean} antialiased If true, calculate compensation factor to deal with gaussians being rendered at a significantly\n     *                              different resolution than that of their training\n     * @param {number} maxScreenSpaceSplatSize The maximum clip space splat size\n     * @param {number} splatScale Value by which all splats are scaled in screen-space (default is 1.0)\n     * @param {number} pointCloudModeEnabled Render all splats as screen-space circles\n     * @return {THREE.ShaderMaterial}\n     */\n    static buildMaterial(dynamicMode = false, antialiased = false,\n                         maxScreenSpaceSplatSize = 2048, splatScale = 1.0, pointCloudModeEnabled = false) {\n\n        // Contains the code to project 3D covariance to 2D and from there calculate the quad (using the eigen vectors of the\n        // 2D covariance) that is ultimately rasterized\n        let vertexShaderSource = `\n            precision highp float;\n            #include <common>\n\n            attribute uint splatIndex;\n\n            uniform highp sampler2D covariancesTexture;\n            uniform highp usampler2D centersColorsTexture;`;\n\n        if (dynamicMode) {\n            vertexShaderSource += `\n                uniform highp usampler2D transformIndexesTexture;\n                uniform highp mat4 transforms[${Constants.MaxScenes}];\n                uniform vec2 transformIndexesTextureSize;\n            `;\n        }\n\n        vertexShaderSource += `\n            uniform vec2 focal;\n            uniform float orthoZoom;\n            uniform int orthographicMode;\n            uniform int pointCloudModeEnabled;\n            uniform float inverseFocalAdjustment;\n            uniform vec2 viewport;\n            uniform vec2 basisViewport;\n            uniform vec2 covariancesTextureSize;\n            uniform vec2 centersColorsTextureSize;\n            uniform float visibleRegionRadius;\n            uniform float visibleRegionFadeStartRadius;\n            uniform float firstRenderTime;\n            uniform float currentTime;\n            uniform int fadeInComplete;\n            uniform vec3 sceneCenter;\n            uniform float splatScale;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            const float sqrt8 = sqrt(8.0);\n            const float minAlpha = 1.0 / 255.0;\n\n            const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\n            const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\n            const uvec4 shift4 = uvec4(0, 8, 16, 24);\n            vec4 uintToRGBAVec (uint u) {\n               uvec4 urgba = mask4 & u;\n               urgba = urgba >> shift4;\n               vec4 rgba = vec4(urgba) * encodeNorm4;\n               return rgba;\n            }\n\n            vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\n                vec2 samplerUV = vec2(0.0, 0.0);\n                float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\n                samplerUV.y = float(floor(d)) / dimensions.y;\n                samplerUV.x = fract(d);\n                return samplerUV;\n            }\n\n            void main () {\n\n                uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\n                vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));`;\n\n            if (dynamicMode) {\n                vertexShaderSource += `\n                    uint transformIndex = texture(transformIndexesTexture, getDataUV(1, 0, transformIndexesTextureSize)).r;\n                    mat4 transform = transforms[transformIndex];\n                    mat4 transformModelViewMatrix = modelViewMatrix * transform;\n                `;\n            } else {\n                vertexShaderSource += `mat4 transformModelViewMatrix = modelViewMatrix;`;\n            }\n\n            vertexShaderSource += `\n                vec4 viewCenter = transformModelViewMatrix * vec4(splatCenter, 1.0);\n\n                vec4 clipCenter = projectionMatrix * viewCenter;\n\n                float clip = 1.2 * clipCenter.w;\n                if (clipCenter.z < -clip || clipCenter.x < -clip || clipCenter.x > clip || clipCenter.y < -clip || clipCenter.y > clip) {\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                    return;\n                }\n\n                vPosition = position.xy;\n                vColor = uintToRGBAVec(sampledCenterColor.r);\n\n                vec2 sampledCovarianceA = texture(covariancesTexture, getDataUV(3, 0, covariancesTextureSize)).rg;\n                vec2 sampledCovarianceB = texture(covariancesTexture, getDataUV(3, 1, covariancesTextureSize)).rg;\n                vec2 sampledCovarianceC = texture(covariancesTexture, getDataUV(3, 2, covariancesTextureSize)).rg;\n\n                vec3 cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rg, sampledCovarianceB.r);\n                vec3 cov3D_M22_M23_M33 = vec3(sampledCovarianceB.g, sampledCovarianceC.rg);\n\n                // Construct the 3D covariance matrix\n                mat3 Vrk = mat3(\n                    cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\n                    cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\n                    cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\n                );\n\n                // Construct the Jacobian of the affine approximation of the projection matrix. It will be used to transform the\n                // 3D covariance matrix instead of using the actual projection matrix because that transformation would\n                // require a non-linear component (perspective division) which would yield a non-gaussian result. (This assumes\n                // the current projection is a perspective projection).\n\n                mat3 J;\n                if (orthographicMode == 1) {\n                    J = transpose(mat3(orthoZoom, 0.0, 0.0,\n                                       0.0, orthoZoom, 0.0,\n                                       0.0, 0.0, 0.0));\n                } else {\n                    float s = 1.0 / (viewCenter.z * viewCenter.z);\n                    J = mat3(\n                        focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\n                        0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\n                        0., 0., 0.\n                    );\n                }\n\n                // Concatenate the projection approximation with the model-view transformation\n                mat3 W = transpose(mat3(transformModelViewMatrix));\n                mat3 T = W * J;\n\n                // Transform the 3D covariance matrix (Vrk) to compute the 2D covariance matrix\n                mat3 cov2Dm = transpose(T) * Vrk * T;\n                `;\n\n            if (antialiased) {\n                vertexShaderSource += `\n                    float detOrig = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                    cov2Dm[0][0] += 0.3;\n                    cov2Dm[1][1] += 0.3;\n                    float detBlur = cov2Dm[0][0] * cov2Dm[1][1] - cov2Dm[0][1] * cov2Dm[0][1];\n                    float compensation = sqrt(max(detOrig / detBlur, 0.0));\n                `;\n            } else {\n                vertexShaderSource += `\n                    cov2Dm[0][0] += 0.3;\n                    cov2Dm[1][1] += 0.3;\n                    float compensation = 1.0;\n                `;\n            }\n\n            vertexShaderSource += `\n\n                vColor.a *= compensation;\n\n                if (vColor.a < minAlpha) return;\n\n                // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\n                // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\n                // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\n                // need cov2Dm[1][0] because it is a symetric matrix.\n                vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\n\n                vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\n\n                // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\n                // so that we can determine the 2D basis for the splat. This is done using the method described\n                // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n                // After calculating the eigen-values and eigen-vectors, we calculate the basis for rendering the splat\n                // by normalizing the eigen-vectors and then multiplying them by (sqrt(8) * eigen-value), which is\n                // equal to scaling them by sqrt(8) standard deviations.\n                //\n                // This is a different approach than in the original work at INRIA. In that work they compute the\n                // max extents of the projected splat in screen space to form a screen-space aligned bounding rectangle\n                // which forms the geometry that is actually rasterized. The dimensions of that bounding box are 3.0\n                // times the maximum eigen-value, or 3 standard deviations. They then use the inverse 2D covariance\n                // matrix (called 'conic') in the CUDA rendering thread to determine fragment opacity by calculating the\n                // full gaussian: exp(-0.5 * (X - mean) * conic * (X - mean)) * splat opacity\n                float a = cov2Dv.x;\n                float d = cov2Dv.z;\n                float b = cov2Dv.y;\n                float D = a * d - b * b;\n                float trace = a + d;\n                float traceOver2 = 0.5 * trace;\n                float term2 = sqrt(max(0.1f, traceOver2 * traceOver2 - D));\n                float eigenValue1 = traceOver2 + term2;\n                float eigenValue2 = traceOver2 - term2;\n\n                if (pointCloudModeEnabled == 1) {\n                    eigenValue1 = eigenValue2 = 0.2;\n                }\n\n                if (eigenValue2 <= 0.0) return;\n\n                vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\n                // since the eigen vectors are orthogonal, we derive the second one from the first\n                vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\n\n                // We use sqrt(8) standard deviations instead of 3 to eliminate more of the splat with a very low opacity.\n                vec2 basisVector1 = eigenVector1 * splatScale * min(sqrt8 * sqrt(eigenValue1), ${parseInt(maxScreenSpaceSplatSize)}.0);\n                vec2 basisVector2 = eigenVector2 * splatScale * min(sqrt8 * sqrt(eigenValue2), ${parseInt(maxScreenSpaceSplatSize)}.0);\n\n                if (fadeInComplete == 0) {\n                    float opacityAdjust = 1.0;\n                    float centerDist = length(splatCenter - sceneCenter);\n                    float renderTime = max(currentTime - firstRenderTime, 0.0);\n\n                    float fadeDistance = 0.75;\n                    float distanceLoadFadeInFactor = step(visibleRegionFadeStartRadius, centerDist);\n                    distanceLoadFadeInFactor = (1.0 - distanceLoadFadeInFactor) +\n                                               (1.0 - clamp((centerDist - visibleRegionFadeStartRadius) / fadeDistance, 0.0, 1.0)) *\n                                               distanceLoadFadeInFactor;\n                    opacityAdjust *= distanceLoadFadeInFactor;\n                    vColor.a *= opacityAdjust;\n                }\n\n                vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) *\n                                 basisViewport * 2.0 * inverseFocalAdjustment;\n\n                vec4 quadPos = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n                gl_Position = quadPos;\n\n                // Scale the position data we send to the fragment shader\n                vPosition *= sqrt8;\n            }`;\n\n        const fragmentShaderSource = `\n            precision highp float;\n            #include <common>\n \n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            void main () {\n                // Compute the positional squared distance from the center of the splat to the current fragment.\n                float A = dot(vPosition, vPosition);\n                // Since the positional data in vPosition has been scaled by sqrt(8), the squared result will be\n                // scaled by a factor of 8. If the squared result is larger than 8, it means it is outside the ellipse\n                // defined by the rectangle formed by vPosition. It also means it's farther\n                // away than sqrt(8) standard deviations from the mean.\n                if (A > 8.0) discard;\n                vec3 color = vColor.rgb;\n\n                // Since the rendered splat is scaled by sqrt(8), the inverse covariance matrix that is part of\n                // the gaussian formula becomes the identity matrix. We're then left with (X - mean) * (X - mean),\n                // and since 'mean' is zero, we have X * X, which is the same as A:\n                float opacity = exp(-0.5 * A) * vColor.a;\n\n                gl_FragColor = vec4(color.rgb, opacity);\n            }`;\n\n        const uniforms = {\n            'sceneCenter': {\n                'type': 'v3',\n                'value': new THREE.Vector3()\n            },\n            'fadeInComplete': {\n                'type': 'i',\n                'value': 0\n            },\n            'orthographicMode': {\n                'type': 'i',\n                'value': 0\n            },\n            'visibleRegionFadeStartRadius': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'visibleRegionRadius': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'currentTime': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'firstRenderTime': {\n                'type': 'f',\n                'value': 0.0\n            },\n            'covariancesTexture': {\n                'type': 't',\n                'value': null\n            },\n            'centersColorsTexture': {\n                'type': 't',\n                'value': null\n            },\n            'focal': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'orthoZoom': {\n                'type': 'f',\n                'value': 1.0\n            },\n            'inverseFocalAdjustment': {\n                'type': 'f',\n                'value': 1.0\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'basisViewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'debugColor': {\n                'type': 'v3',\n                'value': new THREE.Color()\n            },\n            'covariancesTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            },\n            'centersColorsTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            },\n            'splatScale': {\n                'type': 'f',\n                'value': splatScale\n            },\n            'pointCloudModeEnabled': {\n                'type': 'i',\n                'value': pointCloudModeEnabled ? 1 : 0\n            }\n        };\n\n        if (dynamicMode) {\n            uniforms['transformIndexesTexture'] = {\n                'type': 't',\n                'value': null\n            };\n            const transformMatrices = [];\n            for (let i = 0; i < Constants.MaxScenes; i++) {\n                transformMatrices.push(new THREE.Matrix4());\n            }\n            uniforms['transforms'] = {\n                'type': 'mat4',\n                'value': transformMatrices\n            };\n            uniforms['transformIndexesTextureSize'] = {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            };\n        }\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            alphaTest: 1.0,\n            blending: THREE.NormalBlending,\n            depthTest: true,\n            depthWrite: false,\n            side: THREE.DoubleSide\n        });\n\n        return material;\n    }\n\n    /**\n     * Build the Three.js geometry that will be used to render the splats. The geometry is instanced and is made up of\n     * vertices for a single quad as well as an attribute buffer for the splat indexes.\n     * @param {number} maxSplatCount The maximum number of splats that the geometry will need to accomodate\n     * @return {THREE.InstancedBufferGeometry}\n     */\n    static buildGeomtery(maxSplatCount) {\n\n        const baseGeometry = new THREE.BufferGeometry();\n        baseGeometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n        // Vertices for the instanced quad\n        const positionsArray = new Float32Array(4 * 3);\n        const positions = new THREE.BufferAttribute(positionsArray, 3);\n        baseGeometry.setAttribute('position', positions);\n        positions.setXYZ(0, -1.0, -1.0, 0.0);\n        positions.setXYZ(1, -1.0, 1.0, 0.0);\n        positions.setXYZ(2, 1.0, 1.0, 0.0);\n        positions.setXYZ(3, 1.0, -1.0, 0.0);\n        positions.needsUpdate = true;\n\n        const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\n\n        // Splat index buffer\n        const splatIndexArray = new Uint32Array(maxSplatCount);\n        const splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\n        splatIndexes.setUsage(THREE.DynamicDrawUsage);\n        geometry.setAttribute('splatIndex', splatIndexes);\n\n        geometry.instanceCount = 0;\n\n        return geometry;\n    }\n\n    /**\n     * Build a container for each scene managed by this splat mesh based on an instance of SplatBuffer, along with optional\n     * transform data (position, scale, rotation) passed to the splat mesh during the build process.\n     * @param {Array<THREE.Matrix4>} splatBuffers SplatBuffer instances containing splats for each scene\n     * @param {Array<object>} sceneOptions Array of options objects: {\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @return {Array<THREE.Matrix4>}\n     */\n    static buildScenes(splatBuffers, sceneOptions) {\n        const scenes = [];\n        scenes.length = splatBuffers.length;\n        for (let i = 0; i < splatBuffers.length; i++) {\n            const splatBuffer = splatBuffers[i];\n            const options = sceneOptions[i] || {};\n            let positionArray = options['position'] || [0, 0, 0];\n            let rotationArray = options['rotation'] || [0, 0, 0, 1];\n            let scaleArray = options['scale'] || [1, 1, 1];\n            const position = new THREE.Vector3().fromArray(positionArray);\n            const rotation = new THREE.Quaternion().fromArray(rotationArray);\n            const scale = new THREE.Vector3().fromArray(scaleArray);\n            scenes[i] = SplatMesh.createScene(splatBuffer, position, rotation, scale, options.splatAlphaRemovalThreshold || 1);\n        }\n        return scenes;\n    }\n\n    static createScene(splatBuffer, position, rotation, scale, minimumAlpha) {\n        return new SplatScene(splatBuffer, position, rotation, scale, minimumAlpha);\n    }\n\n    /**\n     * Build data structures that map global splat indexes (based on a unified index across all splat buffers) to\n     * local data within a single scene.\n     * @param {Array<SplatBuffer>} splatBuffers Instances of SplatBuffer off which to build the maps\n     * @return {object}\n     */\n    static buildSplatIndexMaps(splatBuffers) {\n        const localSplatIndexMap = [];\n        const sceneIndexMap = [];\n        let totalSplatCount = 0;\n        for (let s = 0; s < splatBuffers.length; s++) {\n            const splatBuffer = splatBuffers[s];\n            const maxSplatCount = splatBuffer.getMaxSplatCount();\n            for (let i = 0; i < maxSplatCount; i++) {\n                localSplatIndexMap[totalSplatCount] = i;\n                sceneIndexMap[totalSplatCount] = s;\n                totalSplatCount++;\n            }\n        }\n        return {\n            localSplatIndexMap,\n            sceneIndexMap\n        };\n    }\n\n    /**\n     * Build an instance of SplatTree (a specialized octree) for the given splat mesh.\n     * @param {Array<number>} minAlphas Array of minimum splat slphas for each scene\n     * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\n     *                                            builder worker starts and finishes.\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n     *                                           the format produced by the splat tree builder worker starts and ends.\n     * @return {SplatTree}\n     */\n     buildSplatTree = function(minAlphas = [], onSplatTreeIndexesUpload, onSplatTreeConstruction) {\n        return new Promise((resolve) => {\n            this.disposeSplatTree();\n            // TODO: expose SplatTree constructor parameters (maximumDepth and maxCentersPerNode) so that they can\n            // be configured on a per-scene basis\n            this.baseSplatTree = new SplatTree(8, 1000);\n            const buildStartTime = performance.now();\n            const splatColor = new THREE.Vector4();\n            this.baseSplatTree.processSplatMesh(this, (splatIndex) => {\n                this.getSplatColor(splatIndex, splatColor);\n                const sceneIndex = this.getSceneIndexForSplat(splatIndex);\n                const minAlpha = minAlphas[sceneIndex] || 1;\n                return splatColor.w >= minAlpha;\n            }, onSplatTreeIndexesUpload, onSplatTreeConstruction)\n            .then(() => {\n                const buildTime = performance.now() - buildStartTime;\n                console.log('SplatTree build: ' + buildTime + ' ms');\n                if (this.disposed) {\n                    resolve();\n                } else {\n\n                    this.splatTree = this.baseSplatTree;\n                    this.baseSplatTree = null;\n\n                    let leavesWithVertices = 0;\n                    let avgSplatCount = 0;\n                    let maxSplatCount = 0;\n                    let nodeCount = 0;\n\n                    this.splatTree.visitLeaves((node) => {\n                        const nodeSplatCount = node.data.indexes.length;\n                        if (nodeSplatCount > 0) {\n                            avgSplatCount += nodeSplatCount;\n                            maxSplatCount = Math.max(maxSplatCount, nodeSplatCount);\n                            nodeCount++;\n                            leavesWithVertices++;\n                        }\n                    });\n                    console.log(`SplatTree leaves: ${this.splatTree.countLeaves()}`);\n                    console.log(`SplatTree leaves with splats:${leavesWithVertices}`);\n                    avgSplatCount = avgSplatCount / nodeCount;\n                    console.log(`Avg splat count per node: ${avgSplatCount}`);\n                    console.log(`Total splat count: ${this.getSplatCount()}`);\n                    resolve();\n                }\n            });\n        });\n    };\n\n    /**\n     * Construct this instance of SplatMesh.\n     * @param {Array<SplatBuffer>} splatBuffers The base splat data, instances of SplatBuffer\n     * @param {Array<object>} sceneOptions Dynamic options for each scene {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     * }\n     * @param {boolean} keepSceneTransforms For a scene that already exists and is being overwritten, this flag\n     *                                      says to keep the transform from the existing scene.\n     * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\n     * @param {function} onSplatTreeIndexesUpload Function to be called when the upload of splat centers to the splat tree\n     *                                            builder worker starts and finishes.\n     * @param {function} onSplatTreeConstruction Function to be called when the conversion of the local splat tree from\n     *                                           the format produced by the splat tree builder worker starts and ends.\n     * @return {object} Object containing info about the splats that are updated\n     */\n    build(splatBuffers, sceneOptions, keepSceneTransforms = true, finalBuild = false,\n          onSplatTreeIndexesUpload, onSplatTreeConstruction) {\n\n        this.sceneOptions = sceneOptions;\n        this.finalBuild = finalBuild;\n\n        const maxSplatCount = SplatMesh.getTotalMaxSplatCountForSplatBuffers(splatBuffers);\n\n        const newScenes = SplatMesh.buildScenes(splatBuffers, sceneOptions);\n        if (keepSceneTransforms) {\n            for (let i = 0; i < this.scenes.length && i < newScenes.length; i++) {\n                const newScene = newScenes[i];\n                const existingScene = this.getScene(i);\n                newScene.copyTransformData(existingScene);\n            }\n        }\n        this.scenes = newScenes;\n\n        let splatBuffersChanged = false;\n        if (splatBuffers.length !== this.lastBuildScenes.length) {\n            splatBuffersChanged = true;\n        } else {\n            for (let i = 0; i < splatBuffers.length; i++) {\n                const splatBuffer = splatBuffers[i];\n                if (splatBuffer !== this.lastBuildScenes[i].splatBuffer) {\n                    splatBuffersChanged = true;\n                    break;\n                }\n            }\n        }\n\n        let isUpdateBuild = true;\n        if (this.scenes.length !== 1 ||\n            this.lastBuildSceneCount !== this.scenes.length ||\n            this.lastBuildMaxSplatCount !== maxSplatCount ||\n            splatBuffersChanged) {\n                isUpdateBuild = false;\n       }\n\n       if (!isUpdateBuild) {\n            this.boundingBox = new THREE.Box3();\n            this.maxSplatDistanceFromSceneCenter = 0;\n            this.visibleRegionBufferRadius = 0;\n            this.visibleRegionRadius = 0;\n            this.visibleRegionFadeStartRadius = 0;\n            this.firstRenderTime = -1;\n            this.lastBuildScenes = [];\n            this.lastBuildSplatCount = 0;\n            this.lastBuildMaxSplatCount = 0;\n            this.disposeMeshData();\n            this.geometry = SplatMesh.buildGeomtery(maxSplatCount);\n            this.material = SplatMesh.buildMaterial(this.dynamicMode, this.antialiased,\n                                                    this.maxScreenSpaceSplatSize, this.splatScale, this.pointCloudModeEnabled);\n            const indexMaps = SplatMesh.buildSplatIndexMaps(splatBuffers);\n            this.globalSplatIndexToLocalSplatIndexMap = indexMaps.localSplatIndexMap;\n            this.globalSplatIndexToSceneIndexMap = indexMaps.sceneIndexMap;\n        }\n\n        if (this.enableDistancesComputationOnGPU) this.setupDistancesComputationTransformFeedback();\n        this.resetGPUDataFromSplatBuffers(isUpdateBuild);\n\n        for (let i = 0; i < this.scenes.length; i++) {\n            this.lastBuildScenes[i] = this.scenes[i];\n        }\n\n        const buildResults = {\n            'from': this.lastBuildSplatCount,\n            'to': this.getSplatCount() - 1,\n            'count': this.getSplatCount() - this.lastBuildSplatCount\n        };\n        if (!this.enableDistancesComputationOnGPU) {\n            buildResults.centers = this.integerBasedDistancesComputation ?\n                                   this.getIntegerCenters(true, isUpdateBuild) :\n                                   this.getFloatCenters(true, isUpdateBuild);\n            buildResults.transformIndexes = this.getTransformIndexes(isUpdateBuild);\n        }\n\n        this.lastBuildSplatCount = this.getSplatCount();\n        this.lastBuildMaxSplatCount = this.getMaxSplatCount();\n        this.lastBuildSceneCount = this.scenes.length;\n\n        if (finalBuild && this.scenes.length > 0) {\n            this.buildSplatTree(sceneOptions.map(options => options.splatAlphaRemovalThreshold || 1),\n                                onSplatTreeIndexesUpload, onSplatTreeConstruction)\n            .then(() => {\n                if (this.onSplatTreeReadyCallback) this.onSplatTreeReadyCallback(this.splatTree);\n            });\n        }\n\n        this.visible = (this.scenes.length > 0);\n\n        return buildResults;\n    }\n\n    /**\n     * Dispose all resources held by the splat mesh\n     */\n    dispose() {\n        this.disposeMeshData();\n        this.disposeTextures();\n        this.disposeSplatTree();\n        if (this.enableDistancesComputationOnGPU) {\n            if (this.computeDistancesOnGPUSyncTimeout) {\n                clearTimeout(this.computeDistancesOnGPUSyncTimeout);\n                this.computeDistancesOnGPUSyncTimeout = null;\n            }\n            this.disposeDistancesComputationGPUResources();\n        }\n        this.scenes = [];\n        this.distancesTransformFeedback = {\n            'id': null,\n            'vertexShader': null,\n            'fragmentShader': null,\n            'program': null,\n            'centersBuffer': null,\n            'transformIndexesBuffer': null,\n            'outDistancesBuffer': null,\n            'centersLoc': -1,\n            'modelViewProjLoc': -1,\n            'transformIndexesLoc': -1,\n            'transformsLocs': []\n        };\n        this.renderer = null;\n\n        this.globalSplatIndexToLocalSplatIndexMap = [];\n        this.globalSplatIndexToSceneIndexMap = [];\n\n        this.lastBuildSplatCount = 0;\n        this.lastBuildScenes = [];\n        this.lastBuildMaxSplatCount = 0;\n        this.lastBuildSceneCount = 0;\n        this.firstRenderTime = -1;\n        this.finalBuild = false;\n\n        this.webGLUtils = null;\n\n        this.boundingBox = new THREE.Box3();\n        this.calculatedSceneCenter = new THREE.Vector3();\n        this.maxSplatDistanceFromSceneCenter = 0;\n        this.visibleRegionBufferRadius = 0;\n        this.visibleRegionRadius = 0;\n        this.visibleRegionFadeStartRadius = 0;\n        this.visibleRegionChanging = false;\n\n        this.splatScale = 1.0;\n        this.pointCloudModeEnabled = false;\n\n        this.disposed = true;\n        this.lastRenderer = null;\n        this.visible = false;\n    }\n\n    /**\n     * Dispose of only the Three.js mesh resources (geometry, material, and texture)\n     */\n    disposeMeshData() {\n        if (this.geometry && this.geometry !== dummyGeometry) {\n            this.geometry.dispose();\n            this.geometry = null;\n        }\n        if (this.material) {\n            this.material.dispose();\n            this.material = null;\n        }\n    }\n\n    disposeTextures() {\n        for (let textureKey in this.splatDataTextures) {\n            if (this.splatDataTextures.hasOwnProperty(textureKey)) {\n                const textureContainer = this.splatDataTextures[textureKey];\n                if (textureContainer.texture) {\n                    textureContainer.texture.dispose();\n                    textureContainer.texture = null;\n                }\n            }\n        }\n        this.splatDataTextures = null;\n    }\n\n    disposeSplatTree() {\n        if (this.splatTree) {\n            this.splatTree.dispose();\n            this.splatTree = null;\n        } else if (this.baseSplatTree) {\n            this.baseSplatTree.dispose();\n            this.baseSplatTree = null;\n        }\n    }\n\n    getSplatTree() {\n        return this.splatTree;\n    }\n\n    onSplatTreeReady(callback) {\n        this.onSplatTreeReadyCallback = callback;\n    }\n    /**\n     * Refresh data textures and GPU buffers for splat distance pre-computation with data from the splat buffers for this mesh.\n     * @param {boolean} isUpdateBuild Specify whether or not to only update for splats that have been added since the last build.\n     */\n    resetGPUDataFromSplatBuffers(isUpdateBuild) {\n        this.uploadSplatDataToTextures(isUpdateBuild);\n        if (this.enableDistancesComputationOnGPU) {\n            this.updateGPUCentersBufferForDistancesComputation(isUpdateBuild);\n            this.updateGPUTransformIndexesBufferForDistancesComputation(isUpdateBuild);\n        }\n    }\n\n    static computeTextureUpdateRegion(startSplat, endSplat, textureWidth, textureHeight, elementsPerTexel, elementsPerSplat) {\n        const texelsPerSplat = elementsPerSplat / elementsPerTexel;\n\n        const startSplatTexels = startSplat * texelsPerSplat;\n        const startRow = Math.floor(startSplatTexels / textureWidth);\n        const startRowElement = startRow * textureWidth * elementsPerTexel;\n\n        const endSplatTexels = endSplat * texelsPerSplat;\n        const endRow = Math.floor(endSplatTexels / textureWidth);\n        const endRowEndElement = endRow * textureWidth * elementsPerTexel + (textureWidth * elementsPerTexel);\n\n        return {\n            'dataStart': startRowElement,\n            'dataEnd': endRowEndElement,\n            'startRow': startRow,\n            'endRow': endRow\n        };\n    }\n\n     updateDataTexture(paddedData, textureDesc, textureProps, elementsPerTexel, elementsPerSplat, bytesPerElement) {\n        const splatCount = this.getSplatCount();\n        const gl = this.renderer.getContext();\n        const updateRegion = SplatMesh.computeTextureUpdateRegion(this.lastBuildSplatCount, splatCount - 1, textureDesc.size.x,\n                                                                  textureDesc.size.y, elementsPerTexel, elementsPerSplat);\n        const updateElementCount = updateRegion.dataEnd - updateRegion.dataStart;\n        const updateDataView = new paddedData.constructor(paddedData.buffer,\n                                                          updateRegion.dataStart * bytesPerElement, updateElementCount);\n        const updateHeight = updateRegion.endRow - updateRegion.startRow + 1;\n        const dataTexture = textureDesc.texture;\n        const glType = this.webGLUtils.convert(dataTexture.type);\n        const glFormat = this.webGLUtils.convert(dataTexture.format, dataTexture.colorSpace);\n        const currentTexture = gl.getParameter(gl.TEXTURE_BINDING_2D);\n        gl.bindTexture(gl.TEXTURE_2D, textureProps.__webglTexture);\n        gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, updateRegion.startRow,\n                         textureDesc.size.x, updateHeight, glFormat, glType, updateDataView);\n        gl.bindTexture(gl.TEXTURE_2D, currentTexture);\n    }\n\n    /**\n     * Refresh data textures with data from the splat buffers for this mesh.\n     * @param {boolean} isUpdateBuild Specify whether or not to only update for splats that have been added since the last build.\n     */\n    uploadSplatDataToTextures(isUpdateBuild) {\n\n        this.checkForMultiSceneUpdateCondition(isUpdateBuild, 'uploadSplatDataToTextures', 'isUpdateBuild');\n\n        const COVARIANCES_ELEMENTS_PER_TEXEL = 2;\n        const CENTER_COLORS_ELEMENTS_PER_TEXEL = 4;\n        const TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL = 1;\n\n        const maxSplatCount = this.getMaxSplatCount();\n        const splatCount = this.getSplatCount();\n\n        const updateCenterColorsPaddedData = (to, from, centers, colors, paddedCenterColors) => {\n            for (let c = to; c < from; c++) {\n                const colorsBase = c * 4;\n                const centersBase = c * 3;\n                const centerColorsBase = c * 4;\n                paddedCenterColors[centerColorsBase] = rgbaArrayToInteger(colors, colorsBase);\n                paddedCenterColors[centerColorsBase + 1] = uintEncodedFloat(centers[centersBase]);\n                paddedCenterColors[centerColorsBase + 2] = uintEncodedFloat(centers[centersBase + 1]);\n                paddedCenterColors[centerColorsBase + 3] = uintEncodedFloat(centers[centersBase + 2]);\n            }\n        };\n\n        const computeDataTextureSize = (elementsPerTexel, elementsPerSplatl) => {\n            const texSize = new THREE.Vector2(4096, 1024);\n            while (texSize.x * texSize.y * elementsPerTexel < maxSplatCount * elementsPerSplatl) texSize.y *= 2;\n            return texSize;\n        };\n\n        if (!isUpdateBuild) {\n\n            this.disposeTextures();\n\n            const covariances = new Float32Array(maxSplatCount * COVARIANCES_ELEMENTS_PER_SPLAT);\n            const centers = new Float32Array(maxSplatCount * 3);\n            const colors = new Uint8Array(maxSplatCount * 4);\n            this.fillSplatDataArrays(covariances, centers, colors);\n\n            // set up covariances data texture\n            const covTexSize = computeDataTextureSize(COVARIANCES_ELEMENTS_PER_TEXEL, 6);\n            let CovariancesDataType = this.halfPrecisionCovariancesOnGPU ? Uint16Array : Float32Array;\n            let covariancesTextureType = this.halfPrecisionCovariancesOnGPU ? THREE.HalfFloatType : THREE.FloatType;\n            const paddedCovariances = new CovariancesDataType(covTexSize.x * covTexSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\n            paddedCovariances.set(covariances);\n            const covTex = new THREE.DataTexture(paddedCovariances, covTexSize.x, covTexSize.y, THREE.RGFormat, covariancesTextureType);\n            covTex.needsUpdate = true;\n            this.material.uniforms.covariancesTexture.value = covTex;\n            this.material.uniforms.covariancesTextureSize.value.copy(covTexSize);\n\n            // set up centers/colors data texture\n            const centersColsTexSize = computeDataTextureSize(CENTER_COLORS_ELEMENTS_PER_TEXEL, 4);\n            const paddedCentersCols = new Uint32Array(centersColsTexSize.x * centersColsTexSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL);\n            updateCenterColorsPaddedData(0, splatCount, centers, colors, paddedCentersCols);\n            const centersColsTex = new THREE.DataTexture(paddedCentersCols, centersColsTexSize.x, centersColsTexSize.y,\n                                                         THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\n            centersColsTex.internalFormat = 'RGBA32UI';\n            centersColsTex.needsUpdate = true;\n            this.material.uniforms.centersColorsTexture.value = centersColsTex;\n            this.material.uniforms.centersColorsTextureSize.value.copy(centersColsTexSize);\n            this.material.uniformsNeedUpdate = true;\n\n            this.splatDataTextures = {\n                'baseData': {\n                    'covariances': covariances,\n                    'centers': centers,\n                    'colors': colors\n                },\n                'covariances': {\n                    'data': paddedCovariances,\n                    'texture': covTex,\n                    'size': covTexSize\n                },\n                'centerColors': {\n                    'data': paddedCentersCols,\n                    'texture': centersColsTex,\n                    'size': centersColsTexSize\n                }\n            };\n\n            if (this.dynamicMode) {\n                const transformIndexesTexSize = computeDataTextureSize(TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL, 4);\n                const paddedTransformIndexes = new Uint32Array(transformIndexesTexSize.x *\n                                                               transformIndexesTexSize.y * TRANSFORM_INDEXES_ELEMENTS_PER_TEXEL);\n                for (let c = 0; c < splatCount; c++) paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\n                const transformIndexesTexture = new THREE.DataTexture(paddedTransformIndexes, transformIndexesTexSize.x,\n                                                                      transformIndexesTexSize.y, THREE.RedIntegerFormat,\n                                                                      THREE.UnsignedIntType);\n                transformIndexesTexture.internalFormat = 'R32UI';\n                transformIndexesTexture.needsUpdate = true;\n                this.material.uniforms.transformIndexesTexture.value = transformIndexesTexture;\n                this.material.uniforms.transformIndexesTextureSize.value.copy(transformIndexesTexSize);\n                this.material.uniformsNeedUpdate = true;\n                this.splatDataTextures['tansformIndexes'] = {\n                    'data': paddedTransformIndexes,\n                    'texture': transformIndexesTexture,\n                    'size': transformIndexesTexSize\n                };\n            }\n        } else {\n\n            this.fillSplatDataArrays(this.splatDataTextures.baseData.covariances,\n                                     this.splatDataTextures.baseData.centers, this.splatDataTextures.baseData.colors, undefined, true);\n\n            const covariancesTextureDescriptor = this.splatDataTextures['covariances'];\n            const paddedCovariances = covariancesTextureDescriptor.data;\n            const covariancesTexture = covariancesTextureDescriptor.texture;\n            const covarancesStartSplat = this.lastBuildSplatCount * COVARIANCES_ELEMENTS_PER_SPLAT;\n            const covariancesEndSplat = splatCount * COVARIANCES_ELEMENTS_PER_SPLAT;\n            for (let i = covarancesStartSplat; i < covariancesEndSplat; i++) {\n                const covariance = this.splatDataTextures.baseData.covariances[i];\n                paddedCovariances[i] = covariance;\n            }\n            const covariancesTextureProps = this.renderer ? this.renderer.properties.get(covariancesTexture) : null;\n            if (!covariancesTextureProps || !covariancesTextureProps.__webglTexture) {\n                covariancesTexture.needsUpdate = true;\n            } else {\n                const covaranceBytesPerElement = this.halfPrecisionCovariancesOnGPU ? 2 : 4;\n                this.updateDataTexture(paddedCovariances, covariancesTextureDescriptor, covariancesTextureProps,\n                                       COVARIANCES_ELEMENTS_PER_TEXEL, COVARIANCES_ELEMENTS_PER_SPLAT, covaranceBytesPerElement);\n            }\n\n            const centerColorsTextureDescriptor = this.splatDataTextures['centerColors'];\n            const paddedCenterColors = centerColorsTextureDescriptor.data;\n            const centerColorsTexture = centerColorsTextureDescriptor.texture;\n            updateCenterColorsPaddedData(this.lastBuildSplatCount, splatCount, this.splatDataTextures.baseData.centers,\n                                         this.splatDataTextures.baseData.colors, paddedCenterColors);\n            const centerColorsTextureProps = this.renderer ? this.renderer.properties.get(centerColorsTexture) : null;\n            if (!centerColorsTextureProps || !centerColorsTextureProps.__webglTexture) {\n                centerColorsTexture.needsUpdate = true;\n            } else {\n                this.updateDataTexture(paddedCenterColors, centerColorsTextureDescriptor, centerColorsTextureProps,\n                                       CENTER_COLORS_ELEMENTS_PER_TEXEL, CENTER_COLORS_ELEMENTS_PER_SPLAT, 4);\n            }\n\n            if (this.dynamicMode) {\n                const transformIndexesTexDesc = this.splatDataTextures['tansformIndexes'];\n                const paddedTransformIndexes = transformIndexesTexDesc.data;\n                for (let c = this.lastBuildSplatCount; c < splatCount; c++) {\n                    paddedTransformIndexes[c] = this.globalSplatIndexToSceneIndexMap[c];\n                }\n\n                const paddedTransformIndexesTexture = transformIndexesTexDesc.texture;\n                const transformIndexesTextureProps = this.renderer ? this.renderer.properties.get(paddedTransformIndexesTexture) : null;\n                if (!transformIndexesTextureProps || !transformIndexesTextureProps.__webglTexture) {\n                    paddedTransformIndexesTexture.needsUpdate = true;\n                } else {\n                    this.updateDataTexture(paddedTransformIndexes, transformIndexesTexDesc, transformIndexesTextureProps, 1, 1, 1);\n                }\n            }\n        }\n\n        this.updateVisibleRegion(isUpdateBuild);\n    }\n\n    updateVisibleRegion(isUpdateBuild) {\n        const splatCount = this.getSplatCount();\n        const tempCenter = new THREE.Vector3();\n        if (!isUpdateBuild) {\n            const avgCenter = new THREE.Vector3();\n            this.scenes.forEach((scene) => {\n                avgCenter.add(scene.splatBuffer.sceneCenter);\n            });\n            avgCenter.multiplyScalar(1.0 / this.scenes.length);\n            this.calculatedSceneCenter.copy(avgCenter);\n            this.material.uniforms.sceneCenter.value.copy(this.calculatedSceneCenter);\n            this.material.uniformsNeedUpdate = true;\n        }\n\n        const startSplatFormMaxDistanceCalc = isUpdateBuild ? this.lastBuildSplatCount : 0;\n        for (let i = startSplatFormMaxDistanceCalc; i < splatCount; i++) {\n            this.getSplatCenter(i, tempCenter, false);\n            const distFromCSceneCenter = tempCenter.sub(this.calculatedSceneCenter).length();\n            if (distFromCSceneCenter > this.maxSplatDistanceFromSceneCenter) this.maxSplatDistanceFromSceneCenter = distFromCSceneCenter;\n        }\n\n        if (this.maxSplatDistanceFromSceneCenter - this.visibleRegionBufferRadius > VISIBLE_REGION_EXPANSION_DELTA) {\n            this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\n            this.visibleRegionRadius = Math.max(this.visibleRegionBufferRadius - VISIBLE_REGION_EXPANSION_DELTA, 0.0);\n        }\n        if (this.finalBuild) this.visibleRegionRadius = this.visibleRegionBufferRadius = this.maxSplatDistanceFromSceneCenter;\n        this.updateVisibleRegionFadeDistance();\n    }\n\n    updateVisibleRegionFadeDistance(sceneRevealMode = SceneRevealMode.Default) {\n        const fastFadeRate = SCENE_FADEIN_RATE_FAST;\n        const gradualFadeRate = SCENE_FADEIN_RATE_GRADUAL;\n        const defaultFadeInRate = this.finalBuild ? fastFadeRate : gradualFadeRate;\n        const fadeInRate = sceneRevealMode === SceneRevealMode.Default ? defaultFadeInRate : gradualFadeRate;\n        this.visibleRegionFadeStartRadius = (this.visibleRegionRadius - this.visibleRegionFadeStartRadius) *\n                                             fadeInRate + this.visibleRegionFadeStartRadius;\n        const fadeInPercentage = (this.visibleRegionBufferRadius > 0) ?\n                                 (this.visibleRegionFadeStartRadius / this.visibleRegionBufferRadius) : 0;\n        const fadeInComplete = fadeInPercentage > 0.99;\n        const shaderFadeInComplete = (fadeInComplete || sceneRevealMode === SceneRevealMode.Instant) ? 1 : 0;\n\n        this.material.uniforms.visibleRegionFadeStartRadius.value = this.visibleRegionFadeStartRadius;\n        this.material.uniforms.visibleRegionRadius.value = this.visibleRegionRadius;\n        this.material.uniforms.firstRenderTime.value = this.firstRenderTime;\n        this.material.uniforms.currentTime.value = performance.now();\n        this.material.uniforms.fadeInComplete.value = shaderFadeInComplete;\n        this.material.uniformsNeedUpdate = true;\n        this.visibleRegionChanging = !fadeInComplete;\n    }\n\n    /**\n     * Set the indexes of splats that should be rendered; should be sorted in desired render order.\n     * @param {Uint32Array} globalIndexes Sorted index list of splats to be rendered\n     * @param {number} renderSplatCount Total number of splats to be rendered. Necessary because we may not want to render\n     *                                  every splat.\n     */\n    updateRenderIndexes(globalIndexes, renderSplatCount) {\n        const geometry = this.geometry;\n        geometry.attributes.splatIndex.set(globalIndexes);\n        geometry.attributes.splatIndex.needsUpdate = true;\n        if (renderSplatCount > 0 && this.firstRenderTime === -1) this.firstRenderTime = performance.now();\n        geometry.instanceCount = renderSplatCount;\n    }\n\n    /**\n     * Update the transforms for each scene in this splat mesh from their individual components (position,\n     * quaternion, and scale)\n     */\n    updateTransforms() {\n        for (let i = 0; i < this.scenes.length; i++) {\n            const scene = this.getScene(i);\n            scene.updateTransform();\n        }\n    }\n\n    updateUniforms = function() {\n\n        const viewport = new THREE.Vector2();\n\n        return function(renderDimensions, cameraFocalLengthX, cameraFocalLengthY,\n                        orthographicMode, orthographicZoom, inverseFocalAdjustment) {\n            const splatCount = this.getSplatCount();\n            if (splatCount > 0) {\n                viewport.set(renderDimensions.x * this.devicePixelRatio,\n                             renderDimensions.y * this.devicePixelRatio);\n                this.material.uniforms.viewport.value.copy(viewport);\n                this.material.uniforms.basisViewport.value.set(1.0 / viewport.x, 1.0 / viewport.y);\n                this.material.uniforms.focal.value.set(cameraFocalLengthX, cameraFocalLengthY);\n                this.material.uniforms.orthographicMode.value = orthographicMode ? 1 : 0;\n                this.material.uniforms.orthoZoom.value = orthographicZoom;\n                this.material.uniforms.inverseFocalAdjustment.value = inverseFocalAdjustment;\n                if (this.dynamicMode) {\n                    for (let i = 0; i < this.scenes.length; i++) {\n                        this.material.uniforms.transforms.value[i].copy(this.getScene(i).transform);\n                    }\n                }\n                this.material.uniformsNeedUpdate = true;\n            }\n        };\n\n    }();\n\n    setSplatScale(splatScale = 1) {\n        this.splatScale = splatScale;\n        this.material.uniforms.splatScale.value = splatScale;\n        this.material.uniformsNeedUpdate = true;\n    }\n\n    getSplatScale() {\n        return this.splatScale;\n    }\n\n    setPointCloudModeEnabled(enabled) {\n        this.pointCloudModeEnabled = enabled;\n        this.material.uniforms.pointCloudModeEnabled.value = enabled ? 1 : 0;\n        this.material.uniformsNeedUpdate = true;\n    }\n\n    getPointCloudModeEnabled() {\n        return this.pointCloudModeEnabled;\n    }\n\n    getSplatDataTextures() {\n        return this.splatDataTextures;\n    }\n\n    getSplatCount() {\n        return SplatMesh.getTotalSplatCountForScenes(this.scenes);\n    }\n\n    static getTotalSplatCountForScenes(scenes) {\n        let totalSplatCount = 0;\n        for (let scene of scenes) {\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getSplatCount();\n        }\n        return totalSplatCount;\n    }\n\n    static getTotalSplatCountForSplatBuffers(splatBuffers) {\n        let totalSplatCount = 0;\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getSplatCount();\n        return totalSplatCount;\n    }\n\n    getMaxSplatCount() {\n        return SplatMesh.getTotalMaxSplatCountForScenes(this.scenes);\n    }\n\n    static getTotalMaxSplatCountForScenes(scenes) {\n        let totalSplatCount = 0;\n        for (let scene of scenes) {\n            if (scene && scene.splatBuffer) totalSplatCount += scene.splatBuffer.getMaxSplatCount();\n        }\n        return totalSplatCount;\n    }\n\n    static getTotalMaxSplatCountForSplatBuffers(splatBuffers) {\n        let totalSplatCount = 0;\n        for (let splatBuffer of splatBuffers) totalSplatCount += splatBuffer.getMaxSplatCount();\n        return totalSplatCount;\n    }\n\n    disposeDistancesComputationGPUResources() {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        if (this.distancesTransformFeedback.vao) {\n            gl.deleteVertexArray(this.distancesTransformFeedback.vao);\n            this.distancesTransformFeedback.vao = null;\n        }\n        if (this.distancesTransformFeedback.program) {\n            gl.deleteProgram(this.distancesTransformFeedback.program);\n            gl.deleteShader(this.distancesTransformFeedback.vertexShader);\n            gl.deleteShader(this.distancesTransformFeedback.fragmentShader);\n            this.distancesTransformFeedback.program = null;\n            this.distancesTransformFeedback.vertexShader = null;\n            this.distancesTransformFeedback.fragmentShader = null;\n        }\n        this.disposeDistancesComputationGPUBufferResources();\n        if (this.distancesTransformFeedback.id) {\n            gl.deleteTransformFeedback(this.distancesTransformFeedback.id);\n            this.distancesTransformFeedback.id = null;\n        }\n    }\n\n    disposeDistancesComputationGPUBufferResources() {\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        if (this.distancesTransformFeedback.centersBuffer) {\n            this.distancesTransformFeedback.centersBuffer = null;\n            gl.deleteBuffer(this.distancesTransformFeedback.centersBuffer);\n        }\n        if (this.distancesTransformFeedback.outDistancesBuffer) {\n            gl.deleteBuffer(this.distancesTransformFeedback.outDistancesBuffer);\n            this.distancesTransformFeedback.outDistancesBuffer = null;\n        }\n    }\n\n    /**\n     * Set the Three.js renderer used by this splat mesh\n     * @param {THREE.WebGLRenderer} renderer Instance of THREE.WebGLRenderer\n     */\n    setRenderer(renderer) {\n        if (renderer !== this.renderer) {\n            this.renderer = renderer;\n            const gl = this.renderer.getContext();\n            const extensions = new WebGLExtensions(gl);\n            const capabilities = new WebGLCapabilities(gl, extensions, {});\n            extensions.init(capabilities);\n            this.webGLUtils = new THREE.WebGLUtils(gl, extensions, capabilities);\n            if (this.enableDistancesComputationOnGPU && this.getSplatCount() > 0) {\n                this.setupDistancesComputationTransformFeedback();\n                this.updateGPUCentersBufferForDistancesComputation();\n                this.updateGPUTransformIndexesBufferForDistancesComputation();\n            }\n        }\n    }\n\n    setupDistancesComputationTransformFeedback = function() {\n\n        let currentMaxSplatCount;\n\n        return function() {\n            const maxSplatCount = this.getMaxSplatCount();\n\n            if (!this.renderer) return;\n\n            const rebuildGPUObjects = (this.lastRenderer !== this.renderer);\n            const rebuildBuffers = currentMaxSplatCount !== maxSplatCount;\n\n            if (!rebuildGPUObjects && !rebuildBuffers) return;\n\n            if (rebuildGPUObjects) {\n                this.disposeDistancesComputationGPUResources();\n            } else if (rebuildBuffers) {\n                this.disposeDistancesComputationGPUBufferResources();\n            }\n\n            const gl = this.renderer.getContext();\n\n            const createShader = (gl, type, source) => {\n                const shader = gl.createShader(type);\n                if (!shader) {\n                    console.error('Fatal error: gl could not create a shader object.');\n                    return null;\n                }\n\n                gl.shaderSource(shader, source);\n                gl.compileShader(shader);\n\n                const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n                if (!compiled) {\n                    let typeName = 'unknown';\n                    if (type === gl.VERTEX_SHADER) typeName = 'vertex shader';\n                    else if (type === gl.FRAGMENT_SHADER) typeName = 'fragement shader';\n                    const errors = gl.getShaderInfoLog(shader);\n                    console.error('Failed to compile ' + typeName + ' with these errors:' + errors);\n                    gl.deleteShader(shader);\n                    return null;\n                }\n\n                return shader;\n            };\n\n            let vsSource;\n            if (this.integerBasedDistancesComputation) {\n                vsSource =\n                `#version 300 es\n                in ivec4 center;\n                flat out int distance;`;\n                if (this.dynamicMode) {\n                    vsSource += `\n                        in uint transformIndex;\n                        uniform ivec4 transforms[${Constants.MaxScenes}];\n                        void main(void) {\n                            ivec4 transform = transforms[transformIndex];\n                            distance = center.x * transform.x + center.y * transform.y + center.z * transform.z + transform.w * center.w;\n                        }\n                    `;\n                } else {\n                    vsSource += `\n                        uniform ivec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    `;\n                }\n            } else {\n                vsSource =\n                `#version 300 es\n                in vec3 center;\n                flat out float distance;`;\n                if (this.dynamicMode) {\n                    vsSource += `\n                        in uint transformIndex;\n                        uniform mat4 transforms[${Constants.MaxScenes}];\n                        void main(void) {\n                            vec4 transformedCenter = transforms[transformIndex] * vec4(center, 1.0);\n                            distance = transformedCenter.z;\n                        }\n                    `;\n                } else {\n                    vsSource += `\n                        uniform vec3 modelViewProj;\n                        void main(void) {\n                            distance = center.x * modelViewProj.x + center.y * modelViewProj.y + center.z * modelViewProj.z;\n                        }\n                    `;\n                }\n            }\n\n            const fsSource =\n            `#version 300 es\n                precision lowp float;\n                out vec4 fragColor;\n                void main(){}\n            `;\n\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n            const currentProgramDeleted = currentProgram ? gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) : false;\n\n            if (rebuildGPUObjects) {\n                this.distancesTransformFeedback.vao = gl.createVertexArray();\n            }\n\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n            if (rebuildGPUObjects) {\n                const program = gl.createProgram();\n                const vertexShader = createShader(gl, gl.VERTEX_SHADER, vsSource);\n                const fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fsSource);\n                if (!vertexShader || !fragmentShader) {\n                    throw new Error('Could not compile shaders for distances computation on GPU.');\n                }\n                gl.attachShader(program, vertexShader);\n                gl.attachShader(program, fragmentShader);\n                gl.transformFeedbackVaryings(program, ['distance'], gl.SEPARATE_ATTRIBS);\n                gl.linkProgram(program);\n\n                const linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n                if (!linked) {\n                    const error = gl.getProgramInfoLog(program);\n                    console.error('Fatal error: Failed to link program: ' + error);\n                    gl.deleteProgram(program);\n                    gl.deleteShader(fragmentShader);\n                    gl.deleteShader(vertexShader);\n                    throw new Error('Could not link shaders for distances computation on GPU.');\n                }\n\n                this.distancesTransformFeedback.program = program;\n                this.distancesTransformFeedback.vertexShader = vertexShader;\n                this.distancesTransformFeedback.vertexShader = fragmentShader;\n            }\n\n            gl.useProgram(this.distancesTransformFeedback.program);\n\n            this.distancesTransformFeedback.centersLoc =\n                gl.getAttribLocation(this.distancesTransformFeedback.program, 'center');\n            if (this.dynamicMode) {\n                this.distancesTransformFeedback.transformIndexesLoc =\n                    gl.getAttribLocation(this.distancesTransformFeedback.program, 'transformIndex');\n                for (let i = 0; i < this.scenes.length; i++) {\n                    this.distancesTransformFeedback.transformsLocs[i] =\n                        gl.getUniformLocation(this.distancesTransformFeedback.program, `transforms[${i}]`);\n                }\n            } else {\n                this.distancesTransformFeedback.modelViewProjLoc =\n                    gl.getUniformLocation(this.distancesTransformFeedback.program, 'modelViewProj');\n            }\n\n            if (rebuildGPUObjects || rebuildBuffers) {\n                this.distancesTransformFeedback.centersBuffer = gl.createBuffer();\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n                if (this.integerBasedDistancesComputation) {\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\n                } else {\n                    gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 3, gl.FLOAT, false, 0, 0);\n                }\n\n                if (this.dynamicMode) {\n                    this.distancesTransformFeedback.transformIndexesBuffer = gl.createBuffer();\n                    gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\n                    gl.enableVertexAttribArray(this.distancesTransformFeedback.transformIndexesLoc);\n                    gl.vertexAttribIPointer(this.distancesTransformFeedback.transformIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\n                }\n            }\n\n            if (rebuildGPUObjects || rebuildBuffers) {\n                this.distancesTransformFeedback.outDistancesBuffer = gl.createBuffer();\n            }\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\n            gl.bufferData(gl.ARRAY_BUFFER, maxSplatCount * 4, gl.STATIC_READ);\n\n            if (rebuildGPUObjects) {\n                this.distancesTransformFeedback.id = gl.createTransformFeedback();\n            }\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\n\n            if (currentProgram && currentProgramDeleted !== true) gl.useProgram(currentProgram);\n            if (currentVao) gl.bindVertexArray(currentVao);\n\n            this.lastRenderer = this.renderer;\n            currentMaxSplatCount = maxSplatCount;\n        };\n\n    }();\n\n    /**\n     * Refresh GPU buffers used for computing splat distances with centers data from the scenes for this mesh.\n     * @param {boolean} isUpdateBuild Specify whether or not to only update for splats that have been added since the last build.\n     */\n    updateGPUCentersBufferForDistancesComputation(isUpdateBuild = false) {\n\n        this.checkForMultiSceneUpdateCondition(isUpdateBuild, 'updateGPUCentersBufferForDistancesComputation', 'isUpdateBuild');\n\n        if (!this.renderer) return;\n\n        const gl = this.renderer.getContext();\n\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n        const ArrayType = this.integerBasedDistancesComputation ? Uint32Array : Float32Array;\n        const attributeBytesPerCenter = this.integerBasedDistancesComputation ? 16 : 12;\n        const subBufferOffset = isUpdateBuild ? this.lastBuildSplatCount * attributeBytesPerCenter : 0;\n        const srcCenters = this.integerBasedDistancesComputation ?\n                           this.getIntegerCenters(true, isUpdateBuild) :\n                           this.getFloatCenters(false, isUpdateBuild);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n\n        if (isUpdateBuild) {\n            gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, srcCenters);\n        } else {\n            const maxArray = new ArrayType(this.getMaxSplatCount() * attributeBytesPerCenter);\n            maxArray.set(srcCenters);\n            gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\n        }\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        if (currentVao) gl.bindVertexArray(currentVao);\n    }\n\n    /**\n     * Refresh GPU buffers used for pre-computing splat distances with centers data from the scenes for this mesh.\n     * @param {boolean} isUpdateBuild Specify whether or not to only update for splats that have been added since the last build.\n     */\n    updateGPUTransformIndexesBufferForDistancesComputation(isUpdateBuild) {\n\n        if (!this.renderer || !this.dynamicMode) return;\n\n        const gl = this.renderer.getContext();\n\n        const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n        gl.bindVertexArray(this.distancesTransformFeedback.vao);\n\n        const subBufferOffset = isUpdateBuild ? this.lastBuildSplatCount * 4 : 0;\n        const transformIndexes = this.getTransformIndexes(isUpdateBuild);\n\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\n\n        if (isUpdateBuild) {\n            gl.bufferSubData(gl.ARRAY_BUFFER, subBufferOffset, transformIndexes);\n        } else {\n            const maxArray = new Uint32Array(this.getMaxSplatCount() * 4);\n            maxArray.set(transformIndexes);\n            gl.bufferData(gl.ARRAY_BUFFER, maxArray, gl.STATIC_DRAW);\n        }\n        gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n        if (currentVao) gl.bindVertexArray(currentVao);\n    }\n\n    /**\n     * Get a typed array containing a mapping from global splat indexes to their scene index.\n     * @param {boolean} isUpdateBuild Specify whether or not to only update for splats that have been added since the last build.\n     * @return {Uint32Array}\n     */\n    getTransformIndexes(isUpdateBuild) {\n\n        let transformIndexes;\n        if (isUpdateBuild) {\n            const splatCount = this.getSplatCount();\n            const fillCount = splatCount - this.lastBuildSplatCount;\n            transformIndexes = new Uint32Array(fillCount);\n            for (let i = this.lastBuildSplatCount; i < splatCount; i++) {\n                transformIndexes[i] = this.globalSplatIndexToSceneIndexMap[i];\n            }\n        } else {\n            transformIndexes = new Uint32Array(this.globalSplatIndexToSceneIndexMap.length);\n            transformIndexes.set(this.globalSplatIndexToSceneIndexMap);\n        }\n\n        return transformIndexes;\n    }\n\n    /**\n     * Fill 'array' with the transforms for each scene in this splat mesh.\n     * @param {Array} array Empty array to be filled with scene transforms. If not empty, contents will be overwritten.\n     */\n    fillTransformsArray = function() {\n\n        const tempArray = [];\n\n        return function(array) {\n            if (tempArray.length !== array.length) tempArray.length = array.length;\n            for (let i = 0; i < this.scenes.length; i++) {\n                const sceneTransform = this.getScene(i).transform;\n                const sceneTransformElements = sceneTransform.elements;\n                for (let j = 0; j < 16; j++) {\n                    tempArray[i * 16 + j] = sceneTransformElements[j];\n                }\n            }\n            array.set(tempArray);\n        };\n\n    }();\n\n    computeDistancesOnGPU = function() {\n\n        const tempMatrix = new THREE.Matrix4();\n\n        return function(modelViewProjMatrix, outComputedDistances) {\n            if (!this.renderer) return;\n\n            // console.time(\"gpu_compute_distances\");\n            const gl = this.renderer.getContext();\n\n            const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n            const currentProgram = gl.getParameter(gl.CURRENT_PROGRAM);\n            const currentProgramDeleted = currentProgram ? gl.getProgramParameter(currentProgram, gl.DELETE_STATUS) : false;\n\n            gl.bindVertexArray(this.distancesTransformFeedback.vao);\n            gl.useProgram(this.distancesTransformFeedback.program);\n\n            gl.enable(gl.RASTERIZER_DISCARD);\n\n            if (this.dynamicMode) {\n                for (let i = 0; i < this.scenes.length; i++) {\n                    tempMatrix.copy(this.getScene(i).transform);\n                    tempMatrix.premultiply(modelViewProjMatrix);\n\n                    if (this.integerBasedDistancesComputation) {\n                        const iTempMatrix = SplatMesh.getIntegerMatrixArray(tempMatrix);\n                        const iTransform = [iTempMatrix[2], iTempMatrix[6], iTempMatrix[10], iTempMatrix[14]];\n                        gl.uniform4i(this.distancesTransformFeedback.transformsLocs[i], iTransform[0], iTransform[1],\n                                                                                        iTransform[2], iTransform[3]);\n                    } else {\n                        gl.uniformMatrix4fv(this.distancesTransformFeedback.transformsLocs[i], false, tempMatrix.elements);\n                    }\n                }\n            } else {\n                if (this.integerBasedDistancesComputation) {\n                    const iViewProjMatrix = SplatMesh.getIntegerMatrixArray(modelViewProjMatrix);\n                    const iViewProj = [iViewProjMatrix[2], iViewProjMatrix[6], iViewProjMatrix[10]];\n                    gl.uniform3i(this.distancesTransformFeedback.modelViewProjLoc, iViewProj[0], iViewProj[1], iViewProj[2]);\n                } else {\n                    const viewProj = [modelViewProjMatrix.elements[2], modelViewProjMatrix.elements[6], modelViewProjMatrix.elements[10]];\n                    gl.uniform3f(this.distancesTransformFeedback.modelViewProjLoc, viewProj[0], viewProj[1], viewProj[2]);\n                }\n            }\n\n            gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.centersBuffer);\n            gl.enableVertexAttribArray(this.distancesTransformFeedback.centersLoc);\n            if (this.integerBasedDistancesComputation) {\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.centersLoc, 4, gl.INT, 0, 0);\n            } else {\n                gl.vertexAttribPointer(this.distancesTransformFeedback.centersLoc, 3, gl.FLOAT, false, 0, 0);\n            }\n\n            if (this.dynamicMode) {\n                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.transformIndexesBuffer);\n                gl.enableVertexAttribArray(this.distancesTransformFeedback.transformIndexesLoc);\n                gl.vertexAttribIPointer(this.distancesTransformFeedback.transformIndexesLoc, 1, gl.UNSIGNED_INT, 0, 0);\n            }\n\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, this.distancesTransformFeedback.id);\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, this.distancesTransformFeedback.outDistancesBuffer);\n\n            gl.beginTransformFeedback(gl.POINTS);\n            gl.drawArrays(gl.POINTS, 0, this.getSplatCount());\n            gl.endTransformFeedback();\n\n            gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, 0, null);\n            gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);\n\n            gl.disable(gl.RASTERIZER_DISCARD);\n\n            const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);\n            gl.flush();\n\n            const promise = new Promise((resolve) => {\n                const checkSync = () => {\n                    if (this.disposed) {\n                        resolve();\n                    } else {\n                        const timeout = 0;\n                        const bitflags = 0;\n                        const status = gl.clientWaitSync(sync, bitflags, timeout);\n                        switch (status) {\n                            case gl.TIMEOUT_EXPIRED:\n                                this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\n                                return this.computeDistancesOnGPUSyncTimeout;\n                            case gl.WAIT_FAILED:\n                                throw new Error('should never get here');\n                            default:\n                                this.computeDistancesOnGPUSyncTimeout = null;\n                                gl.deleteSync(sync);\n                                const currentVao = gl.getParameter(gl.VERTEX_ARRAY_BINDING);\n                                gl.bindVertexArray(this.distancesTransformFeedback.vao);\n                                gl.bindBuffer(gl.ARRAY_BUFFER, this.distancesTransformFeedback.outDistancesBuffer);\n                                gl.getBufferSubData(gl.ARRAY_BUFFER, 0, outComputedDistances);\n                                gl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n                                if (currentVao) gl.bindVertexArray(currentVao);\n\n                                // console.timeEnd(\"gpu_compute_distances\");\n\n                                resolve();\n                        }\n                    }\n                };\n                this.computeDistancesOnGPUSyncTimeout = setTimeout(checkSync);\n            });\n\n            if (currentProgram && currentProgramDeleted !== true) gl.useProgram(currentProgram);\n            if (currentVao) gl.bindVertexArray(currentVao);\n\n            return promise;\n        };\n\n    }();\n\n    /**\n     * Given a global splat index, return corresponding local data (splat buffer, index of splat in that splat\n     * buffer, and the corresponding transform)\n     * @param {number} globalIndex Global splat index\n     * @param {object} paramsObj Object in which to store local data\n     * @param {boolean} returnSceneTransform By default, the transform of the scene to which the splat at 'globalIndex' belongs will be\n     *                                       returned via the 'sceneTransform' property of 'paramsObj' only if the splat mesh is static.\n     *                                       If 'returnSceneTransform' is true, the 'sceneTransform' property will always contain the scene\n     *                                       transform, and if 'returnSceneTransform' is false, the 'sceneTransform' property will always\n     *                                       be null.\n     */\n    getLocalSplatParameters(globalIndex, paramsObj, returnSceneTransform) {\n        if (returnSceneTransform === undefined || returnSceneTransform === null) {\n            returnSceneTransform = this.dynamicMode ? false : true;\n        }\n        paramsObj.splatBuffer = this.getSplatBufferForSplat(globalIndex);\n        paramsObj.localIndex = this.getSplatLocalIndex(globalIndex);\n        paramsObj.sceneTransform = returnSceneTransform ? this.getSceneTransformForSplat(globalIndex) : null;\n    }\n\n    /**\n     * Fill arrays with splat data and apply transforms if appropriate. Each array is optional.\n     * @param {Float32Array} covariances Target storage for splat covariances\n     * @param {Float32Array} centers Target storage for splat centers\n     * @param {Uint8Array} colors Target storage for splat colors\n     * @param {boolean} applySceneTransform By default, scene transforms are applied to relevant splat data only if the splat mesh is\n     *                                      static. If 'applySceneTransform' is true, scene transforms will always be applied and if\n     *                                      it is false, they will never be applied. If undefined, the default behavior will apply.\n     * @param {boolean} isUpdateBuild Specify whether or not to only update for splats that have been added since the last build.\n     * @param {boolean} forceDestFromZero Force destination index to start at 0.\n     */\n    fillSplatDataArrays(covariances, centers, colors, applySceneTransform = undefined, isUpdateBuild, forceDestFromZero) {\n\n        this.checkForMultiSceneUpdateCondition(isUpdateBuild, 'fillSplatDataArrays', 'isUpdateBuild');\n\n        let destfrom = 0;\n        for (let i = 0; i < this.scenes.length; i++) {\n            if (applySceneTransform === undefined || applySceneTransform === null) {\n                applySceneTransform = this.dynamicMode ? false : true;\n            }\n\n            let localDestFrom = destfrom;\n            let srcFrom;\n            let srcTo;\n            if (isUpdateBuild) {\n                srcFrom = this.lastBuildSplatCount;\n                localDestFrom = forceDestFromZero ? 0 : srcFrom;\n            }\n\n            const scene = this.getScene(i);\n            const splatBuffer = scene.splatBuffer;\n            const sceneTransform = applySceneTransform ? scene.transform : null;\n            if (covariances) {\n                splatBuffer.fillSplatCovarianceArray(covariances, sceneTransform,\n                                                     srcFrom, srcTo, localDestFrom, this.halfPrecisionCovariancesOnGPU ? 1 : 0);\n            }\n            if (centers) splatBuffer.fillSplatCenterArray(centers, sceneTransform, srcFrom, srcTo, localDestFrom);\n            if (colors) splatBuffer.fillSplatColorArray(colors, scene.minimumAlpha, sceneTransform, srcFrom, srcTo, localDestFrom);\n            destfrom += splatBuffer.getSplatCount();\n        }\n    }\n\n    /**\n     * Convert splat centers, which are floating point values, to an array of integers and multiply\n     * each by 1000. Centers will get transformed as appropriate before conversion to integer.\n     * @param {number} padFour Enforce alignement of 4 by inserting a 1000 after every 3 values\n     * @param {boolean} isUpdateBuild Specify whether or not to only update for splats that have been added since the last build.\n     * @return {Int32Array}\n     */\n    getIntegerCenters(padFour = false, isUpdateBuild = false) {\n\n        this.checkForMultiSceneUpdateCondition(isUpdateBuild, 'getIntegerCenters', 'isUpdateBuild');\n\n        const splatCount = this.getSplatCount();\n        const fillCount = isUpdateBuild ? splatCount - this.lastBuildSplatCount : splatCount;\n        const floatCenters = new Float32Array(fillCount * 3);\n        this.fillSplatDataArrays(null, floatCenters, null, undefined, isUpdateBuild, isUpdateBuild);\n        let intCenters;\n        let componentCount = padFour ? 4 : 3;\n        intCenters = new Int32Array(fillCount * componentCount);\n        for (let i = 0; i < fillCount; i++) {\n            for (let t = 0; t < 3; t++) {\n                intCenters[i * componentCount + t] = Math.round(floatCenters[i * 3 + t] * 1000.0);\n            }\n            if (padFour) intCenters[i * componentCount + 3] = 1000;\n        }\n        return intCenters;\n    }\n\n    /**\n     * Returns an array of splat centers, transformed as appropriate, optionally padded.\n     * @param {number} padFour Enforce alignement of 4 by inserting a 1 after every 3 values\n     * @param {boolean} isUpdateBuild Specify whether or not to only update for splats that have been added since the last build.\n     * @return {Float32Array}\n     */\n    getFloatCenters(padFour = false, isUpdateBuild = false) {\n\n        this.checkForMultiSceneUpdateCondition(isUpdateBuild, 'getFloatCenters', 'isUpdateBuild');\n\n        const splatCount = this.getSplatCount();\n        const fillCount = isUpdateBuild ? splatCount - this.lastBuildSplatCount : splatCount;\n        const floatCenters = new Float32Array(fillCount * 3);\n        this.fillSplatDataArrays(null, floatCenters, null, undefined, isUpdateBuild, isUpdateBuild);\n        if (!padFour) return floatCenters;\n        let paddedFloatCenters = new Float32Array(fillCount * 4);\n        for (let i = 0; i < fillCount; i++) {\n            for (let t = 0; t < 3; t++) {\n                paddedFloatCenters[i * 4 + t] = floatCenters[i * 3 + t];\n            }\n            paddedFloatCenters[i * 4 + 3] = 1.0;\n        }\n        return paddedFloatCenters;\n    }\n\n    /**\n     * Get the center for a splat, transformed as appropriate.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector3} outCenter THREE.Vector3 instance in which to store splat center\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\n     *                                      'globalIndex' belongs will be applied to the splat center. If 'applySceneTransform' is true,\n     *                                      the scene transform will always be applied and if 'applySceneTransform' is false, the\n     *                                      scene transform will never be applied. If undefined, the default behavior will apply.\n     */\n    getSplatCenter = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outCenter, applySceneTransform) {\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\n            paramsObj.splatBuffer.getSplatCenter(paramsObj.localIndex, outCenter, paramsObj.sceneTransform);\n        };\n\n    }();\n\n    /**\n     * Get the scale and rotation for a splat, transformed as appropriate.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector3} outScale THREE.Vector3 instance in which to store splat scale\n     * @param {THREE.Quaternion} outRotation THREE.Quaternion instance in which to store splat rotation\n     * @param {boolean} applySceneTransform By default, if the splat mesh is static, the transform of the scene to which the splat at\n     *                                      'globalIndex' belongs will be applied to the splat scale and rotation. If\n     *                                      'applySceneTransform' is true, the scene transform will always be applied and if\n     *                                      'applySceneTransform' is false, the scene transform will never be applied. If undefined,\n     *                                      the default behavior will apply.\n     */\n    getSplatScaleAndRotation = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outScale, outRotation, applySceneTransform) {\n            this.getLocalSplatParameters(globalIndex, paramsObj, applySceneTransform);\n            paramsObj.splatBuffer.getSplatScaleAndRotation(paramsObj.localIndex, outScale, outRotation, paramsObj.sceneTransform);\n        };\n\n    }();\n\n    /**\n     * Get the color for a splat.\n     * @param {number} globalIndex Global index of splat\n     * @param {THREE.Vector4} outColor THREE.Vector4 instance in which to store splat color\n     */\n    getSplatColor = function() {\n\n        const paramsObj = {};\n\n        return function(globalIndex, outColor) {\n            this.getLocalSplatParameters(globalIndex, paramsObj);\n            paramsObj.splatBuffer.getSplatColor(paramsObj.localIndex, outColor, paramsObj.sceneTransform);\n        };\n\n    }();\n\n    /**\n     * Store the transform of the scene at 'sceneIndex' in 'outTransform'.\n     * @param {number} sceneIndex Index of the desired scene\n     * @param {THREE.Matrix4} outTransform Instance of THREE.Matrix4 in which to store the scene's transform\n     */\n    getSceneTransform(sceneIndex, outTransform) {\n        const scene = this.getScene(sceneIndex);\n        scene.updateTransform();\n        outTransform.copy(scene.transform);\n    }\n\n    /**\n     * Get the scene at 'sceneIndex'.\n     * @param {number} sceneIndex Index of the desired scene\n     * @return {SplatScene}\n     */\n    getScene(sceneIndex) {\n        if (sceneIndex < 0 || sceneIndex >= this.scenes.length) {\n            throw new Error('SplatMesh::getScene() -> Invalid scene index.');\n        }\n        return this.scenes[sceneIndex];\n    }\n\n    getSplatBufferForSplat(globalIndex) {\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).splatBuffer;\n    }\n\n    getSceneIndexForSplat(globalIndex) {\n        return this.globalSplatIndexToSceneIndexMap[globalIndex];\n    }\n\n    getSceneTransformForSplat(globalIndex) {\n        return this.getScene(this.globalSplatIndexToSceneIndexMap[globalIndex]).transform;\n    }\n\n    getSplatLocalIndex(globalIndex) {\n        return this.globalSplatIndexToLocalSplatIndexMap[globalIndex];\n    }\n\n    static getIntegerMatrixArray(matrix) {\n        const matrixElements = matrix.elements;\n        const intMatrixArray = [];\n        for (let i = 0; i < 16; i++) {\n            intMatrixArray[i] = Math.round(matrixElements[i] * 1000.0);\n        }\n        return intMatrixArray;\n    }\n\n    checkForMultiSceneUpdateCondition(isUpdateBuild, functionName, parameterName) {\n        if (this.scenes.length > 1 && isUpdateBuild) {\n            throw new Error(`${functionName}() -> '${parameterName}' cannot be true if splat mesh has more than one scene.`);\n        }\n    }\n}\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\f\u0006dylink\u0000\u0000\u0000\u0000\u0000\u0001\u001b\u0003`\u0000\u0000`\u0010\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u00079\u0003\u0011__wasm_call_ctors\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0010\u0003\u0003\u0000\u0001\u000b�\u0010\u0005\u0001|\u0003{\u0002\u0003}\u0002~ \u000b \nk!\f\u0002@ \u000e\u0004@ \r\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0002 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj(\u0002\u0000\"\u00056\u0002\u0000 \u0005 \u000e \u0005 \u000eH\u001b!\u000e \u0005 \r \u0005 \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0002\u000b \u000f\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0002A!\u000f \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000\"\u0015A\u0002tj(\u0002\u0000\"\nG\u0004@\u0002~ \u0005�\t\u0002\b \b \nA\u0006tj\"\u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001��\u0001 \u0005�\t\u00028 \u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001��\u0001\"\u0011�\u001f\u0002��\u0014 \u0011�\u001f\u0003��\"\u0001�\f\u0000\u0000\u0000\u0000\u0000@�@\u0000\u0000\u0000\u0000\u0000@�@\"\u0012��\u0001\"\u0013�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b!\u0019\u0002~ \u0013�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b�\u0012!\u0013\u0002~ \u0011�\u001f\u0000��\u0014 \u0011�\u001f\u0001��\"\u0001 \u0012��\u0001\"\u0011�!\u0001\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b!\u001a \u0013 \u0019�\u001e\u0001!\u0012\u0002~ \u0011�!\u0000\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Cc\u0004@ \u0010�\f\u0001\u000bB���������\u000b�\u0012 \u001a�\u001e\u0001 \u0012�\r\u0000\u0001\u0002\u0003\b\t\n\u000b\u0010\u0011\u0012\u0013\u0018\u0019\u001a\u001b!\u0012 \n!\u000f\u000b \u0003 \u0014j \u0001 \u0015A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j \u0011�\u001b\u0003j\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0002\u000b\u0002 \u0005*\u0002\u0018�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\n\u0002 \u0005*\u0002\b�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0002\u0002 \u0005*\u0002(�D\u0000\u0000\u0000\u0000\u0000@�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\u0005A����\u0007!\u000eA����x!\r \u000b \fM\r\u0001 \u0002�\u0011 \n�\u001c\u0001 \u0005�\u001c\u0002!\u0012 \f!\u0005\u0003@ \u0003 \u0005A\u0002t\"\u0002j \u0001 \u0000 \u0002j(\u0002\u0000A\u0004tj�\u0000\u0000\u0000 \u0012��\u0001\"\u0011�\u001b\u0000 \u0011�\u001b\u0001j \u0011�\u001b\u0002j\"\u00026\u0002\u0000 \u0002 \u000e \u0002 \u000eH\u001b!\u000e \u0002 \r \u0002 \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\f\u0001\u000b \r\u0004@A����\u0007!\u000eA����x!\r \u000b \fM\r\u0001 \f!\u0001\u0003@ \u0003 \u0001A\u0002t\"\u0005j\u0002 \u0002 \u0000 \u0005j(\u0002\u0000A\u0002tj*\u0002\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0001A\u0001j\"\u0001 \u000bG\r\u0000\u000b\f\u0001\u000b\u0002@ \u000fE\u0004@ \u000b \fK\r\u0001A����x!\rA����\u0007!\u000e\f\u0002\u000bA����\u0007!\u000eA����x!\r \u000b \fM\r\u0001A!\u000f \f!\u0002\u0003@ \u000f \u0007 \u0000 \u0002A\u0002t\"\u0014j(\u0002\u0000A\u0002t\"\u0015j(\u0002\u0000\"\nG\u0004@ \u0005�\t\u0002\b \b \nA\u0006tj\"\u000f�\t\u0002\u0000 \u000f*\u0002\u0010� \u0001 \u000f*\u0002 � \u0002 \u000f*\u00020� \u0003��\u0001 \u0005�\t\u0002\u0018 \u000f�\t\u0002\u0004 \u000f*\u0002\u0014� \u0001 \u000f*\u0002$� \u0002 \u000f*\u00024� \u0003��\u0001��\u0001 \u0005�\t\u0002( \u000f�\t\u0002\b \u000f*\u0002\u0018� \u0001 \u000f*\u0002(� \u0002 \u000f*\u00028� \u0003��\u0001��\u0001 \u0005�\t\u00028 \u000f�\t\u0002\f \u000f*\u0002\u001c� \u0001 \u000f*\u0002,� \u0002 \u000f*\u0002<� \u0003��\u0001��\u0001!\u0011 \n!\u000f\u000b \u0003 \u0014j\u0002 \u0011 \u0001 \u0015A\u0002t\"\nj)\u0002\u0000�\u0012��\u0001\"\u0012�\u001f\u0000 \u0012�\u001f\u0001� \u0011 \u0011�\r\b\t\n\u000b\f\r\u000e\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0001 \nA\brj)\u0002\u0000�\u0012��\u0001\"\u0012�\u001f\u0000� \u0012�\u001f\u0001��D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b\"\n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0002A\u0001j\"\u0002 \u000bG\r\u0000\u000b\f\u0001\u000b \u0005*\u0002(!\u0016 \u0005*\u0002\u0018!\u0017 \u0005*\u0002\b!\u0018A����\u0007!\u000eA����x!\r \f!\u0005\u0003@\u0002 \u0018 \u0001 \u0000 \u0005A\u0002t\"\u0007j(\u0002\u0000A\u0004tj\"\u0002*\u0002\u0000� \u0017 \u0002*\u0002\u0004�� \u0016 \u0002*\u0002\b���D\u0000\u0000\u0000\u0000\u0000\u0000�@�\"\u0010�D\u0000\u0000\u0000\u0000\u0000\u0000�Ac\u0004@ \u0010�\f\u0001\u000bA����x\u000b!\n \u0003 \u0007j \n6\u0002\u0000 \n \u000e \n \u000eH\u001b!\u000e \n \r \n \rJ\u001b!\r \u0005A\u0001j\"\u0005 \u000bG\r\u0000\u000b\u000b \u000b \fK\u0004@ \tA\u0001k� \r� \u000e���!\u0016 \f!\r\u0003@\u0002 \u0016 \u0003 \rA\u0002tj\"\u0001(\u0002\u0000 \u000ek��\"\u0017�C\u0000\u0000\u0000O]\u0004@ \u0017�\f\u0001\u000bA����x\u000b!\n \u0001 \n6\u0002\u0000 \u0004 \nA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \rA\u0001j\"\r \u000bG\r\u0000\u000b\u000b \tA\u0002O\u0004@ \u0004(\u0002\u0000!\rA\u0001!\u000e\u0003@ \u0004 \u000eA\u0002tj\"\u0001 \u0001(\u0002\u0000 \rj\"\r6\u0002\u0000 \u000eA\u0001j\"\u000e \tG\r\u0000\u000b\u000b \fA\u0000J\u0004@ \f!\u000e\u0003@ \u0006 \u000eA\u0001k\"\u0001A\u0002t\"\u0002j \u0000 \u0002j(\u0002\u00006\u0002\u0000 \u000eA\u0001J!\u0002 \u0001!\u000e \u0002\r\u0000\u000b\u000b \u000b \fJ\u0004@ \u000b!\u000e\u0003@ \u0006 \u000b \u0004 \u0003 \u000eA\u0001k\"\u000eA\u0002t\"\u0001j(\u0002\u0000A\u0002tj\"\u0002(\u0002\u0000\"\u0005kA\u0002tj \u0000 \u0001j(\u0002\u00006\u0002\u0000 \u0002 \u0005A\u0001k6\u0002\u0000 \f \u000eH\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b","import SorterWasm from './sorter.wasm';\nimport { Constants } from '../Constants.js';\n\nfunction sortWorker(self) {\n\n    let wasmInstance;\n    let wasmMemory;\n    let useSharedMemory;\n    let integerBasedSort;\n    let dynamicMode;\n    let splatCount;\n    let indexesToSortOffset;\n    let sortedIndexesOffset;\n    let transformIndexesOffset;\n    let transformsOffset;\n    let precomputedDistancesOffset;\n    let mappedDistancesOffset;\n    let frequenciesOffset;\n    let centersOffset;\n    let modelViewProjOffset;\n    let countsZero;\n    let sortedIndexesOut;\n\n    let Constants;\n\n    function sort(splatSortCount, splatRenderCount, modelViewProj,\n                  usePrecomputedDistances, copyIndexesToSort, copyPrecomputedDistances, copyTransforms) {\n        const sortStartTime = performance.now();\n\n        if (!useSharedMemory) {\n            const indexesToSort = new Uint32Array(wasmMemory, indexesToSortOffset, copyIndexesToSort.byteLength / Constants.BytesPerInt);\n            indexesToSort.set(copyIndexesToSort);\n            const transforms = new Float32Array(wasmMemory, transformsOffset, copyTransforms.byteLength / Constants.BytesPerFloat);\n            transforms.set(copyTransforms);\n            if (usePrecomputedDistances) {\n                let precomputedDistances;\n                if (integerBasedSort) {\n                    precomputedDistances = new Int32Array(wasmMemory, precomputedDistancesOffset,\n                                                          copyPrecomputedDistances.byteLength / Constants.BytesPerInt);\n                } else {\n                    precomputedDistances = new Float32Array(wasmMemory, precomputedDistancesOffset,\n                                                            copyPrecomputedDistances.byteLength / Constants.BytesPerFloat);\n                }\n                precomputedDistances.set(copyPrecomputedDistances);\n            }\n        }\n\n        if (!countsZero) countsZero = new Uint32Array(Constants.DepthMapRange);\n        new Float32Array(wasmMemory, modelViewProjOffset, 16).set(modelViewProj);\n        new Uint32Array(wasmMemory, frequenciesOffset, Constants.DepthMapRange).set(countsZero);\n        wasmInstance.exports.sortIndexes(indexesToSortOffset, centersOffset, precomputedDistancesOffset,\n                                         mappedDistancesOffset, frequenciesOffset, modelViewProjOffset,\n                                         sortedIndexesOffset, transformIndexesOffset, transformsOffset, Constants.DepthMapRange,\n                                         splatSortCount, splatRenderCount, splatCount, usePrecomputedDistances, integerBasedSort,\n                                         dynamicMode);\n\n        const sortMessage = {\n            'sortDone': true,\n            'splatSortCount': splatSortCount,\n            'splatRenderCount': splatRenderCount,\n            'sortTime': 0\n        };\n        if (!useSharedMemory) {\n            const sortedIndexes = new Uint32Array(wasmMemory, sortedIndexesOffset, splatRenderCount);\n            if (!sortedIndexesOut || sortedIndexesOut.length < splatRenderCount) {\n                sortedIndexesOut = new Uint32Array(splatRenderCount);\n            }\n            sortedIndexesOut.set(sortedIndexes);\n            sortMessage.sortedIndexes = sortedIndexesOut;\n        }\n        const sortEndTime = performance.now();\n\n        sortMessage.sortTime = sortEndTime - sortStartTime;\n\n        self.postMessage(sortMessage);\n    }\n\n    self.onmessage = (e) => {\n        if (e.data.centers) {\n            centers = e.data.centers;\n            transformIndexes = e.data.transformIndexes;\n            if (integerBasedSort) {\n                new Int32Array(wasmMemory, centersOffset + e.data.range.from * Constants.BytesPerInt * 4,\n                               e.data.range.count * 4).set(new Int32Array(centers));\n            } else {\n                new Float32Array(wasmMemory, centersOffset + e.data.range.from * Constants.BytesPerFloat * 4,\n                                 e.data.range.count * 4).set(new Float32Array(centers));\n            }\n            if (dynamicMode) {\n                new Uint32Array(wasmMemory, transformIndexesOffset + e.data.range.from * 4,\n                                e.data.range.count).set(new Uint32Array(transformIndexes));\n            }\n            self.postMessage({\n                'centerDataSet': true,\n            });\n        } else if (e.data.sort) {\n            const renderCount = e.data.sort.splatRenderCount || 0;\n            const sortCount = e.data.sort.splatSortCount || 0;\n            const usePrecomputedDistances = e.data.sort.usePrecomputedDistances;\n\n            let copyIndexesToSort;\n            let copyPrecomputedDistances;\n            let copyTransforms;\n            if (!useSharedMemory) {\n                copyIndexesToSort = e.data.sort.indexesToSort;\n                copyTransforms = e.data.sort.transforms;\n                if (usePrecomputedDistances) copyPrecomputedDistances = e.data.sort.precomputedDistances;\n            }\n            sort(sortCount, renderCount, e.data.sort.modelViewProj, usePrecomputedDistances,\n                 copyIndexesToSort, copyPrecomputedDistances, copyTransforms);\n        } else if (e.data.init) {\n            // Yep, this is super hacky and gross :(\n            Constants = e.data.init.Constants;\n\n            splatCount = e.data.init.splatCount;\n            useSharedMemory = e.data.init.useSharedMemory;\n            integerBasedSort = e.data.init.integerBasedSort;\n            dynamicMode = e.data.init.dynamicMode;\n\n            const CENTERS_BYTES_PER_ENTRY = integerBasedSort ? (Constants.BytesPerInt * 4) : (Constants.BytesPerFloat * 4);\n\n            const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\n\n            const matrixSize = 16 * Constants.BytesPerFloat;\n            const memoryRequiredForIndexesToSort = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForCenters = splatCount * CENTERS_BYTES_PER_ENTRY;\n            const memoryRequiredForModelViewProjectionMatrix = matrixSize;\n            const memoryRequiredForPrecomputedDistances = integerBasedSort ?\n                                                          (splatCount * Constants.BytesPerInt) : (splatCount * Constants.BytesPerFloat);\n            const memoryRequiredForMappedDistances = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForSortedIndexes = splatCount * Constants.BytesPerInt;\n            const memoryRequiredForIntermediateSortBuffers = Constants.DepthMapRange * Constants.BytesPerInt * 2;\n            const memoryRequiredforTransformIndexes = dynamicMode ? (splatCount * Constants.BytesPerInt) : 0;\n            const memoryRequiredforTransforms = dynamicMode ? (Constants.MaxScenes * matrixSize) : 0;\n            const extraMemory = Constants.MemoryPageSize * 32;\n\n            const totalRequiredMemory = memoryRequiredForIndexesToSort +\n                                        memoryRequiredForCenters +\n                                        memoryRequiredForModelViewProjectionMatrix +\n                                        memoryRequiredForPrecomputedDistances +\n                                        memoryRequiredForMappedDistances +\n                                        memoryRequiredForIntermediateSortBuffers +\n                                        memoryRequiredForSortedIndexes +\n                                        memoryRequiredforTransformIndexes +\n                                        memoryRequiredforTransforms +\n                                        extraMemory;\n            const totalPagesRequired = Math.floor(totalRequiredMemory / Constants.MemoryPageSize ) + 1;\n            const sorterWasmImport = {\n                module: {},\n                env: {\n                    memory: new WebAssembly.Memory({\n                        initial: totalPagesRequired * 2,\n                        maximum: totalPagesRequired * 4,\n                        shared: true,\n                    }),\n                }\n            };\n            WebAssembly.compile(sorterWasmBytes)\n            .then((wasmModule) => {\n                return WebAssembly.instantiate(wasmModule, sorterWasmImport);\n            })\n            .then((instance) => {\n                wasmInstance = instance;\n                indexesToSortOffset = 0;\n                centersOffset = indexesToSortOffset + memoryRequiredForIndexesToSort;\n                modelViewProjOffset = centersOffset + memoryRequiredForCenters;\n                precomputedDistancesOffset = modelViewProjOffset + memoryRequiredForModelViewProjectionMatrix;\n                mappedDistancesOffset = precomputedDistancesOffset + memoryRequiredForPrecomputedDistances;\n                frequenciesOffset = mappedDistancesOffset + memoryRequiredForMappedDistances;\n                sortedIndexesOffset = frequenciesOffset + memoryRequiredForIntermediateSortBuffers;\n                transformIndexesOffset = sortedIndexesOffset + memoryRequiredForSortedIndexes;\n                transformsOffset = transformIndexesOffset + memoryRequiredforTransformIndexes;\n                wasmMemory = sorterWasmImport.env.memory.buffer;\n                if (useSharedMemory) {\n                    self.postMessage({\n                        'sortSetupPhase1Complete': true,\n                        'indexesToSortBuffer': wasmMemory,\n                        'indexesToSortOffset': indexesToSortOffset,\n                        'sortedIndexesBuffer': wasmMemory,\n                        'sortedIndexesOffset': sortedIndexesOffset,\n                        'precomputedDistancesBuffer': wasmMemory,\n                        'precomputedDistancesOffset': precomputedDistancesOffset,\n                        'transformsBuffer': wasmMemory,\n                        'transformsOffset': transformsOffset\n                    });\n                } else {\n                    self.postMessage({\n                        'sortSetupPhase1Complete': true\n                    });\n                }\n            });\n        }\n    };\n}\n\nexport function createSortWorker(splatCount, useSharedMemory, integerBasedSort, dynamicMode) {\n    const worker = new Worker(\n        URL.createObjectURL(\n            new Blob(['(', sortWorker.toString(), ')(self)'], {\n                type: 'application/javascript',\n            }),\n        ),\n    );\n\n    const sorterWasmBinaryString = atob(SorterWasm);\n    const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\n    for (let i = 0; i < sorterWasmBinaryString.length; i++) {\n        sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\n    }\n\n    worker.postMessage({\n        'init': {\n            'sorterWasmBytes': sorterWasmBytes.buffer,\n            'splatCount': splatCount,\n            'useSharedMemory': useSharedMemory,\n            'integerBasedSort': integerBasedSort,\n            'dynamicMode': dynamicMode,\n            // Super hacky\n            'Constants': {\n                'BytesPerFloat': Constants.BytesPerFloat,\n                'BytesPerInt': Constants.BytesPerInt,\n                'DepthMapRange': Constants.DepthMapRange,\n                'MemoryPageSize': Constants.MemoryPageSize,\n                'MaxScenes': Constants.MaxScenes\n            }\n        }\n    });\n    return worker;\n}\n","export const WebXRMode = {\n    None: 0,\n    VR: 1,\n    AR: 2\n};\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nexport class VRButton {\n\n    static createButton( renderer ) {\n\n        const button = document.createElement( 'button' );\n\n        function showEnterVR( /* device */ ) {\n\n            let currentSession = null;\n\n            async function onSessionStarted( session ) {\n\n                session.addEventListener( 'end', onSessionEnded );\n\n                await renderer.xr.setSession( session );\n                button.textContent = 'EXIT VR';\n\n                currentSession = session;\n\n            }\n\n            function onSessionEnded( /* event */ ) {\n\n                currentSession.removeEventListener( 'end', onSessionEnded );\n\n                button.textContent = 'ENTER VR';\n\n                currentSession = null;\n\n            }\n\n            //\n\n            button.style.display = '';\n\n            button.style.cursor = 'pointer';\n            button.style.left = 'calc(50% - 50px)';\n            button.style.width = '100px';\n\n            button.textContent = 'ENTER VR';\n\n            // WebXR's requestReferenceSpace only works if the corresponding feature\n            // was requested at session creation time. For simplicity, just ask for\n            // the interesting ones as optional features, but be aware that the\n            // requestReferenceSpace call will fail if it turns out to be unavailable.\n            // ('local' is always available for immersive sessions and doesn't need to\n            // be requested separately.)\n\n            const sessionInit = { optionalFeatures: ['local-floor', 'bounded-floor', 'hand-tracking', 'layers'] };\n\n            button.onmouseenter = function() {\n\n                button.style.opacity = '1.0';\n\n            };\n\n            button.onmouseleave = function() {\n\n                button.style.opacity = '0.5';\n\n            };\n\n            button.onclick = function() {\n\n                if ( currentSession === null ) {\n\n                    navigator.xr.requestSession( 'immersive-vr', sessionInit ).then( onSessionStarted );\n\n                } else {\n\n                    currentSession.end();\n\n                    if ( navigator.xr.offerSession !== undefined ) {\n\n                        navigator.xr.offerSession( 'immersive-vr', sessionInit )\n                            .then( onSessionStarted )\n                            .catch( ( err ) => {\n\n                                console.warn( err );\n\n                            } );\n\n                    }\n\n                }\n\n            };\n\n            if ( navigator.xr.offerSession !== undefined ) {\n\n                navigator.xr.offerSession( 'immersive-vr', sessionInit )\n                    .then( onSessionStarted )\n                    .catch( ( err ) => {\n\n                        console.warn( err );\n\n                    } );\n\n            }\n\n        }\n\n        function disableButton() {\n\n            button.style.display = '';\n\n            button.style.cursor = 'auto';\n            button.style.left = 'calc(50% - 75px)';\n            button.style.width = '150px';\n\n            button.onmouseenter = null;\n            button.onmouseleave = null;\n\n            button.onclick = null;\n\n        }\n\n        function showWebXRNotFound() {\n\n            disableButton();\n\n            button.textContent = 'VR NOT SUPPORTED';\n\n        }\n\n        function showVRNotAllowed( exception ) {\n\n            disableButton();\n\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\n\n            button.textContent = 'VR NOT ALLOWED';\n\n        }\n\n        function stylizeElement( element ) {\n\n            element.style.position = 'absolute';\n            element.style.bottom = '20px';\n            element.style.padding = '12px 6px';\n            element.style.border = '1px solid #fff';\n            element.style.borderRadius = '4px';\n            element.style.background = 'rgba(0,0,0,0.1)';\n            element.style.color = '#fff';\n            element.style.font = 'normal 13px sans-serif';\n            element.style.textAlign = 'center';\n            element.style.opacity = '0.5';\n            element.style.outline = 'none';\n            element.style.zIndex = '999';\n\n        }\n\n        if ( 'xr' in navigator ) {\n\n            button.id = 'VRButton';\n            button.style.display = 'none';\n\n            stylizeElement( button );\n\n            navigator.xr.isSessionSupported( 'immersive-vr' ).then( function( supported ) {\n\n                supported ? showEnterVR() : showWebXRNotFound();\n\n                if ( supported && VRButton.xrSessionIsGranted ) {\n\n                    button.click();\n\n                }\n\n            } ).catch( showVRNotAllowed );\n\n            return button;\n\n        } else {\n\n            const message = document.createElement( 'a' );\n\n            if ( window.isSecureContext === false ) {\n\n                message.href = document.location.href.replace( /^http:/, 'https:' );\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n\n            } else {\n\n                message.href = 'https://immersiveweb.dev/';\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\n\n            }\n\n            message.style.left = 'calc(50% - 90px)';\n            message.style.width = '180px';\n            message.style.textDecoration = 'none';\n\n            stylizeElement( message );\n\n            return message;\n\n        }\n\n    }\n\n    static registerSessionGrantedListener() {\n\n        if ( typeof navigator !== 'undefined' && 'xr' in navigator ) {\n\n            // WebXRViewer (based on Firefox) has a bug where addEventListener\n            // throws a silent exception and aborts execution entirely.\n            if ( /WebXRViewer\\//i.test( navigator.userAgent ) ) return;\n\n            navigator.xr.addEventListener( 'sessiongranted', () => {\n\n                VRButton.xrSessionIsGranted = true;\n\n            } );\n\n        }\n\n    }\n\n}\n\nVRButton.xrSessionIsGranted = false;\nVRButton.registerSessionGrantedListener();\n","/*\nCopyright © 2010-2024 three.js authors & Mark Kellogg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n*/\n\nexport class ARButton {\n\n    static createButton( renderer, sessionInit = {} ) {\n\n        const button = document.createElement( 'button' );\n\n        function showStartAR( /* device */ ) {\n\n            if ( sessionInit.domOverlay === undefined ) {\n\n                const overlay = document.createElement( 'div' );\n                overlay.style.display = 'none';\n                document.body.appendChild( overlay );\n\n                const svg = document.createElementNS( 'http://www.w3.org/2000/svg', 'svg' );\n                svg.setAttribute( 'width', 38 );\n                svg.setAttribute( 'height', 38 );\n                svg.style.position = 'absolute';\n                svg.style.right = '20px';\n                svg.style.top = '20px';\n                svg.addEventListener( 'click', function() {\n\n                    currentSession.end();\n\n                } );\n                overlay.appendChild( svg );\n\n                const path = document.createElementNS( 'http://www.w3.org/2000/svg', 'path' );\n                path.setAttribute( 'd', 'M 12,12 L 28,28 M 28,12 12,28' );\n                path.setAttribute( 'stroke', '#fff' );\n                path.setAttribute( 'stroke-width', 2 );\n                svg.appendChild( path );\n\n                if ( sessionInit.optionalFeatures === undefined ) {\n\n                    sessionInit.optionalFeatures = [];\n\n                }\n\n                sessionInit.optionalFeatures.push( 'dom-overlay' );\n                sessionInit.domOverlay = { root: overlay };\n\n            }\n\n            //\n\n            let currentSession = null;\n\n            async function onSessionStarted( session ) {\n\n                session.addEventListener( 'end', onSessionEnded );\n\n                renderer.xr.setReferenceSpaceType( 'local' );\n\n                await renderer.xr.setSession( session );\n\n                button.textContent = 'STOP AR';\n                sessionInit.domOverlay.root.style.display = '';\n\n                currentSession = session;\n\n            }\n\n            function onSessionEnded( /* event */ ) {\n\n                currentSession.removeEventListener( 'end', onSessionEnded );\n\n                button.textContent = 'START AR';\n                sessionInit.domOverlay.root.style.display = 'none';\n\n                currentSession = null;\n\n            }\n\n            //\n\n            button.style.display = '';\n\n            button.style.cursor = 'pointer';\n            button.style.left = 'calc(50% - 50px)';\n            button.style.width = '100px';\n\n            button.textContent = 'START AR';\n\n            button.onmouseenter = function() {\n\n                button.style.opacity = '1.0';\n\n            };\n\n            button.onmouseleave = function() {\n\n                button.style.opacity = '0.5';\n\n            };\n\n            button.onclick = function() {\n\n                if ( currentSession === null ) {\n\n                    navigator.xr.requestSession( 'immersive-ar', sessionInit ).then( onSessionStarted );\n\n                } else {\n\n                    currentSession.end();\n\n                    if ( navigator.xr.offerSession !== undefined ) {\n\n                        navigator.xr.offerSession( 'immersive-ar', sessionInit )\n                            .then( onSessionStarted )\n                            .catch( ( err ) => {\n\n                                console.warn( err );\n\n                            } );\n\n                    }\n\n                }\n\n            };\n\n            if ( navigator.xr.offerSession !== undefined ) {\n\n                navigator.xr.offerSession( 'immersive-ar', sessionInit )\n                    .then( onSessionStarted )\n                    .catch( ( err ) => {\n\n                        console.warn( err );\n\n                    } );\n\n            }\n\n        }\n\n        function disableButton() {\n\n            button.style.display = '';\n\n            button.style.cursor = 'auto';\n            button.style.left = 'calc(50% - 75px)';\n            button.style.width = '150px';\n\n            button.onmouseenter = null;\n            button.onmouseleave = null;\n\n            button.onclick = null;\n\n        }\n\n        function showARNotSupported() {\n\n            disableButton();\n\n            button.textContent = 'AR NOT SUPPORTED';\n\n        }\n\n        function showARNotAllowed( exception ) {\n\n            disableButton();\n\n            console.warn( 'Exception when trying to call xr.isSessionSupported', exception );\n\n            button.textContent = 'AR NOT ALLOWED';\n\n        }\n\n        function stylizeElement( element ) {\n\n            element.style.position = 'absolute';\n            element.style.bottom = '20px';\n            element.style.padding = '12px 6px';\n            element.style.border = '1px solid #fff';\n            element.style.borderRadius = '4px';\n            element.style.background = 'rgba(0,0,0,0.1)';\n            element.style.color = '#fff';\n            element.style.font = 'normal 13px sans-serif';\n            element.style.textAlign = 'center';\n            element.style.opacity = '0.5';\n            element.style.outline = 'none';\n            element.style.zIndex = '999';\n\n        }\n\n        if ( 'xr' in navigator ) {\n\n            button.id = 'ARButton';\n            button.style.display = 'none';\n\n            stylizeElement( button );\n\n            navigator.xr.isSessionSupported( 'immersive-ar' ).then( function( supported ) {\n\n                supported ? showStartAR() : showARNotSupported();\n\n            } ).catch( showARNotAllowed );\n\n            return button;\n\n        } else {\n\n            const message = document.createElement( 'a' );\n\n            if ( window.isSecureContext === false ) {\n\n                message.href = document.location.href.replace( /^http:/, 'https:' );\n                message.innerHTML = 'WEBXR NEEDS HTTPS'; // TODO Improve message\n\n            } else {\n\n                message.href = 'https://immersiveweb.dev/';\n                message.innerHTML = 'WEBXR NOT AVAILABLE';\n\n            }\n\n            message.style.left = 'calc(50% - 90px)';\n            message.style.width = '180px';\n            message.style.textDecoration = 'none';\n\n            stylizeElement( message );\n\n            return message;\n\n        }\n\n    }\n\n}\n","export const RenderMode = {\n    Always: 0,\n    OnChange: 1,\n    Never: 2\n};\n","import * as THREE from 'three';\nimport { OrbitControls } from './OrbitControls.js';\nimport { PlyLoader } from './loaders/ply/PlyLoader.js';\nimport { SplatLoader } from './loaders/splat/SplatLoader.js';\nimport { KSplatLoader } from './loaders/ksplat/KSplatLoader.js';\nimport { sceneFormatFromPath } from './loaders/Utils.js';\nimport { LoadingSpinner } from './ui/LoadingSpinner.js';\nimport { LoadingProgressBar } from './ui/LoadingProgressBar.js';\nimport { InfoPanel } from './ui/InfoPanel.js';\nimport { SceneHelper } from './SceneHelper.js';\nimport { Raycaster } from './raycaster/Raycaster.js';\nimport { SplatMesh } from './SplatMesh.js';\nimport { createSortWorker } from './worker/SortWorker.js';\nimport { Constants } from './Constants.js';\nimport { getCurrentTime } from './Util.js';\nimport { AbortablePromise, AbortedPromiseError } from './AbortablePromise.js';\nimport { SceneFormat } from './loaders/SceneFormat.js';\nimport { WebXRMode } from './webxr/WebXRMode.js';\nimport { VRButton } from './webxr/VRButton.js';\nimport { ARButton } from './webxr/ARButton.js';\nimport { delayedExecute } from './Util.js';\nimport { LoaderStatus } from './loaders/LoaderStatus.js';\nimport { RenderMode } from './RenderMode.js';\nimport { SceneRevealMode } from './SceneRevealMode.js';\n\nconst THREE_CAMERA_FOV = 50;\nconst MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT = .75;\nconst MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER = 1500000;\nconst FOCUS_MARKER_FADE_IN_SPEED = 10.0;\nconst FOCUS_MARKER_FADE_OUT_SPEED = 2.5;\nconst CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION = 60;\n\n/**\n * Viewer: Manages the rendering of splat scenes. Manages an instance of SplatMesh as well as a web worker\n * that performs the sort for its splats.\n */\nexport class Viewer {\n\n    constructor(options = {}) {\n\n        // The natural 'up' vector for viewing the scene (only has an effect when used with orbit controls and\n        // when the viewer uses its own camera).\n        if (!options.cameraUp) options.cameraUp = [0, 1, 0];\n        this.cameraUp = new THREE.Vector3().fromArray(options.cameraUp);\n\n        // The camera's initial position (only used when the viewer uses its own camera).\n        if (!options.initialCameraPosition) options.initialCameraPosition = [0, 10, 15];\n        this.initialCameraPosition = new THREE.Vector3().fromArray(options.initialCameraPosition);\n\n        // The initial focal point of the camera and center of the camera's orbit (only used when the viewer uses its own camera).\n        if (!options.initialCameraLookAt) options.initialCameraLookAt = [0, 0, 0];\n        this.initialCameraLookAt = new THREE.Vector3().fromArray(options.initialCameraLookAt);\n\n        // 'dropInMode' is a flag that is used internally to support the usage of the viewer as a Three.js scene object\n        this.dropInMode = options.dropInMode || false;\n\n        // If 'selfDrivenMode' is true, the viewer manages its own update/animation loop via requestAnimationFrame()\n        if (options.selfDrivenMode === undefined || options.selfDrivenMode === null) options.selfDrivenMode = true;\n        this.selfDrivenMode = options.selfDrivenMode && !this.dropInMode;\n        this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\n\n        // If 'useBuiltInControls' is true, the viewer will create its own instance of OrbitControls and attach to the camera\n        if (options.useBuiltInControls === undefined) options.useBuiltInControls = true;\n        this.useBuiltInControls = options.useBuiltInControls;\n\n        // parent element of the Three.js renderer canvas\n        this.rootElement = options.rootElement;\n\n        // Tells the viewer to pretend the device pixel ratio is 1, which can boost performance on devices where it is larger,\n        // at a small cost to visual quality\n        this.ignoreDevicePixelRatio = options.ignoreDevicePixelRatio || false;\n        this.devicePixelRatio = this.ignoreDevicePixelRatio ? 1 : window.devicePixelRatio;\n\n        // Tells the viewer to use 16-bit floating point values when storing splat covariance data in textures, instead of 32-bit\n        this.halfPrecisionCovariancesOnGPU = options.halfPrecisionCovariancesOnGPU || false;\n\n        // If 'threeScene' is valid, it will be rendered by the viewer along with the splat mesh\n        this.threeScene = options.threeScene;\n        // Allows for usage of an external Three.js renderer\n        this.renderer = options.renderer;\n        // Allows for usage of an external Three.js camera\n        this.camera = options.camera;\n\n        // If 'gpuAcceleratedSort' is true, a partially GPU-accelerated approach to sorting splats will be used.\n        // Currently this means pre-computing splat distances from the camera on the GPU\n        this.gpuAcceleratedSort = options.gpuAcceleratedSort || false;\n\n        // if 'integerBasedSort' is true, the integer version of splat centers as well as other values used to calculate\n        // splat distances are used instead of the float version. This speeds up computation, but introduces the possibility of\n        // overflow in larger scenes.\n        if (options.integerBasedSort === undefined || options.integerBasedSort === null) {\n            options.integerBasedSort = true;\n        }\n        this.integerBasedSort = options.integerBasedSort;\n\n        // If 'sharedMemoryForWorkers' is true, a SharedArrayBuffer will be used to communicate with web workers. This method\n        // is faster than copying memory to or from web workers, but comes with security implications as outlined here:\n        // https://web.dev/articles/cross-origin-isolation-guide\n        // If enabled, it requires specific CORS headers to be present in the response from the server that is sent when\n        // loading the application. More information is available in the README.\n        if (options.sharedMemoryForWorkers === undefined || options.sharedMemoryForWorkers === null) options.sharedMemoryForWorkers = true;\n        this.sharedMemoryForWorkers = options.sharedMemoryForWorkers;\n\n        // if 'dynamicScene' is true, it tells the viewer to assume scene elements are not stationary or that the number of splats in the\n        // scene may change. This prevents optimizations that depend on a static scene from being made. Additionally, if 'dynamicScene' is\n        // true it tells the splat mesh to not apply scene tranforms to splat data that is returned by functions like\n        // SplatMesh.getSplatCenter() by default.\n        this.dynamicScene = !!options.dynamicScene;\n\n        // When true, will perform additional steps during rendering to address artifacts caused by the rendering of gaussians at a\n        // substantially different resolution than that at which they were rendered during training. This will only work correctly\n        // for models that were trained using a process that utilizes this compensation calculation. For more details:\n        // https://github.com/nerfstudio-project/gsplat/pull/117\n        // https://github.com/graphdeco-inria/gaussian-splatting/issues/294#issuecomment-1772688093\n        this.antialiased = options.antialiased || false;\n\n        this.webXRMode = options.webXRMode || WebXRMode.None;\n\n        if (this.webXRMode !== WebXRMode.None) {\n            this.gpuAcceleratedSort = false;\n        }\n\n        // if 'renderMode' is RenderMode.Always, then the viewer will rrender the scene on every update. If it is RenderMode.OnChange,\n        // it will only render when something in the scene has changed.\n        this.renderMode = options.renderMode || RenderMode.Always;\n\n        // SceneRevealMode.Default results in a nice, slow fade-in effect for progressively loaded scenes,\n        // and a fast fade-in for non progressively loaded scenes.\n        // SceneRevealMode.Gradual will force a slow fade-in for all scenes.\n        // SceneRevealMode.Instant will force all loaded scene data to be immediately visible.\n        this.sceneRevealMode = options.sceneRevealMode || SceneRevealMode.Default;\n\n        // Hacky, experimental, non-scientific parameter for tweaking focal length related calculations. For scenes with very\n        // small gaussians, small details, and small dimensions -- increasing this value can help improve visual quality.\n        this.focalAdjustment = options.focalAdjustment || 1.0;\n\n        // Specify the maximum screen-space splat size, can help deal with large splats that get too unwieldy\n        this.maxScreenSpaceSplatSize = options.maxScreenSpaceSplatSize || 2048;\n\n        this.createSplatMesh();\n\n        this.controls = null;\n        this.perspectiveControls = null;\n        this.orthographicControls = null;\n\n        this.orthographicCamera = null;\n        this.perspectiveCamera = null;\n\n        this.showMeshCursor = false;\n        this.showControlPlane = false;\n        this.showInfo = false;\n\n        this.sceneHelper = null;\n\n        this.sortWorker = null;\n        this.sortRunning = false;\n        this.splatRenderCount = 0;\n        this.sortWorkerIndexesToSort = null;\n        this.sortWorkerSortedIndexes = null;\n        this.sortWorkerPrecomputedDistances = null;\n        this.sortWorkerTransforms = null;\n        this.runAfterFirstSort = [];\n\n        this.selfDrivenModeRunning = false;\n        this.splatRenderReady = false;\n\n        this.raycaster = new Raycaster();\n\n        this.infoPanel = null;\n\n        this.startInOrthographicMode = false;\n\n        this.currentFPS = 0;\n        this.lastSortTime = 0;\n        this.consecutiveRenderFrames = 0;\n\n        this.previousCameraTarget = new THREE.Vector3();\n        this.nextCameraTarget = new THREE.Vector3();\n\n        this.mousePosition = new THREE.Vector2();\n        this.mouseDownPosition = new THREE.Vector2();\n        this.mouseDownTime = null;\n\n        this.resizeObserver = null;\n        this.mouseMoveListener = null;\n        this.mouseDownListener = null;\n        this.mouseUpListener = null;\n        this.keyDownListener = null;\n\n        this.sortPromise = null;\n        this.sortPromiseResolver = null;\n        this.downloadPromisesToAbort = {};\n        this.splatSceneLoadPromise = null;\n        this.splatSceneRemovalPromise = null;\n\n        this.loadingSpinner = new LoadingSpinner(null, this.rootElement || document.body);\n        this.loadingSpinner.hide();\n        this.loadingProgressBar = new LoadingProgressBar(this.rootElement || document.body);\n        this.loadingProgressBar.hide();\n        this.infoPanel = new InfoPanel(this.rootElement || document.body);\n        this.infoPanel.hide();\n\n        this.usingExternalCamera = (this.dropInMode || this.camera) ? true : false;\n        this.usingExternalRenderer = (this.dropInMode || this.renderer) ? true : false;\n\n        this.initialized = false;\n        this.disposing = false;\n        this.disposed = false;\n        if (!this.dropInMode) this.init();\n    }\n\n    createSplatMesh() {\n        this.splatMesh = new SplatMesh(this.dynamicScene, this.halfPrecisionCovariancesOnGPU, this.devicePixelRatio,\n                                       this.gpuAcceleratedSort, this.integerBasedSort, this.antialiased, this.maxScreenSpaceSplatSize);\n        this.splatMesh.frustumCulled = false;\n    }\n\n    init() {\n\n        if (this.initialized) return;\n\n        if (!this.rootElement) {\n            if (!this.usingExternalRenderer) {\n                this.rootElement = document.createElement('div');\n                this.rootElement.style.width = '100%';\n                this.rootElement.style.height = '100%';\n                this.rootElement.style.position = 'absolute';\n                document.body.appendChild(this.rootElement);\n            } else {\n                this.rootElement = this.renderer.domElement.parentElement || document.body;\n            }\n        }\n\n        const renderDimensions = new THREE.Vector2();\n        this.getRenderDimensions(renderDimensions);\n\n        if (!this.usingExternalCamera) {\n            this.perspectiveCamera = new THREE.PerspectiveCamera(THREE_CAMERA_FOV, renderDimensions.x / renderDimensions.y, 0.1, 1000);\n            this.orthographicCamera = new THREE.OrthographicCamera(renderDimensions.x / -2, renderDimensions.x / 2,\n                                                                   renderDimensions.y / 2, renderDimensions.y / -2, 0.1, 1000 );\n            this.camera = this.startInOrthographicMode ? this.orthographicCamera : this.perspectiveCamera;\n            this.camera.position.copy(this.initialCameraPosition);\n            this.camera.up.copy(this.cameraUp).normalize();\n            this.camera.lookAt(this.initialCameraLookAt);\n        }\n\n        if (!this.usingExternalRenderer) {\n            this.renderer = new THREE.WebGLRenderer({\n                antialias: false,\n                precision: 'highp'\n            });\n            this.renderer.setPixelRatio(this.devicePixelRatio);\n            this.renderer.autoClear = true;\n            this.renderer.setClearColor(new THREE.Color( 0x000000 ), 0.0);\n            this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n\n            this.resizeObserver = new ResizeObserver(() => {\n                this.getRenderDimensions(renderDimensions);\n                this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n                this.forceRenderNextFrame();\n            });\n            this.resizeObserver.observe(this.rootElement);\n            this.rootElement.appendChild(this.renderer.domElement);\n        }\n\n        if (this.webXRMode) {\n            if (this.webXRMode === WebXRMode.VR) {\n                this.rootElement.appendChild(VRButton.createButton(this.renderer));\n            } else if (this.webXRMode === WebXRMode.AR) {\n                this.rootElement.appendChild(ARButton.createButton(this.renderer));\n            }\n            this.renderer.xr.enabled = true;\n            this.camera.position.copy(this.initialCameraPosition);\n            this.camera.up.copy(this.cameraUp).normalize();\n            this.camera.lookAt(this.initialCameraLookAt);\n        }\n\n        this.threeScene = this.threeScene || new THREE.Scene();\n        this.sceneHelper = new SceneHelper(this.threeScene);\n        this.sceneHelper.setupMeshCursor();\n        this.sceneHelper.setupFocusMarker();\n        this.sceneHelper.setupControlPlane();\n\n        if (this.useBuiltInControls && this.webXRMode === WebXRMode.None) {\n            if (!this.usingExternalCamera) {\n                this.perspectiveControls = new OrbitControls(this.perspectiveCamera, this.renderer.domElement);\n                this.orthographicControls = new OrbitControls(this.orthographicCamera, this.renderer.domElement);\n            } else {\n                if (this.camera.isOrthographicCamera) {\n                    this.orthographicControls = new OrbitControls(this.camera, this.renderer.domElement);\n                } else {\n                    this.perspectiveControls = new OrbitControls(this.camera, this.renderer.domElement);\n                }\n            }\n            for (let controls of [this.perspectiveControls, this.orthographicControls]) {\n                if (controls) {\n                    controls.listenToKeyEvents(window);\n                    controls.rotateSpeed = 0.5;\n                    controls.maxPolarAngle = Math.PI * .75;\n                    controls.minPolarAngle = 0.1;\n                    controls.enableDamping = true;\n                    controls.dampingFactor = 0.05;\n                    controls.target.copy(this.initialCameraLookAt);\n                }\n            }\n            this.controls = this.camera.isOrthographicCamera ? this.orthographicControls : this.perspectiveControls;\n            this.mouseMoveListener = this.onMouseMove.bind(this);\n            this.renderer.domElement.addEventListener('pointermove', this.mouseMoveListener, false);\n            this.mouseDownListener = this.onMouseDown.bind(this);\n            this.renderer.domElement.addEventListener('pointerdown', this.mouseDownListener, false);\n            this.mouseUpListener = this.onMouseUp.bind(this);\n            this.renderer.domElement.addEventListener('pointerup', this.mouseUpListener, false);\n            this.keyDownListener = this.onKeyDown.bind(this);\n            window.addEventListener('keydown', this.keyDownListener, false);\n        }\n\n        this.loadingProgressBar.setContainer(this.rootElement);\n        this.loadingSpinner.setContainer(this.rootElement);\n        this.infoPanel.setContainer(this.rootElement);\n\n        this.initialized = true;\n    }\n\n    removeEventHandlers() {\n        if (this.useBuiltInControls) {\n            this.renderer.domElement.removeEventListener('pointermove', this.mouseMoveListener);\n            this.mouseMoveListener = null;\n            this.renderer.domElement.removeEventListener('pointerdown', this.mouseDownListener);\n            this.mouseDownListener = null;\n            this.renderer.domElement.removeEventListener('pointerup', this.mouseUpListener);\n            this.mouseUpListener = null;\n            window.removeEventListener('keydown', this.keyDownListener);\n            this.keyDownListener = null;\n        }\n    }\n\n    setRenderMode(renderMode) {\n        this.renderMode = renderMode;\n    }\n\n    onKeyDown = function() {\n\n        const forward = new THREE.Vector3();\n        const tempMatrixLeft = new THREE.Matrix4();\n        const tempMatrixRight = new THREE.Matrix4();\n\n        return function(e) {\n            forward.set(0, 0, -1);\n            forward.transformDirection(this.camera.matrixWorld);\n            tempMatrixLeft.makeRotationAxis(forward, Math.PI / 128);\n            tempMatrixRight.makeRotationAxis(forward, -Math.PI / 128);\n            switch (e.code) {\n                case 'KeyG':\n                    this.focalAdjustment += 0.02;\n                    this.forceRenderNextFrame();\n                break;\n                case 'KeyF':\n                    this.focalAdjustment -= 0.02;\n                    this.forceRenderNextFrame();\n                break;\n                case 'ArrowLeft':\n                    this.camera.up.transformDirection(tempMatrixLeft);\n                break;\n                case 'ArrowRight':\n                    this.camera.up.transformDirection(tempMatrixRight);\n                break;\n                case 'KeyC':\n                    this.showMeshCursor = !this.showMeshCursor;\n                break;\n                case 'KeyU':\n                    this.showControlPlane = !this.showControlPlane;\n                break;\n                case 'KeyI':\n                    this.showInfo = !this.showInfo;\n                    if (this.showInfo) {\n                        this.infoPanel.show();\n                    } else {\n                        this.infoPanel.hide();\n                    }\n                break;\n                case 'KeyO':\n                    if (!this.usingExternalCamera) {\n                        this.setOrthographicMode(!this.camera.isOrthographicCamera);\n                    }\n                break;\n                case 'KeyP':\n                    if (!this.usingExternalCamera) {\n                        this.splatMesh.setPointCloudModeEnabled(!this.splatMesh.getPointCloudModeEnabled());\n                    }\n                break;\n                case 'Equal':\n                    if (!this.usingExternalCamera) {\n                        this.splatMesh.setSplatScale(this.splatMesh.getSplatScale() + 0.05);\n                    }\n                break;\n                case 'Minus':\n                    if (!this.usingExternalCamera) {\n                        this.splatMesh.setSplatScale(Math.max(this.splatMesh.getSplatScale() - 0.05, 0.0));\n                    }\n                break;\n            }\n        };\n\n    }();\n\n    onMouseMove(mouse) {\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n    }\n\n    onMouseDown() {\n        this.mouseDownPosition.copy(this.mousePosition);\n        this.mouseDownTime = getCurrentTime();\n    }\n\n    onMouseUp = function() {\n\n        const clickOffset = new THREE.Vector2();\n\n        return function(mouse) {\n            clickOffset.copy(this.mousePosition).sub(this.mouseDownPosition);\n            const mouseUpTime = getCurrentTime();\n            const wasClick = mouseUpTime - this.mouseDownTime < 0.5 && clickOffset.length() < 2;\n            if (wasClick) {\n                this.onMouseClick(mouse);\n            }\n        };\n\n    }();\n\n    onMouseClick(mouse) {\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n        this.checkForFocalPointChange();\n    }\n\n    checkForFocalPointChange = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        const toNewFocalPoint = new THREE.Vector3();\n        const outHits = [];\n\n        return function() {\n            if (!this.transitioningCameraTarget) {\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    const hit = outHits[0];\n                    const intersectionPoint = hit.origin;\n                    toNewFocalPoint.copy(intersectionPoint).sub(this.camera.position);\n                    if (toNewFocalPoint.length() > MINIMUM_DISTANCE_TO_NEW_FOCAL_POINT) {\n                        this.previousCameraTarget.copy(this.controls.target);\n                        this.nextCameraTarget.copy(intersectionPoint);\n                        this.transitioningCameraTarget = true;\n                        this.transitioningCameraTargetStartTime = getCurrentTime();\n                    }\n                }\n            }\n        };\n\n    }();\n\n    getRenderDimensions(outDimensions) {\n        if (this.rootElement) {\n            outDimensions.x = this.rootElement.offsetWidth;\n            outDimensions.y = this.rootElement.offsetHeight;\n        } else {\n            this.renderer.getSize(outDimensions);\n        }\n    }\n\n    setOrthographicMode(orthographicMode) {\n        if (orthographicMode === this.camera.isOrthographicCamera) return;\n        const fromCamera = this.camera;\n        const toCamera = orthographicMode ? this.orthographicCamera : this.perspectiveCamera;\n        toCamera.position.copy(fromCamera.position);\n        toCamera.up.copy(fromCamera.up);\n        toCamera.rotation.copy(fromCamera.rotation);\n        toCamera.quaternion.copy(fromCamera.quaternion);\n        toCamera.matrix.copy(fromCamera.matrix);\n        this.camera = toCamera;\n\n        if (this.controls) {\n            const fromControls = this.controls;\n            const toControls = orthographicMode ? this.orthographicControls : this.perspectiveControls;\n            toControls.target.copy(fromControls.target);\n            toControls.clearDampedRotation();\n            fromControls.clearDampedRotation();\n            if (orthographicMode) {\n                Viewer.setCameraZoomFromPosition(toCamera, fromCamera, fromControls);\n            } else {\n                Viewer.setCameraPositionFromZoom(toCamera, fromCamera, toControls);\n            }\n            this.controls = toControls;\n            this.camera.lookAt(this.controls.target);\n        }\n    }\n\n    static setCameraPositionFromZoom = function() {\n\n        const tempVector = new THREE.Vector3();\n\n        return function(positionCamera, zoomedCamera, controls) {\n            const toLookAtDistance = 1 / (zoomedCamera.zoom * 0.001);\n            tempVector.copy(controls.target).sub(positionCamera.position).normalize().multiplyScalar(toLookAtDistance).negate();\n            positionCamera.position.copy(controls.target).add(tempVector);\n        };\n\n    }();\n\n\n    static setCameraZoomFromPosition = function() {\n\n        const tempVector = new THREE.Vector3();\n\n        return function(zoomCamera, positionZamera, controls) {\n            const toLookAtDistance = tempVector.copy(controls.target).sub(positionZamera.position).length();\n            zoomCamera.zoom = 1 / (toLookAtDistance * .001);\n        };\n\n    }();\n\n    updateSplatMesh = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (!this.splatMesh) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            if (splatCount > 0) {\n                this.splatMesh.updateTransforms();\n                this.getRenderDimensions(renderDimensions);\n                const focalLengthX = this.camera.projectionMatrix.elements[0] * 0.5 *\n                                     this.devicePixelRatio * renderDimensions.x;\n                const focalLengthY = this.camera.projectionMatrix.elements[5] * 0.5 *\n                                     this.devicePixelRatio * renderDimensions.y;\n\n                const focalMultiplier = this.camera.isOrthographicCamera ? (1.0 / this.devicePixelRatio) : 1.0;\n                const focalAdjustment = this.focalAdjustment * focalMultiplier;\n                const inverseFocalAdjustment = 1.0 / focalAdjustment;\n\n                this.splatMesh.updateUniforms(renderDimensions, focalLengthX * focalAdjustment, focalLengthY * focalAdjustment,\n                                              this.camera.isOrthographicCamera, this.camera.zoom || 1.0, inverseFocalAdjustment);\n            }\n        };\n\n    }();\n\n    isLoadingOrUnloading() {\n        return Object.keys(this.downloadPromisesToAbort) > 0 || this.splatSceneLoadPromise !== null ||\n                           this.splatSceneRemovalPromise !== null;\n    }\n\n    isDisposingOrDisposed() {\n        return this.disposing || this.disposed;\n    }\n\n\n    clearSplatSceneLoadPromise() {\n        this.splatSceneLoadPromise = null;\n    }\n\n    setSplatSceneLoadPromise(promise) {\n        this.splatSceneLoadPromise = promise;\n    }\n\n    /**\n     * Add a splat scene to the viewer and display any loading UI if appropriate.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {object} options {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     *         onProgress:                 Function to be called as file data are received, or other processing occurs\n     *\n     * }\n     * @return {AbortablePromise}\n     */\n    addSplatScene(path, options = {}) {\n\n        if (this.isLoadingOrUnloading()) {\n            throw new Error('Cannot add splat scene while another load or unload is already in progress.');\n        }\n\n        if (this.isDisposingOrDisposed()) {\n            throw new Error('Cannot add splat scene after dispose() is called.');\n        }\n\n        let format = options.format;\n        if (format === undefined || format === null) {\n            format = sceneFormatFromPath(path);\n        }\n        const streamBuildSections = Viewer.isStreamable(format) && options.streamView;\n\n        const splatBufferOptions = {\n            'rotation': options.rotation || options.orientation,\n            'position': options.position,\n            'scale': options.scale,\n            'splatAlphaRemovalThreshold': options.splatAlphaRemovalThreshold,\n        };\n\n        let showLoadingUI = options.showLoadingUI;\n        if (showLoadingUI !== false) showLoadingUI = true;\n\n        let loadingTaskId = null;\n        if (showLoadingUI) {\n            this.loadingSpinner.removeAllTasks();\n            loadingTaskId = this.loadingSpinner.addTask('Downloading...');\n        }\n\n        let downloadDone = false;\n\n        let downloadedPercentage = 0;\n        const onProgress = (percent, percentLabel, loaderStatus) => {\n            if (showLoadingUI) {\n                if (loaderStatus === LoaderStatus.Downloading) {\n                    downloadedPercentage = percent;\n                    if (percent == 100) {\n                        this.loadingSpinner.setMessageForTask(loadingTaskId, 'Download complete!');\n                    } else {\n                        if (streamBuildSections) {\n                            this.loadingSpinner.setMessageForTask(loadingTaskId, 'Downloading splats...');\n                        } else {\n                            const suffix = percentLabel ? `: ${percentLabel}` : `...`;\n                            this.loadingSpinner.setMessageForTask(loadingTaskId, `Downloading${suffix}`);\n                        }\n                    }\n                } else if (loaderStatus === LoaderStatus.Processing) {\n                    this.loadingSpinner.setMessageForTask(loadingTaskId, 'Processing splats...');\n                } else {\n                    this.loadingSpinner.setMessageForTask(loadingTaskId, 'Ready!');\n                }\n            }\n            if (options.onProgress) options.onProgress(percent, percentLabel, loaderStatus);\n        };\n\n        const buildSection = (splatBuffer, firstBuild, finalBuild) => {\n            if (!streamBuildSections && options.onProgress) options.onProgress(0, '0%', LoaderStatus.Processing);\n            return this.addSplatBuffers([splatBuffer], [splatBufferOptions],\n                                         finalBuild, firstBuild && showLoadingUI, showLoadingUI).then(() => {\n                if (!streamBuildSections && options.onProgress) options.onProgress(100, '100%', LoaderStatus.Processing);\n                if (showLoadingUI) {\n                    if (firstBuild && streamBuildSections || finalBuild && !streamBuildSections) {\n                        this.runAfterFirstSort.push(() => {\n                            this.loadingSpinner.removeTask(loadingTaskId);\n                            if (!finalBuild && !downloadDone) this.loadingProgressBar.show();\n                        });\n                    }\n                    if (streamBuildSections) {\n                        if (finalBuild) {\n                            downloadDone = true;\n                            this.loadingProgressBar.hide();\n                        } else {\n                            this.loadingProgressBar.setProgress(downloadedPercentage);\n                        }\n                    }\n                }\n            });\n        };\n\n        const hideLoadingUI = () => {\n            this.loadingProgressBar.hide();\n            this.loadingSpinner.removeAllTasks();\n        };\n\n        const loadFunc = streamBuildSections ? this.loadSplatSceneToSplatBufferStreaming.bind(this) :\n                                               this.loadSplatSceneToSplatBufferNonStreaming.bind(this);\n        return loadFunc(path, format, options.splatAlphaRemovalThreshold, buildSection.bind(this), onProgress, hideLoadingUI.bind(this));\n    }\n\n    /**\n     * Add multiple splat scenes to the viewer and display any loading UI if appropriate.\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\n     *\n     *         path: Path to splat scene to be loaded\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\n     * @param {function} onProgress Function to be called as file data are received\n     * @return {AbortablePromise}\n     */\n    addSplatScenes(sceneOptions, showLoadingUI = true, onProgress = undefined) {\n\n        if (this.isLoadingOrUnloading()) {\n            throw new Error('Cannot add splat scene while another load or unload is already in progress.');\n        }\n\n        if (this.isDisposingOrDisposed()) {\n            throw new Error('Cannot add splat scene after dispose() is called.');\n        }\n\n        const fileCount = sceneOptions.length;\n        const percentComplete = [];\n        if (showLoadingUI) {\n            this.loadingSpinner.removeAllTasks();\n            this.loadingSpinner.show();\n        }\n        const onLoadProgress = (fileIndex, percent, percentLabel) => {\n            percentComplete[fileIndex] = percent;\n            let totalPercent = 0;\n            for (let i = 0; i < fileCount; i++) totalPercent += percentComplete[i] || 0;\n            totalPercent = totalPercent / fileCount;\n            percentLabel = `${totalPercent.toFixed(2)}%`;\n            if (showLoadingUI) {\n                if (totalPercent == 100) {\n                    this.loadingSpinner.setMessage(`Download complete!`);\n                } else {\n                    this.loadingSpinner.setMessage(`Downloading: ${percentLabel}`);\n                }\n            }\n            if (onProgress) onProgress(totalPercent, percentLabel, LoaderStatus.Downloading);\n        };\n\n        const loadPromises = [];\n        const nativeLoadPromises = [];\n        const abortHandlers = [];\n        for (let i = 0; i < sceneOptions.length; i++) {\n\n            let format = sceneOptions[i].format;\n            if (format === undefined || format === null) {\n                format = sceneFormatFromPath(sceneOptions[i].path);\n            }\n\n            const downloadPromise = this.loadSplatSceneToSplatBuffer(sceneOptions[i].path, sceneOptions[i].splatAlphaRemovalThreshold,\n                                                                     onLoadProgress.bind(this, i), false, undefined, format);\n            abortHandlers.push(downloadPromise.abortHandler);\n            loadPromises.push(downloadPromise);\n            nativeLoadPromises.push(downloadPromise.promise);\n            this.downloadPromisesToAbort[downloadPromise.id] = downloadPromise;\n        }\n        const abortHandler = () => {\n            for (let abortHandler of abortHandlers) {\n                abortHandler();\n            }\n        };\n        const loadingPromise = new AbortablePromise((resolve, reject) => {\n            Promise.all(nativeLoadPromises)\n            .then((splatBuffers) => {\n                if (showLoadingUI) this.loadingSpinner.hide();\n                if (onProgress) options.onProgress(0, '0%', LoaderStatus.Processing);\n                this.addSplatBuffers(splatBuffers, sceneOptions, true, showLoadingUI, showLoadingUI).then(() => {\n                    if (onProgress) onProgress(100, '100%', LoaderStatus.Processing);\n                    resolve();\n                    this.clearSplatSceneLoadPromise();\n                });\n            })\n            .catch((e) => {\n                if (showLoadingUI) this.loadingSpinner.hide();\n                if (!(e instanceof AbortedPromiseError)) {\n                    reject(new Error(`Viewer::addSplatScenes -> Could not load one or more splat scenes.`));\n                } else {\n                    resolve();\n                }\n                this.clearSplatSceneLoadPromise();\n            })\n            .finally(() => {\n                for (let loadPromise of loadPromises) {\n                    delete this.downloadPromisesToAbort[loadPromise.id];\n                }\n            });\n        }, abortHandler);\n        this.setSplatSceneLoadPromise(loadingPromise);\n        return loadingPromise;\n    }\n\n    /**\n     * Download a single non-streamed splat scene and convert to splat buffer. Also sets/clears relevant instance\n     * synchronization objects, and calls appropriate functions on success or failure.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {SceneFormat} format Format of the splat scene file\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\n     * @param {function} onDownloadComplete Function to be called when download is complete\n     * @param {function} onProgress Function to be called as file data are received, or other processing occurs\n     * @param {function} onException Function to be called when exception occurs\n     * @return {AbortablePromise}\n     */\n    loadSplatSceneToSplatBufferNonStreaming(path, format, splatAlphaRemovalThreshold, onDownloadComplete, onProgress, onException) {\n        const clearDownloadPromise = () => {\n            delete this.downloadPromisesToAbort[loadPromise.id];\n        };\n\n        const loadPromise = this.loadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold, onProgress, false, undefined, format)\n        .then((splatBuffer) => {\n            clearDownloadPromise();\n            return onDownloadComplete(splatBuffer, true, true).then(() => {\n                this.clearSplatSceneLoadPromise();\n            });\n        })\n        .catch((e) => {\n            if (onException) onException();\n            this.clearSplatSceneLoadPromise();\n            clearDownloadPromise();\n            if (!(e instanceof AbortedPromiseError)) {\n                throw (new Error(`Viewer::addSplatScene -> Could not load file ${path}`));\n            }\n        });\n\n        this.downloadPromisesToAbort[loadPromise.id] = loadPromise;\n        this.setSplatSceneLoadPromise(loadPromise);\n\n        return loadPromise;\n    }\n\n    /**\n     * Download a single splat scene and convert to splat buffer in a streamed manner, allowing rendering as the file downloads.\n     * Also sets/clears relevant instance synchronization objects, and calls appropriate functions on success or failure.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {SceneFormat} format Format of the splat scene file\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified value (valid range: 0 - 255)\n     * @param {function} onSectionDownloaded Function to be called as each streamed section is downloaded\n     * @param {function} onProgress Function to be called as file data are received, or other processing occurs\n     * @param {function} onException Function to be called when exception occurs\n     * @return {AbortablePromise}\n     */\n    loadSplatSceneToSplatBufferStreaming(path, format, splatAlphaRemovalThreshold, onSectionDownloaded, onProgress, onException) {\n        let firstStreamedSectionBuildResolver;\n        let firstStreamedSectionBuildRejecter;\n        let fullBuildResolver;\n        let fullBuildRejecter;\n        let steamedSectionBuildCount = 0;\n        let streamedSectionBuilding = false;\n        const queuedStreamedSectionBuilds = [];\n\n        const checkAndBuildStreamedSections = () => {\n            if (queuedStreamedSectionBuilds.length > 0 && !streamedSectionBuilding && !this.isDisposingOrDisposed()) {\n                streamedSectionBuilding = true;\n                const queuedBuild = queuedStreamedSectionBuilds.shift();\n                onSectionDownloaded(queuedBuild.splatBuffer, queuedBuild.firstBuild, queuedBuild.finalBuild)\n                .then(() => {\n                    streamedSectionBuilding = false;\n                    if (queuedBuild.firstBuild) {\n                        firstStreamedSectionBuildResolver();\n                    } else if (queuedBuild.finalBuild) {\n                        fullBuildResolver();\n                        this.clearSplatSceneLoadPromise();\n                    }\n                    window.setTimeout(() => {\n                        checkAndBuildStreamedSections();\n                    }, 1);\n                });\n            }\n        };\n\n        const onStreamedSectionProgress = (splatBuffer, finalBuild) => {\n            if (!this.isDisposingOrDisposed()) {\n                queuedStreamedSectionBuilds.push({\n                    splatBuffer,\n                    firstBuild: steamedSectionBuildCount === 0,\n                    finalBuild\n                });\n                steamedSectionBuildCount++;\n                checkAndBuildStreamedSections();\n            }\n        };\n\n        let fullDownloadPromise = this.loadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold,\n                                                                   onProgress, true, onStreamedSectionProgress, format);\n\n        const firstStreamedSectionBuildPromise = new AbortablePromise((resolver, rejecter) => {\n            firstStreamedSectionBuildResolver = resolver;\n            firstStreamedSectionBuildRejecter = rejecter;\n            const clearDownloadPromise = () => {\n                delete this.downloadPromisesToAbort[fullDownloadPromise.id];\n            };\n            fullDownloadPromise.then(() => {\n                clearDownloadPromise();\n            })\n            .catch((e) => {\n                if (!(e instanceof AbortedPromiseError)) {\n                    fullBuildRejecter(e);\n                    firstStreamedSectionBuildRejecter(e);\n                }\n                if (onException) onException();\n                this.clearSplatSceneLoadPromise();\n                clearDownloadPromise();\n            });\n        }, fullDownloadPromise.abortHandler);\n        this.downloadPromisesToAbort[fullDownloadPromise.id] = fullDownloadPromise;\n\n        this.setSplatSceneLoadPromise(new AbortablePromise((resolver, rejecter) => {\n            fullBuildResolver = resolver;\n            fullBuildRejecter = rejecter;\n        }));\n\n        return firstStreamedSectionBuildPromise;\n    }\n\n    /**\n     * Download a splat scene and convert to SplatBuffer instance.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {number} splatAlphaRemovalThreshold Ignore any splats with an alpha less than the specified\n     *                                            value (valid range: 0 - 255), defaults to 1\n     *\n     * @param {function} onProgress Function to be called as file data are received\n     * @param {boolean} streamBuiltSections Construct file sections into splat buffers as they are downloaded\n     * @param {function} onSectionBuilt Function to be called when new section is added to the file\n     * @param {string} format File format of the scene\n     * @return {AbortablePromise}\n     */\n    loadSplatSceneToSplatBuffer(path, splatAlphaRemovalThreshold = 1, onProgress = undefined,\n                                streamBuiltSections = false, onSectionBuilt = undefined, format) {\n        if (format === SceneFormat.Splat) {\n            return SplatLoader.loadFromURL(path, onProgress, streamBuiltSections, onSectionBuilt, splatAlphaRemovalThreshold, 0, false);\n        } else if (format === SceneFormat.KSplat) {\n            return KSplatLoader.loadFromURL(path, onProgress, streamBuiltSections, onSectionBuilt);\n        } else if (format === SceneFormat.Ply) {\n            return PlyLoader.loadFromURL(path, onProgress, streamBuiltSections, onSectionBuilt, splatAlphaRemovalThreshold, 0);\n        }\n\n        return AbortablePromise.reject(new Error(`Viewer::loadSplatSceneToSplatBuffer -> File format not supported: ${path}`));\n    }\n\n    static isStreamable(format) {\n        return format === SceneFormat.Splat || format === SceneFormat.KSplat || format === SceneFormat.Ply;\n    }\n\n    /**\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer and set up the sorting web worker.\n     * This function will terminate the existing sort worker (if there is one).\n     */\n    addSplatBuffers = function() {\n\n        return function(splatBuffers, splatBufferOptions = [], finalBuild = true,\n                        showLoadingUI = true, showLoadingSpinnerForSplatTreeBuild = true) {\n\n            if (this.isDisposingOrDisposed()) return Promise.resolve();\n\n            this.splatRenderReady = false;\n            let splatProcessingTaskId = null;\n\n            const finish = (buildResults, resolver) => {\n                if (this.isDisposingOrDisposed()) return;\n\n                if (splatProcessingTaskId !== null) {\n                    this.loadingSpinner.removeTask(splatProcessingTaskId);\n                    splatProcessingTaskId = null;\n                }\n\n                // If we aren't calculating the splat distances from the center on the GPU, the sorting worker needs splat centers and\n                // transform indexes so that it can calculate those distance values.\n                if (!this.gpuAcceleratedSort && this.sortWorker) {\n                    this.sortWorker.postMessage({\n                        'centers': buildResults.centers.buffer,\n                        'transformIndexes': buildResults.transformIndexes.buffer,\n                        'range': {\n                            'from': buildResults.from,\n                            'to': buildResults.to,\n                            'count': buildResults.count\n                        }\n                    });\n                }\n\n                this.splatRenderReady = true;\n                this.sortNeededForSceneChange = true;\n                resolver();\n            };\n\n            const performLoad = () => {\n                return new Promise((resolve) => {\n                    if (showLoadingUI) {\n                        splatProcessingTaskId = this.loadingSpinner.addTask('Processing splats...');\n                    }\n                    delayedExecute(() => {\n                        if (this.isDisposingOrDisposed()) {\n                            resolve();\n                        } else {\n                            const buildResults = this.addSplatBuffersToMesh(splatBuffers, splatBufferOptions,\n                                                                            finalBuild, showLoadingSpinnerForSplatTreeBuild);\n                            const maxSplatCount = this.splatMesh.getMaxSplatCount();\n                            if (this.sortWorker && this.sortWorker.maxSplatCount !== maxSplatCount) {\n                                this.disposeSortWorker();\n                            }\n                            if (!this.sortWorker && maxSplatCount > 0) {\n                                this.setupSortWorker(this.splatMesh).then(() => {\n                                    finish(buildResults, resolve);\n                                });\n                            } else {\n                                finish(buildResults, resolve);\n                            }\n                        }\n                    }, true);\n                });\n            };\n\n            return performLoad();\n        };\n\n    }();\n\n    /**\n     * Add one or more instances of SplatBuffer to the SplatMesh instance managed by the viewer. This function is additive; all splat\n     * buffers contained by the viewer's splat mesh before calling this function will be preserved.\n     * @param {Array<SplatBuffer>} splatBuffers SplatBuffer instances\n     * @param {Array<object>} splatBufferOptions Array of options objects: {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} finalBuild Will the splat mesh be in its final state after this build?\n     * @param {boolean} showLoadingSpinnerForSplatTreeBuild Whether or not to show the loading spinner during\n     *                                                      construction of the splat tree.\n     * @return {object} Object containing info about the splats that are updated\n     */\n    addSplatBuffersToMesh(splatBuffers, splatBufferOptions, finalBuild = true, showLoadingSpinnerForSplatTreeBuild = false) {\n        if (this.isDisposingOrDisposed()) return;\n        const allSplatBuffers = this.splatMesh.splatBuffers || [];\n        const allSplatBufferOptions = this.splatMesh.splatBufferOptions || [];\n        allSplatBuffers.push(...splatBuffers);\n        allSplatBufferOptions.push(...splatBufferOptions);\n        if (this.renderer) this.splatMesh.setRenderer(this.renderer);\n        let splatOptimizingTaskId;\n        const onSplatTreeIndexesUpload = (finished) => {\n            if (this.isDisposingOrDisposed()) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            if (showLoadingSpinnerForSplatTreeBuild && splatCount >= MIN_SPLAT_COUNT_TO_SHOW_SPLAT_TREE_LOADING_SPINNER) {\n                if (!finished && !splatOptimizingTaskId) {\n                    this.loadingSpinner.setMinimized(true, true);\n                    splatOptimizingTaskId = this.loadingSpinner.addTask('Optimizing splats...');\n                }\n            }\n        };\n        const onSplatTreeReady = (finished) => {\n            if (this.isDisposingOrDisposed()) return;\n            if (finished && splatOptimizingTaskId) {\n                this.loadingSpinner.removeTask(splatOptimizingTaskId);\n            }\n        };\n        return this.splatMesh.build(allSplatBuffers, allSplatBufferOptions, true, finalBuild, onSplatTreeIndexesUpload, onSplatTreeReady);\n    }\n\n    /**\n     * Set up the splat sorting web worker.\n     * @param {SplatMesh} splatMesh SplatMesh instance that contains the splats to be sorted\n     * @return {Promise}\n     */\n    setupSortWorker(splatMesh) {\n        if (this.isDisposingOrDisposed()) return;\n        return new Promise((resolve) => {\n            const DistancesArrayType = this.integerBasedSort ? Int32Array : Float32Array;\n            const splatCount = splatMesh.getSplatCount();\n            const maxSplatCount = splatMesh.getMaxSplatCount();\n            this.sortWorker = createSortWorker(maxSplatCount, this.sharedMemoryForWorkers,\n                                               this.integerBasedSort, this.splatMesh.dynamicMode);\n            let sortCount = 0;\n            this.sortWorker.onmessage = (e) => {\n                if (e.data.sortDone) {\n                    this.sortRunning = false;\n                    if (this.sharedMemoryForWorkers) {\n                        this.splatMesh.updateRenderIndexes(this.sortWorkerSortedIndexes, e.data.splatRenderCount);\n                    } else {\n                        const sortedIndexes = new Uint32Array(e.data.sortedIndexes.buffer, 0, e.data.splatRenderCount);\n                        this.splatMesh.updateRenderIndexes(sortedIndexes, e.data.splatRenderCount);\n                    }\n                    this.lastSortTime = e.data.sortTime;\n                    this.sortPromiseResolver();\n                    this.sortPromiseResolver = null;\n                    this.forceRenderNextFrame();\n                    if (sortCount === 0) {\n                        this.runAfterFirstSort.forEach((func) => {\n                            func();\n                        });\n                        this.runAfterFirstSort.length = 0;\n                    }\n                    sortCount++;\n                } else if (e.data.sortCanceled) {\n                    this.sortRunning = false;\n                } else if (e.data.sortSetupPhase1Complete) {\n                    console.log('Sorting web worker WASM setup complete.');\n                    if (this.sharedMemoryForWorkers) {\n                        this.sortWorkerSortedIndexes = new Uint32Array(e.data.sortedIndexesBuffer,\n                                                                       e.data.sortedIndexesOffset, maxSplatCount);\n                        this.sortWorkerIndexesToSort = new Uint32Array(e.data.indexesToSortBuffer,\n                                                                       e.data.indexesToSortOffset, maxSplatCount);\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(e.data.precomputedDistancesBuffer,\n                                                                                     e.data.precomputedDistancesOffset,\n                                                                                     maxSplatCount);\n                         this.sortWorkerTransforms = new Float32Array(e.data.transformsBuffer,\n                                                                      e.data.transformsOffset, Constants.MaxScenes * 16);\n                    } else {\n                        this.sortWorkerIndexesToSort = new Uint32Array(maxSplatCount);\n                        this.sortWorkerPrecomputedDistances = new DistancesArrayType(maxSplatCount);\n                        this.sortWorkerTransforms = new Float32Array(Constants.MaxScenes * 16);\n                    }\n                    for (let i = 0; i < splatCount; i++) this.sortWorkerIndexesToSort[i] = i;\n                    this.sortWorker.maxSplatCount = maxSplatCount;\n\n                    console.log('Sorting web worker ready.');\n                    const splatDataTextures = this.splatMesh.getSplatDataTextures();\n                    const covariancesTextureSize = splatDataTextures.covariances.size;\n                    const centersColorsTextureSize = splatDataTextures.centerColors.size;\n                    console.log('Covariances texture size: ' + covariancesTextureSize.x + ' x ' + covariancesTextureSize.y);\n                    console.log('Centers/colors texture size: ' + centersColorsTextureSize.x + ' x ' + centersColorsTextureSize.y);\n\n                    resolve();\n                }\n            };\n        });\n    }\n\n    disposeSortWorker() {\n        if (this.sortWorker) this.sortWorker.terminate();\n        this.sortWorker = null;\n        this.sortPromise = null;\n        if (this.sortPromiseResolver) {\n            this.sortPromiseResolver();\n            this.sortPromiseResolver = null;\n        }\n        this.sortRunning = false;\n    }\n\n    removeSplatScene(index, showLoadingUI = true) {\n        if (this.isLoadingOrUnloading()) {\n            throw new Error('Cannot remove splat scene while another load or unload is already in progress.');\n        }\n\n        if (this.isDisposingOrDisposed()) {\n            throw new Error('Cannot remove splat scene after dispose() is called.');\n        }\n\n        let sortPromise;\n\n        this.splatSceneRemovalPromise = new Promise((resolve, reject) => {\n            let revmovalTaskId;\n\n            if (showLoadingUI) {\n                this.loadingSpinner.removeAllTasks();\n                this.loadingSpinner.show();\n                revmovalTaskId = this.loadingSpinner.addTask('Removing splat scene...');\n            }\n\n            const checkAndHideLoadingUI = () => {\n                if (showLoadingUI) {\n                    this.loadingSpinner.hide();\n                    this.loadingSpinner.removeTask(revmovalTaskId);\n                }\n            };\n\n            const onDone = (error) => {\n                checkAndHideLoadingUI();\n                this.splatSceneRemovalPromise = null;\n                if (!error) resolve();\n                else reject(error);\n            };\n\n            const checkForEarlyExit = () => {\n                if (this.isDisposingOrDisposed()) {\n                    onDone();\n                    return true;\n                }\n                return false;\n            };\n\n            sortPromise = this.sortPromise || Promise.resolve();\n            sortPromise.then(() => {\n                if (checkForEarlyExit()) return;\n                const savedSplatBuffers = [];\n                const savedSceneOptions = [];\n                const savedSceneTransformComponents = [];\n                const savedVisibleRegionFadeStartRadius = this.splatMesh.visibleRegionFadeStartRadius;\n                for (let i = 0; i < this.splatMesh.scenes.length; i++) {\n                    if (i !== index) {\n                        const scene = this.splatMesh.scenes[i];\n                        savedSplatBuffers.push(scene.splatBuffer);\n                        savedSceneOptions.push(this.splatMesh.sceneOptions[i]);\n                        savedSceneTransformComponents.push({\n                            'position': scene.position.clone(),\n                            'quaternion': scene.quaternion.clone(),\n                            'scale': scene.scale.clone()\n                        });\n                    }\n                }\n                this.disposeSortWorker();\n                this.splatMesh.dispose();\n                this.createSplatMesh();\n                this.addSplatBuffers(savedSplatBuffers, savedSceneOptions, true, false, true)\n                .then(() => {\n                    if (checkForEarlyExit()) return;\n                    checkAndHideLoadingUI();\n                    this.splatMesh.visibleRegionFadeStartRadius = savedVisibleRegionFadeStartRadius;\n                    this.splatMesh.scenes.forEach((scene, index) => {\n                        scene.position.copy(savedSceneTransformComponents[index].position);\n                        scene.quaternion.copy(savedSceneTransformComponents[index].quaternion);\n                        scene.scale.copy(savedSceneTransformComponents[index].scale);\n                    });\n                    this.splatMesh.updateTransforms();\n                    this.splatRenderReady = false;\n                    this.updateSplatSort(true)\n                    .then(() => {\n                        if (checkForEarlyExit()) {\n                            this.splatRenderReady = true;\n                            return;\n                        }\n                        sortPromise = this.sortPromise || Promise.resolve();\n                        sortPromise.then(() => {\n                            this.splatRenderReady = true;\n                            onDone();\n                        });\n                    });\n                })\n                .catch((e) => {\n                    onDone(e);\n                });\n            });\n        });\n\n        return this.splatSceneRemovalPromise;\n    }\n\n    /**\n     * Start self-driven mode\n     */\n    start() {\n        if (this.selfDrivenMode) {\n            if (this.webXRMode) {\n                this.renderer.setAnimationLoop(this.selfDrivenUpdateFunc);\n            } else {\n                this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\n            }\n            this.selfDrivenModeRunning = true;\n        } else {\n            throw new Error('Cannot start viewer unless it is in self driven mode.');\n        }\n    }\n\n    /**\n     * Stop self-driven mode\n     */\n    stop() {\n        if (this.selfDrivenMode && this.selfDrivenModeRunning) {\n            if (!this.webXRMode) {\n                cancelAnimationFrame(this.requestFrameId);\n            }\n            this.selfDrivenModeRunning = false;\n        }\n    }\n\n    /**\n     * Dispose of all resources held directly and indirectly by this viewer.\n     */\n    async dispose() {\n        this.disposing = true;\n        let waitPromises = [];\n        let promisesToAbort = [];\n        for (let promiseKey in this.downloadPromisesToAbort) {\n            if (this.downloadPromisesToAbort.hasOwnProperty(promiseKey)) {\n                const downloadPromiseToAbort = this.downloadPromisesToAbort[promiseKey];\n                promisesToAbort.push(downloadPromiseToAbort);\n                waitPromises.push(downloadPromiseToAbort.promise);\n            }\n        }\n        if (this.sortPromise) {\n            waitPromises.push(this.sortPromise);\n        }\n        const disposePromise = Promise.all(waitPromises).finally(() => {\n            this.stop();\n            if (this.controls) {\n                this.controls.dispose();\n                this.controls = null;\n            }\n            if (this.splatMesh) {\n                this.splatMesh.dispose();\n                this.splatMesh = null;\n            }\n            if (this.sceneHelper) {\n                this.sceneHelper.dispose();\n                this.sceneHelper = null;\n            }\n            if (this.resizeObserver) {\n                this.resizeObserver.unobserve(this.rootElement);\n                this.resizeObserver = null;\n            }\n            this.disposeSortWorker();\n            this.removeEventHandlers();\n\n            this.loadingSpinner.removeAllTasks();\n            this.loadingSpinner.setContainer(null);\n            this.loadingProgressBar.hide();\n            this.loadingProgressBar.setContainer(null);\n            this.infoPanel.setContainer(null);\n\n            this.camera = null;\n            this.threeScene = null;\n            this.splatRenderReady = false;\n            this.initialized = false;\n            if (this.renderer) {\n                if (!this.usingExternalRenderer) {\n                    this.rootElement.removeChild(this.renderer.domElement);\n                    this.renderer.dispose();\n                }\n                this.renderer = null;\n            }\n\n            if (!this.usingExternalRenderer) {\n                document.body.removeChild(this.rootElement);\n            }\n\n            this.sortWorkerSortedIndexes = null;\n            this.sortWorkerIndexesToSort = null;\n            this.sortWorkerPrecomputedDistances = null;\n            this.sortWorkerTransforms = null;\n            this.disposed = true;\n            this.disposing = false;\n        });\n        promisesToAbort.forEach((toAbort) => {\n            toAbort.abort();\n        });\n        return disposePromise;\n    }\n\n    selfDrivenUpdate() {\n        if (this.selfDrivenMode && !this.webXRMode) {\n            this.requestFrameId = requestAnimationFrame(this.selfDrivenUpdateFunc);\n        }\n        this.update();\n        if (this.shouldRender()) {\n            this.render();\n            this.consecutiveRenderFrames++;\n        } else {\n            this.consecutiveRenderFrames = 0;\n        }\n        this.renderNextFrame = false;\n    }\n\n    forceRenderNextFrame() {\n        this.renderNextFrame = true;\n    }\n\n    shouldRender = function() {\n\n        let renderCount = 0;\n        const lastCameraPosition = new THREE.Vector3();\n        const lastCameraOrientation = new THREE.Quaternion();\n        const changeEpsilon = 0.0001;\n\n        return function() {\n            let shouldRender = false;\n            let cameraChanged = false;\n            if (this.camera) {\n                const cp = this.camera.position;\n                const co = this.camera.quaternion;\n                cameraChanged = Math.abs(cp.x - lastCameraPosition.x) > changeEpsilon ||\n                                Math.abs(cp.y - lastCameraPosition.y) > changeEpsilon ||\n                                Math.abs(cp.z - lastCameraPosition.z) > changeEpsilon ||\n                                Math.abs(co.x - lastCameraOrientation.x) > changeEpsilon ||\n                                Math.abs(co.y - lastCameraOrientation.y) > changeEpsilon ||\n                                Math.abs(co.z - lastCameraOrientation.z) > changeEpsilon ||\n                                Math.abs(co.w - lastCameraOrientation.w) > changeEpsilon;\n            }\n\n            shouldRender = this.renderMode !== RenderMode.Never && (renderCount === 0 || this.splatMesh.visibleRegionChanging ||\n                           cameraChanged || this.renderMode === RenderMode.Always || this.dynamicMode === true || this.renderNextFrame);\n\n            if (this.camera) {\n                lastCameraPosition.copy(this.camera.position);\n                lastCameraOrientation.copy(this.camera.quaternion);\n            }\n\n            renderCount++;\n            return shouldRender;\n        };\n\n    }();\n\n    render = function() {\n\n        return function() {\n            if (!this.initialized || !this.splatRenderReady) return;\n\n            const hasRenderables = (threeScene) => {\n                for (let child of threeScene.children) {\n                    if (child.visible) return true;\n                }\n                return false;\n            };\n\n            const savedAuoClear = this.renderer.autoClear;\n            if (hasRenderables(this.threeScene)) {\n                this.renderer.render(this.threeScene, this.camera);\n                this.renderer.autoClear = false;\n            }\n            this.renderer.render(this.splatMesh, this.camera);\n            this.renderer.autoClear = false;\n            if (this.sceneHelper.getFocusMarkerOpacity() > 0.0) this.renderer.render(this.sceneHelper.focusMarker, this.camera);\n            if (this.showControlPlane) this.renderer.render(this.sceneHelper.controlPlane, this.camera);\n            this.renderer.autoClear = savedAuoClear;\n        };\n\n    }();\n\n    update(renderer, camera) {\n        if (this.dropInMode) this.updateForDropInMode(renderer, camera);\n        if (!this.initialized || !this.splatRenderReady) return;\n        if (this.controls) {\n            this.controls.update();\n            if (this.camera.isOrthographicCamera && !this.usingExternalCamera) {\n                Viewer.setCameraPositionFromZoom(this.camera, this.camera, this.controls);\n            }\n        }\n        this.splatMesh.updateVisibleRegionFadeDistance(this.sceneRevealMode);\n        this.updateSplatSort();\n        this.updateForRendererSizeChanges();\n        this.updateSplatMesh();\n        this.updateMeshCursor();\n        this.updateFPS();\n        this.timingSensitiveUpdates();\n        this.updateInfoPanel();\n        this.updateControlPlane();\n    }\n\n    updateForDropInMode(renderer, camera) {\n        this.renderer = renderer;\n        if (this.splatMesh) this.splatMesh.setRenderer(this.renderer);\n        this.camera = camera;\n        if (this.controls) this.controls.object = camera;\n        this.init();\n    }\n\n    updateFPS = function() {\n\n        let lastCalcTime = getCurrentTime();\n        let frameCount = 0;\n\n        return function() {\n            if (this.consecutiveRenderFrames > CONSECUTIVE_RENDERED_FRAMES_FOR_FPS_CALCULATION) {\n                const currentTime = getCurrentTime();\n                const calcDelta = currentTime - lastCalcTime;\n                if (calcDelta >= 1.0) {\n                    this.currentFPS = frameCount;\n                    frameCount = 0;\n                    lastCalcTime = currentTime;\n                } else {\n                    frameCount++;\n                }\n            } else {\n                this.currentFPS = null;\n            }\n        };\n\n    }();\n\n    updateForRendererSizeChanges = function() {\n\n        const lastRendererSize = new THREE.Vector2();\n        const currentRendererSize = new THREE.Vector2();\n        let lastCameraOrthographic;\n\n        return function() {\n            if (!this.usingExternalCamera) {\n                this.renderer.getSize(currentRendererSize);\n                if (lastCameraOrthographic === undefined || lastCameraOrthographic !== this.camera.isOrthographicCamera ||\n                    currentRendererSize.x !== lastRendererSize.x || currentRendererSize.y !== lastRendererSize.y) {\n                    if (this.camera.isOrthographicCamera) {\n                        this.camera.left = -currentRendererSize.x / 2.0;\n                        this.camera.right = currentRendererSize.x / 2.0;\n                        this.camera.top = currentRendererSize.y / 2.0;\n                        this.camera.bottom = -currentRendererSize.y / 2.0;\n                    } else {\n                        this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\n                    }\n                    this.camera.updateProjectionMatrix();\n                    lastRendererSize.copy(currentRendererSize);\n                    lastCameraOrthographic = this.camera.isOrthographicCamera;\n                }\n            }\n        };\n\n    }();\n\n    timingSensitiveUpdates = function() {\n\n        let lastUpdateTime;\n\n        return function() {\n            const currentTime = getCurrentTime();\n            if (!lastUpdateTime) lastUpdateTime = currentTime;\n            const timeDelta = currentTime - lastUpdateTime;\n\n            this.updateCameraTransition(currentTime);\n            this.updateFocusMarker(timeDelta);\n\n            lastUpdateTime = currentTime;\n        };\n\n    }();\n\n    updateCameraTransition = function() {\n\n        let tempCameraTarget = new THREE.Vector3();\n        let toPreviousTarget = new THREE.Vector3();\n        let toNextTarget = new THREE.Vector3();\n\n        return function(currentTime) {\n            if (this.transitioningCameraTarget) {\n                toPreviousTarget.copy(this.previousCameraTarget).sub(this.camera.position).normalize();\n                toNextTarget.copy(this.nextCameraTarget).sub(this.camera.position).normalize();\n                const rotationAngle = Math.acos(toPreviousTarget.dot(toNextTarget));\n                const rotationSpeed = rotationAngle / (Math.PI / 3) * .65 + .3;\n                const t = (rotationSpeed / rotationAngle * (currentTime - this.transitioningCameraTargetStartTime));\n                tempCameraTarget.copy(this.previousCameraTarget).lerp(this.nextCameraTarget, t);\n                this.camera.lookAt(tempCameraTarget);\n                this.controls.target.copy(tempCameraTarget);\n                if (t >= 1.0) {\n                    this.transitioningCameraTarget = false;\n                }\n            }\n        };\n\n    }();\n\n    updateFocusMarker = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        let wasTransitioning = false;\n\n        return function(timeDelta) {\n            this.getRenderDimensions(renderDimensions);\n            if (this.transitioningCameraTarget) {\n                this.sceneHelper.setFocusMarkerVisibility(true);\n                const currentFocusMarkerOpacity = Math.max(this.sceneHelper.getFocusMarkerOpacity(), 0.0);\n                let newFocusMarkerOpacity = Math.min(currentFocusMarkerOpacity + FOCUS_MARKER_FADE_IN_SPEED * timeDelta, 1.0);\n                this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n                this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\n                wasTransitioning = true;\n                this.forceRenderNextFrame();\n            } else {\n                let currentFocusMarkerOpacity;\n                if (wasTransitioning) currentFocusMarkerOpacity = 1.0;\n                else currentFocusMarkerOpacity = Math.min(this.sceneHelper.getFocusMarkerOpacity(), 1.0);\n                if (currentFocusMarkerOpacity > 0) {\n                    this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\n                    let newFocusMarkerOpacity = Math.max(currentFocusMarkerOpacity - FOCUS_MARKER_FADE_OUT_SPEED * timeDelta, 0.0);\n                    this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n                    if (newFocusMarkerOpacity === 0.0) this.sceneHelper.setFocusMarkerVisibility(false);\n                }\n                if (currentFocusMarkerOpacity > 0.0) this.forceRenderNextFrame();\n                wasTransitioning = false;\n            }\n        };\n\n    }();\n\n    updateMeshCursor = function() {\n\n        const outHits = [];\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (this.showMeshCursor) {\n                this.forceRenderNextFrame();\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    this.sceneHelper.setMeshCursorVisibility(true);\n                    this.sceneHelper.positionAndOrientMeshCursor(outHits[0].origin, this.camera);\n                } else {\n                    this.sceneHelper.setMeshCursorVisibility(false);\n                }\n            } else {\n                if (this.sceneHelper.getMeschCursorVisibility()) this.forceRenderNextFrame();\n                this.sceneHelper.setMeshCursorVisibility(false);\n            }\n        };\n\n    }();\n\n    updateInfoPanel = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (!this.showInfo) return;\n            const splatCount = this.splatMesh.getSplatCount();\n            this.getRenderDimensions(renderDimensions);\n            const cameraLookAtPosition = this.controls ? this.controls.target : null;\n            const meshCursorPosition = this.showMeshCursor ? this.sceneHelper.meshCursor.position : null;\n            const splatRenderCountPct = splatCount > 0 ? this.splatRenderCount / splatCount * 100 : 0;\n            this.infoPanel.update(renderDimensions, this.camera.position, cameraLookAtPosition,\n                                  this.camera.up, this.camera.isOrthographicCamera, meshCursorPosition,\n                                  this.currentFPS || 'N/A', splatCount, this.splatRenderCount, splatRenderCountPct,\n                                  this.lastSortTime, this.focalAdjustment, this.splatMesh.getSplatScale(),\n                                  this.splatMesh.getPointCloudModeEnabled());\n        };\n\n    }();\n\n    updateControlPlane() {\n        if (this.showControlPlane) {\n            this.sceneHelper.setControlPlaneVisibility(true);\n            this.sceneHelper.positionAndOrientControlPlane(this.controls.target, this.camera.up);\n        } else {\n            this.sceneHelper.setControlPlaneVisibility(false);\n        }\n    }\n\n    updateSplatSort = function() {\n\n        const mvpMatrix = new THREE.Matrix4();\n        const cameraPositionArray = [];\n        const lastSortViewDir = new THREE.Vector3(0, 0, -1);\n        const sortViewDir = new THREE.Vector3(0, 0, -1);\n        const lastSortViewPos = new THREE.Vector3();\n        const sortViewOffset = new THREE.Vector3();\n        const queuedSorts = [];\n\n        const partialSorts = [\n            {\n                'angleThreshold': 0.55,\n                'sortFractions': [0.125, 0.33333, 0.75]\n            },\n            {\n                'angleThreshold': 0.65,\n                'sortFractions': [0.33333, 0.66667]\n            },\n            {\n                'angleThreshold': 0.8,\n                'sortFractions': [0.5]\n            }\n        ];\n\n        return async function(force = false) {\n            if (this.sortRunning) return;\n            if (this.splatMesh.getSplatCount() <= 0) return;\n\n            let angleDiff = 0;\n            let positionDiff = 0;\n            let needsRefreshForRotation = false;\n            let needsRefreshForPosition = false;\n\n            sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\n            angleDiff = sortViewDir.dot(lastSortViewDir);\n            positionDiff = sortViewOffset.copy(this.camera.position).sub(lastSortViewPos).length();\n\n            if (!force) {\n                if (!this.sortNeededForSceneChange && !this.splatMesh.dynamicMode && queuedSorts.length === 0) {\n                    if (angleDiff <= 0.99) needsRefreshForRotation = true;\n                    if (positionDiff >= 1.0) needsRefreshForPosition = true;\n                    if (!needsRefreshForRotation && !needsRefreshForPosition) return;\n                }\n            }\n\n            this.sortRunning = true;\n            const { splatRenderCount, shouldSortAll } = this.gatherSceneNodesForSort();\n            this.splatRenderCount = splatRenderCount;\n\n            mvpMatrix.copy(this.camera.matrixWorld).invert();\n            mvpMatrix.premultiply(this.camera.projectionMatrix);\n            mvpMatrix.multiply(this.splatMesh.matrixWorld);\n\n            if (this.gpuAcceleratedSort && (queuedSorts.length <= 1 || queuedSorts.length % 2 === 0)) {\n                await this.splatMesh.computeDistancesOnGPU(mvpMatrix, this.sortWorkerPrecomputedDistances);\n            }\n\n            if (this.splatMesh.dynamicMode || shouldSortAll) {\n                queuedSorts.push(this.splatRenderCount);\n            } else {\n                if (queuedSorts.length === 0) {\n                    for (let partialSort of partialSorts) {\n                        if (angleDiff < partialSort.angleThreshold) {\n                            for (let sortFraction of partialSort.sortFractions) {\n                                queuedSorts.push(Math.floor(this.splatRenderCount * sortFraction));\n                            }\n                            break;\n                        }\n                    }\n                    queuedSorts.push(this.splatRenderCount);\n                }\n            }\n            let sortCount = Math.min(queuedSorts.shift(), this.splatRenderCount);\n\n            cameraPositionArray[0] = this.camera.position.x;\n            cameraPositionArray[1] = this.camera.position.y;\n            cameraPositionArray[2] = this.camera.position.z;\n\n            const sortMessage = {\n                'modelViewProj': mvpMatrix.elements,\n                'cameraPosition': cameraPositionArray,\n                'splatRenderCount': this.splatRenderCount,\n                'splatSortCount': sortCount,\n                'usePrecomputedDistances': this.gpuAcceleratedSort\n            };\n            if (this.splatMesh.dynamicMode) {\n                this.splatMesh.fillTransformsArray(this.sortWorkerTransforms);\n            }\n            if (!this.sharedMemoryForWorkers) {\n                sortMessage.indexesToSort = this.sortWorkerIndexesToSort;\n                sortMessage.transforms = this.sortWorkerTransforms;\n                if (this.gpuAcceleratedSort) {\n                    sortMessage.precomputedDistances = this.sortWorkerPrecomputedDistances;\n                }\n            }\n\n            this.sortPromise = new Promise((resolve) => {\n                this.sortPromiseResolver = resolve;\n            });\n\n            this.sortWorker.postMessage({\n                'sort': sortMessage\n            });\n\n            if (queuedSorts.length === 0) {\n                lastSortViewPos.copy(this.camera.position);\n                lastSortViewDir.copy(sortViewDir);\n            }\n\n            this.sortNeededForSceneChange = false;\n        };\n\n    }();\n\n    /**\n     * Determine which splats to render by checking which are inside or close to the view frustum\n     */\n    gatherSceneNodesForSort = function() {\n\n        const nodeRenderList = [];\n        let allSplatsSortBuffer = null;\n        const tempVectorYZ = new THREE.Vector3();\n        const tempVectorXZ = new THREE.Vector3();\n        const tempVector = new THREE.Vector3();\n        const modelView = new THREE.Matrix4();\n        const baseModelView = new THREE.Matrix4();\n        const sceneTransform = new THREE.Matrix4();\n        const renderDimensions = new THREE.Vector3();\n        const forward = new THREE.Vector3(0, 0, -1);\n\n        const tempMax = new THREE.Vector3();\n        const nodeSize = (node) => {\n            return tempMax.copy(node.max).sub(node.min).length();\n        };\n\n        return function(gatherAllNodes = false) {\n\n            this.getRenderDimensions(renderDimensions);\n            const cameraFocalLength = (renderDimensions.y / 2.0) / Math.tan(this.camera.fov / 2.0 * THREE.MathUtils.DEG2RAD);\n            const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / cameraFocalLength);\n            const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / cameraFocalLength);\n            const cosFovXOver2 = Math.cos(fovXOver2);\n            const cosFovYOver2 = Math.cos(fovYOver2);\n\n            const splatTree = this.splatMesh.getSplatTree();\n\n            if (splatTree) {\n                baseModelView.copy(this.camera.matrixWorld).invert();\n                baseModelView.multiply(this.splatMesh.matrixWorld);\n\n                let nodeRenderCount = 0;\n                let splatRenderCount = 0;\n\n                for (let s = 0; s < splatTree.subTrees.length; s++) {\n                    const subTree = splatTree.subTrees[s];\n                    modelView.copy(baseModelView);\n                    if (this.splatMesh.dynamicMode) {\n                        this.splatMesh.getSceneTransform(s, sceneTransform);\n                        modelView.multiply(sceneTransform);\n                    }\n                    const nodeCount = subTree.nodesWithIndexes.length;\n                    for (let i = 0; i < nodeCount; i++) {\n                        const node = subTree.nodesWithIndexes[i];\n                        if (!node.data || !node.data.indexes || node.data.indexes.length === 0) continue;\n                        tempVector.copy(node.center).applyMatrix4(modelView);\n\n                        const distanceToNode = tempVector.length();\n                        tempVector.normalize();\n\n                        tempVectorYZ.copy(tempVector).setX(0).normalize();\n                        tempVectorXZ.copy(tempVector).setY(0).normalize();\n\n                        const cameraAngleXZDot = forward.dot(tempVectorXZ);\n                        const cameraAngleYZDot = forward.dot(tempVectorYZ);\n\n                        const ns = nodeSize(node);\n                        const outOfFovY = cameraAngleYZDot < (cosFovYOver2 - .6);\n                        const outOfFovX = cameraAngleXZDot < (cosFovXOver2 - .6);\n                        if (!gatherAllNodes && ((outOfFovX || outOfFovY) && distanceToNode > ns)) {\n                            continue;\n                        }\n                        splatRenderCount += node.data.indexes.length;\n                        nodeRenderList[nodeRenderCount] = node;\n                        node.data.distanceToNode = distanceToNode;\n                        nodeRenderCount++;\n                    }\n                }\n\n                nodeRenderList.length = nodeRenderCount;\n                nodeRenderList.sort((a, b) => {\n                    if (a.data.distanceToNode < b.data.distanceToNode) return -1;\n                    else return 1;\n                });\n\n                let currentByteOffset = splatRenderCount * Constants.BytesPerInt;\n                for (let i = 0; i < nodeRenderCount; i++) {\n                    const node = nodeRenderList[i];\n                    const windowSizeInts = node.data.indexes.length;\n                    const windowSizeBytes = windowSizeInts * Constants.BytesPerInt;\n                    let destView = new Uint32Array(this.sortWorkerIndexesToSort.buffer,\n                                                   currentByteOffset - windowSizeBytes, windowSizeInts);\n                    destView.set(node.data.indexes);\n                    currentByteOffset -= windowSizeBytes;\n                }\n\n                return {\n                    'splatRenderCount': splatRenderCount,\n                    'shouldSortAll': false\n                };\n            } else {\n                const totalSplatCount = this.splatMesh.getSplatCount();\n                if (!allSplatsSortBuffer || allSplatsSortBuffer.length !== totalSplatCount) {\n                    allSplatsSortBuffer = new Uint32Array(totalSplatCount);\n                    for (let i = 0; i < totalSplatCount; i++) {\n                        allSplatsSortBuffer[i] = i;\n                    }\n                }\n                this.sortWorkerIndexesToSort.set(allSplatsSortBuffer);\n                return {\n                    'splatRenderCount': totalSplatCount,\n                    'shouldSortAll': true\n                };\n            }\n        };\n\n    }();\n\n    getSplatMesh() {\n        return this.splatMesh;\n    }\n\n    /**\n     * Get a reference to a splat scene.\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\n     * @return {SplatScene}\n     */\n    getSplatScene(sceneIndex) {\n        return this.splatMesh.getScene(sceneIndex);\n    }\n\n    isMobile() {\n        return navigator.userAgent.includes('Mobi');\n    }\n}\n","import * as THREE from 'three';\nimport { Viewer } from './Viewer.js';\n\n/**\n * DropInViewer: Wrapper for a Viewer instance that enables it to be added to a Three.js scene like\n * any other Three.js scene object (Mesh, Object3D, etc.)\n */\nexport class DropInViewer extends THREE.Group {\n\n    constructor(options = {}) {\n        super();\n\n        options.selfDrivenMode = false;\n        options.useBuiltInControls = false;\n        options.rootElement = null;\n        options.ignoreDevicePixelRatio = false;\n        options.dropInMode = true;\n        options.camera = undefined;\n        options.renderer = undefined;\n\n        this.viewer = new Viewer(options);\n        this.splatMesh = null;\n\n        this.callbackMesh = DropInViewer.createCallbackMesh();\n        this.add(this.callbackMesh);\n        this.callbackMesh.onBeforeRender = DropInViewer.onBeforeRender.bind(this, this.viewer);\n\n    }\n\n    /**\n     * Add a single splat scene to the viewer.\n     * @param {string} path Path to splat scene to be loaded\n     * @param {object} options {\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         showLoadingUI:         Display a loading spinner while the scene is loading, defaults to true\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     *\n     *         onProgress:                 Function to be called as file data are received\n     *\n     * }\n     * @return {AbortablePromise}\n     */\n    addSplatScene(path, options = {}) {\n        if (options.showLoadingUI !== false) options.showLoadingUI = true;\n        return this.viewer.addSplatScene(path, options);\n    }\n\n    /**\n     * Add multiple splat scenes to the viewer.\n     * @param {Array<object>} sceneOptions Array of per-scene options: {\n     *\n     *         path: Path to splat scene to be loaded\n     *\n     *         splatAlphaRemovalThreshold: Ignore any splats with an alpha less than the specified\n     *                                     value (valid range: 0 - 255), defaults to 1\n     *\n     *         position (Array<number>):   Position of the scene, acts as an offset from its default position, defaults to [0, 0, 0]\n     *\n     *         rotation (Array<number>):   Rotation of the scene represented as a quaternion, defaults to [0, 0, 0, 1]\n     *\n     *         scale (Array<number>):      Scene's scale, defaults to [1, 1, 1]\n     * }\n     * @param {boolean} showLoadingUI Display a loading spinner while the scene is loading, defaults to true\n     * @return {AbortablePromise}\n     */\n    addSplatScenes(sceneOptions, showLoadingUI) {\n        if (showLoadingUI !== false) showLoadingUI = true;\n        return this.viewer.addSplatScenes(sceneOptions, showLoadingUI);\n    }\n\n    /**\n     * Get a reference to a splat scene.\n     * @param {number} sceneIndex The index of the scene to which the reference will be returned\n     * @return {SplatScene}\n     */\n    getSplatScene(sceneIndex) {\n        return this.viewer.getSplatScene(sceneIndex);\n    }\n\n    removeSplatScene(index) {\n        return this.viewer.removeSplatScene(index);\n    }\n\n    dispose() {\n        return this.viewer.dispose();\n    }\n\n    static onBeforeRender(viewer, renderer, threeScene, camera) {\n        if (this.splatMesh !== this.viewer.splatMesh) {\n            if (this.splatMesh) {\n                this.remove(this.splatMesh);\n            }\n            this.splatMesh = this.viewer.splatMesh;\n            this.add(this.viewer.splatMesh);\n        }\n        viewer.update(renderer, camera);\n    }\n\n    static createCallbackMesh() {\n        const geometry = new THREE.SphereGeometry(1, 8, 8);\n        const material = new THREE.MeshBasicMaterial();\n        material.colorWrite = false;\n        material.depthWrite = false;\n        const mesh = new THREE.Mesh(geometry, material);\n        mesh.frustumCulled = false;\n        return mesh;\n    }\n\n}\n"],"names":["THREE","Ray","Plane","MathUtils","EventDispatcher","Vector3","MOUSE","TOUCH","Quaternion","Spherical","Vector2"],"mappings":"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AAC;IAClB,aAAa,MAAM;IACnB,gBAAgB,kBAAkB,IAAI,CAAC,gDAAgD,CAAC,CAAC;IACzF,aAAa;AACb;IACA,YAAY,kBAAkB,IAAI,CAAC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,CAAC,CAAC;AAClB;IACA,YAAY,IAAI,WAAW,EAAE;IAC7B,gBAAgB,kBAAkB,IAAI,CAAC;AACvC;AACA;AACA;AACA;AACA;AACA,gBAAgB,CAAC,CAAC;IAClB,aAAa,MAAM;IACnB,gBAAgB,kBAAkB,IAAI,CAAC;AACvC;AACA;AACA;AACA,gBAAgB,CAAC,CAAC;IAClB,aAAa;AACb;IACA,YAAY,kBAAkB,IAAI,CAAC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+FAA+F,EAAE,QAAQ,CAAC,uBAAuB,CAAC,CAAC;AACnI,+FAA+F,EAAE,QAAQ,CAAC,uBAAuB,CAAC,CAAC;AACnI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,CAAC,CAAC;AACf;IACA,QAAQ,MAAM,oBAAoB,GAAG,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,CAAC,CAAC;AACf;IACA,QAAQ,MAAM,QAAQ,GAAG;IACzB,YAAY,aAAa,EAAE;IAC3B,gBAAgB,MAAM,EAAE,IAAI;IAC5B,gBAAgB,OAAO,EAAE,IAAIA,gBAAK,CAAC,OAAO,EAAE;IAC5C,aAAa;IACb,YAAY,gBAAgB,EAAE;IAC9B,gBAAgB,MAAM,EAAE,GAAG;IAC3B,gBAAgB,OAAO,EAAE,CAAC;IAC1B,aAAa;IACb,YAAY,kBAAkB,EAAE;IAChC,gBAAgB,MAAM,EAAE,GAAG;IAC3B,gBAAgB,OAAO,EAAE,CAAC;IAC1B,aAAa;IACb,YAAY,8BAA8B,EAAE;IAC5C,gBAAgB,MAAM,EAAE,GAAG;IAC3B,gBAAgB,OAAO,EAAE,GAAG;IAC5B,aAAa;IACb,YAAY,qBAAqB,EAAE;IACnC,gBAAgB,MAAM,EAAE,GAAG;IAC3B,gBAAgB,OAAO,EAAE,GAAG;IAC5B,aAAa;IACb,YAAY,aAAa,EAAE;IAC3B,gBAAgB,MAAM,EAAE,GAAG;IAC3B,gBAAgB,OAAO,EAAE,GAAG;IAC5B,aAAa;IACb,YAAY,iBAAiB,EAAE;IAC/B,gBAAgB,MAAM,EAAE,GAAG;IAC3B,gBAAgB,OAAO,EAAE,GAAG;IAC5B,aAAa;IACb,YAAY,oBAAoB,EAAE;IAClC,gBAAgB,MAAM,EAAE,GAAG;IAC3B,gBAAgB,OAAO,EAAE,IAAI;IAC7B,aAAa;IACb,YAAY,sBAAsB,EAAE;IACpC,gBAAgB,MAAM,EAAE,GAAG;IAC3B,gBAAgB,OAAO,EAAE,IAAI;IAC7B,aAAa;IACb,YAAY,OAAO,EAAE;IACrB,gBAAgB,MAAM,EAAE,IAAI;IAC5B,gBAAgB,OAAO,EAAE,IAAIA,gBAAK,CAAC,OAAO,EAAE;IAC5C,aAAa;IACb,YAAY,WAAW,EAAE;IACzB,gBAAgB,MAAM,EAAE,GAAG;IAC3B,gBAAgB,OAAO,EAAE,GAAG;IAC5B,aAAa;IACb,YAAY,wBAAwB,EAAE;IACtC,gBAAgB,MAAM,EAAE,GAAG;IAC3B,gBAAgB,OAAO,EAAE,GAAG;IAC5B,aAAa;IACb,YAAY,UAAU,EAAE;IACxB,gBAAgB,MAAM,EAAE,IAAI;IAC5B,gBAAgB,OAAO,EAAE,IAAIA,gBAAK,CAAC,OAAO,EAAE;IAC5C,aAAa;IACb,YAAY,eAAe,EAAE;IAC7B,gBAAgB,MAAM,EAAE,IAAI;IAC5B,gBAAgB,OAAO,EAAE,IAAIA,gBAAK,CAAC,OAAO,EAAE;IAC5C,aAAa;IACb,YAAY,YAAY,EAAE;IAC1B,gBAAgB,MAAM,EAAE,IAAI;IAC5B,gBAAgB,OAAO,EAAE,IAAIA,gBAAK,CAAC,KAAK,EAAE;IAC1C,aAAa;IACb,YAAY,wBAAwB,EAAE;IACtC,gBAAgB,MAAM,EAAE,IAAI;IAC5B,gBAAgB,OAAO,EAAE,IAAIA,gBAAK,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;IACtD,aAAa;IACb,YAAY,0BAA0B,EAAE;IACxC,gBAAgB,MAAM,EAAE,IAAI;IAC5B,gBAAgB,OAAO,EAAE,IAAIA,gBAAK,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;IACtD,aAAa;IACb,YAAY,YAAY,EAAE;IAC1B,gBAAgB,MAAM,EAAE,GAAG;IAC3B,gBAAgB,OAAO,EAAE,UAAU;IACnC,aAAa;IACb,YAAY,uBAAuB,EAAE;IACrC,gBAAgB,MAAM,EAAE,GAAG;IAC3B,gBAAgB,OAAO,EAAE,qBAAqB,GAAG,CAAC,GAAG,CAAC;IACtD,aAAa;IACb,SAAS,CAAC;AACV;IACA,QAAQ,IAAI,WAAW,EAAE;IACzB,YAAY,QAAQ,CAAC,yBAAyB,CAAC,GAAG;IAClD,gBAAgB,MAAM,EAAE,GAAG;IAC3B,gBAAgB,OAAO,EAAE,IAAI;IAC7B,aAAa,CAAC;IACd,YAAY,MAAM,iBAAiB,GAAG,EAAE,CAAC;IACzC,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,SAAS,EAAE,CAAC,EAAE,EAAE;IAC1D,gBAAgB,iBAAiB,CAAC,IAAI,CAAC,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC,CAAC;IAC5D,aAAa;IACb,YAAY,QAAQ,CAAC,YAAY,CAAC,GAAG;IACrC,gBAAgB,MAAM,EAAE,MAAM;IAC9B,gBAAgB,OAAO,EAAE,iBAAiB;IAC1C,aAAa,CAAC;IACd,YAAY,QAAQ,CAAC,6BAA6B,CAAC,GAAG;IACtD,gBAAgB,MAAM,EAAE,IAAI;IAC5B,gBAAgB,OAAO,EAAE,IAAIA,gBAAK,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;IACtD,aAAa,CAAC;IACd,SAAS;AACT;IACA,QAAQ,MAAM,QAAQ,GAAG,IAAIA,gBAAK,CAAC,cAAc,CAAC;IAClD,YAAY,QAAQ,EAAE,QAAQ;IAC9B,YAAY,YAAY,EAAE,kBAAkB;IAC5C,YAAY,cAAc,EAAE,oBAAoB;IAChD,YAAY,WAAW,EAAE,IAAI;IAC7B,YAAY,SAAS,EAAE,GAAG;IAC1B,YAAY,QAAQ,EAAEA,gBAAK,CAAC,cAAc;IAC1C,YAAY,SAAS,EAAE,IAAI;IAC3B,YAAY,UAAU,EAAE,KAAK;IAC7B,YAAY,IAAI,EAAEA,gBAAK,CAAC,UAAU;IAClC,SAAS,CAAC,CAAC;AACX;IACA,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,OAAO,aAAa,CAAC,aAAa,EAAE;AACxC;IACA,QAAQ,MAAM,YAAY,GAAG,IAAIA,gBAAK,CAAC,cAAc,EAAE,CAAC;IACxD,QAAQ,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAClD;IACA;IACA,QAAQ,MAAM,cAAc,GAAG,IAAI,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACvD,QAAQ,MAAM,SAAS,GAAG,IAAIA,gBAAK,CAAC,eAAe,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;IACvE,QAAQ,YAAY,CAAC,YAAY,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;IACzD,QAAQ,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAC7C,QAAQ,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC5C,QAAQ,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;IAC3C,QAAQ,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;IAC5C,QAAQ,SAAS,CAAC,WAAW,GAAG,IAAI,CAAC;AACrC;IACA,QAAQ,MAAM,QAAQ,GAAG,IAAIA,gBAAK,CAAC,uBAAuB,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;AAChF;IACA;IACA,QAAQ,MAAM,eAAe,GAAG,IAAI,WAAW,CAAC,aAAa,CAAC,CAAC;IAC/D,QAAQ,MAAM,YAAY,GAAG,IAAIA,gBAAK,CAAC,wBAAwB,CAAC,eAAe,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;IAC3F,QAAQ,YAAY,CAAC,QAAQ,CAACA,gBAAK,CAAC,gBAAgB,CAAC,CAAC;IACtD,QAAQ,QAAQ,CAAC,YAAY,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;AAC1D;IACA,QAAQ,QAAQ,CAAC,aAAa,GAAG,CAAC,CAAC;AACnC;IACA,QAAQ,OAAO,QAAQ,CAAC;IACxB,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,OAAO,WAAW,CAAC,YAAY,EAAE,YAAY,EAAE;IACnD,QAAQ,MAAM,MAAM,GAAG,EAAE,CAAC;IAC1B,QAAQ,MAAM,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;IAC5C,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACtD,YAAY,MAAM,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;IAChD,YAAY,MAAM,OAAO,GAAG,YAAY,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IAClD,YAAY,IAAI,aAAa,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACjE,YAAY,IAAI,aAAa,GAAG,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACpE,YAAY,IAAI,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3D,YAAY,MAAM,QAAQ,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IAC1E,YAAY,MAAM,QAAQ,GAAG,IAAIA,gBAAK,CAAC,UAAU,EAAE,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IAC7E,YAAY,MAAM,KAAK,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IACpE,YAAY,MAAM,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,WAAW,CAAC,WAAW,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,CAAC,0BAA0B,IAAI,CAAC,CAAC,CAAC;IAC/H,SAAS;IACT,QAAQ,OAAO,MAAM,CAAC;IACtB,KAAK;AACL;IACA,IAAI,OAAO,WAAW,CAAC,WAAW,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,YAAY,EAAE;IAC7E,QAAQ,OAAO,IAAI,UAAU,CAAC,WAAW,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,YAAY,CAAC,CAAC;IACpF,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,OAAO,mBAAmB,CAAC,YAAY,EAAE;IAC7C,QAAQ,MAAM,kBAAkB,GAAG,EAAE,CAAC;IACtC,QAAQ,MAAM,aAAa,GAAG,EAAE,CAAC;IACjC,QAAQ,IAAI,eAAe,GAAG,CAAC,CAAC;IAChC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACtD,YAAY,MAAM,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;IAChD,YAAY,MAAM,aAAa,GAAG,WAAW,CAAC,gBAAgB,EAAE,CAAC;IACjE,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC,EAAE,EAAE;IACpD,gBAAgB,kBAAkB,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;IACxD,gBAAgB,aAAa,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;IACnD,gBAAgB,eAAe,EAAE,CAAC;IAClC,aAAa;IACb,SAAS;IACT,QAAQ,OAAO;IACf,YAAY,kBAAkB;IAC9B,YAAY,aAAa;IACzB,SAAS,CAAC;IACV,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,KAAK,cAAc,GAAG,SAAS,SAAS,GAAG,EAAE,EAAE,wBAAwB,EAAE,uBAAuB,EAAE;IAClG,QAAQ,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,KAAK;IACxC,YAAY,IAAI,CAAC,gBAAgB,EAAE,CAAC;IACpC;IACA;IACA,YAAY,IAAI,CAAC,aAAa,GAAG,IAAI,SAAS,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;IACxD,YAAY,MAAM,cAAc,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;IACrD,YAAY,MAAM,UAAU,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACnD,YAAY,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC,UAAU,KAAK;IACtE,gBAAgB,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;IAC3D,gBAAgB,MAAM,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;IAC1E,gBAAgB,MAAM,QAAQ,GAAG,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IAC5D,gBAAgB,OAAO,UAAU,CAAC,CAAC,IAAI,QAAQ,CAAC;IAChD,aAAa,EAAE,wBAAwB,EAAE,uBAAuB,CAAC;IACjE,aAAa,IAAI,CAAC,MAAM;IACxB,gBAAgB,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,GAAG,cAAc,CAAC;IACrE,gBAAgB,OAAO,CAAC,GAAG,CAAC,mBAAmB,GAAG,SAAS,GAAG,KAAK,CAAC,CAAC;IACrE,gBAAgB,IAAI,IAAI,CAAC,QAAQ,EAAE;IACnC,oBAAoB,OAAO,EAAE,CAAC;IAC9B,iBAAiB,MAAM;AACvB;IACA,oBAAoB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC;IACxD,oBAAoB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;AAC9C;IACA,oBAAoB,IAAI,kBAAkB,GAAG,CAAC,CAAC;IAC/C,oBAAoB,IAAI,aAAa,GAAG,CAAC,CAAC;IAC1C,oBAAoB,IAAI,aAAa,GAAG,CAAC,CAAC;IAC1C,oBAAoB,IAAI,SAAS,GAAG,CAAC,CAAC;AACtC;IACA,oBAAoB,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,IAAI,KAAK;IACzD,wBAAwB,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IACxE,wBAAwB,IAAI,cAAc,GAAG,CAAC,EAAE;IAChD,4BAA4B,aAAa,IAAI,cAAc,CAAC;IAC5D,4BAA4B,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,cAAc,CAAC,CAAC;IACpF,4BAA4B,SAAS,EAAE,CAAC;IACxC,4BAA4B,kBAAkB,EAAE,CAAC;IACjD,yBAAyB;IACzB,qBAAqB,CAAC,CAAC;IACvB,oBAAoB,OAAO,CAAC,GAAG,CAAC,CAAC,kBAAkB,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;IACrF,oBAAoB,OAAO,CAAC,GAAG,CAAC,CAAC,6BAA6B,EAAE,kBAAkB,CAAC,CAAC,CAAC,CAAC;IACtF,oBAAoB,aAAa,GAAG,aAAa,GAAG,SAAS,CAAC;IAC9D,oBAAoB,OAAO,CAAC,GAAG,CAAC,CAAC,0BAA0B,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC;IAC9E,oBAAoB,OAAO,CAAC,GAAG,CAAC,CAAC,mBAAmB,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC,CAAC;IAC9E,oBAAoB,OAAO,EAAE,CAAC;IAC9B,iBAAiB;IACjB,aAAa,CAAC,CAAC;IACf,SAAS,CAAC,CAAC;IACX,KAAK,CAAC;AACN;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,KAAK,CAAC,YAAY,EAAE,YAAY,EAAE,mBAAmB,GAAG,IAAI,EAAE,UAAU,GAAG,KAAK;IACpF,UAAU,wBAAwB,EAAE,uBAAuB,EAAE;AAC7D;IACA,QAAQ,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACzC,QAAQ,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;AACrC;IACA,QAAQ,MAAM,aAAa,GAAG,SAAS,CAAC,oCAAoC,CAAC,YAAY,CAAC,CAAC;AAC3F;IACA,QAAQ,MAAM,SAAS,GAAG,SAAS,CAAC,WAAW,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;IAC5E,QAAQ,IAAI,mBAAmB,EAAE;IACjC,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACjF,gBAAgB,MAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;IAC9C,gBAAgB,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACvD,gBAAgB,QAAQ,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;IAC1D,aAAa;IACb,SAAS;IACT,QAAQ,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC;AAChC;IACA,QAAQ,IAAI,mBAAmB,GAAG,KAAK,CAAC;IACxC,QAAQ,IAAI,YAAY,CAAC,MAAM,KAAK,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE;IACjE,YAAY,mBAAmB,GAAG,IAAI,CAAC;IACvC,SAAS,MAAM;IACf,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC1D,gBAAgB,MAAM,WAAW,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;IACpD,gBAAgB,IAAI,WAAW,KAAK,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE;IACzE,oBAAoB,mBAAmB,GAAG,IAAI,CAAC;IAC/C,oBAAoB,MAAM;IAC1B,iBAAiB;IACjB,aAAa;IACb,SAAS;AACT;IACA,QAAQ,IAAI,aAAa,GAAG,IAAI,CAAC;IACjC,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC;IACpC,YAAY,IAAI,CAAC,mBAAmB,KAAK,IAAI,CAAC,MAAM,CAAC,MAAM;IAC3D,YAAY,IAAI,CAAC,sBAAsB,KAAK,aAAa;IACzD,YAAY,mBAAmB,EAAE;IACjC,gBAAgB,aAAa,GAAG,KAAK,CAAC;IACtC,QAAQ;AACR;IACA,OAAO,IAAI,CAAC,aAAa,EAAE;IAC3B,YAAY,IAAI,CAAC,WAAW,GAAG,IAAIA,gBAAK,CAAC,IAAI,EAAE,CAAC;IAChD,YAAY,IAAI,CAAC,+BAA+B,GAAG,CAAC,CAAC;IACrD,YAAY,IAAI,CAAC,yBAAyB,GAAG,CAAC,CAAC;IAC/C,YAAY,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;IACzC,YAAY,IAAI,CAAC,4BAA4B,GAAG,CAAC,CAAC;IAClD,YAAY,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC;IACtC,YAAY,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;IACtC,YAAY,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;IACzC,YAAY,IAAI,CAAC,sBAAsB,GAAG,CAAC,CAAC;IAC5C,YAAY,IAAI,CAAC,eAAe,EAAE,CAAC;IACnC,YAAY,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;IACnE,YAAY,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW;IACtF,oDAAoD,IAAI,CAAC,uBAAuB,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,qBAAqB,CAAC,CAAC;IAC/H,YAAY,MAAM,SAAS,GAAG,SAAS,CAAC,mBAAmB,CAAC,YAAY,CAAC,CAAC;IAC1E,YAAY,IAAI,CAAC,oCAAoC,GAAG,SAAS,CAAC,kBAAkB,CAAC;IACrF,YAAY,IAAI,CAAC,+BAA+B,GAAG,SAAS,CAAC,aAAa,CAAC;IAC3E,SAAS;AACT;IACA,QAAQ,IAAI,IAAI,CAAC,+BAA+B,EAAE,IAAI,CAAC,0CAA0C,EAAE,CAAC;IACpG,QAAQ,IAAI,CAAC,4BAA4B,CAAC,aAAa,CAAC,CAAC;AACzD;IACA,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACrD,YAAY,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IACrD,SAAS;AACT;IACA,QAAQ,MAAM,YAAY,GAAG;IAC7B,YAAY,MAAM,EAAE,IAAI,CAAC,mBAAmB;IAC5C,YAAY,IAAI,EAAE,IAAI,CAAC,aAAa,EAAE,GAAG,CAAC;IAC1C,YAAY,OAAO,EAAE,IAAI,CAAC,aAAa,EAAE,GAAG,IAAI,CAAC,mBAAmB;IACpE,SAAS,CAAC;IACV,QAAQ,IAAI,CAAC,IAAI,CAAC,+BAA+B,EAAE;IACnD,YAAY,YAAY,CAAC,OAAO,GAAG,IAAI,CAAC,gCAAgC;IACxE,mCAAmC,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,aAAa,CAAC;IAC9E,mCAAmC,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;IAC7E,YAAY,YAAY,CAAC,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC;IACpF,SAAS;AACT;IACA,QAAQ,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;IACxD,QAAQ,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAC9D,QAAQ,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;AACtD;IACA,QAAQ,IAAI,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;IAClD,YAAY,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,0BAA0B,IAAI,CAAC,CAAC;IACpG,gCAAgC,wBAAwB,EAAE,uBAAuB,CAAC;IAClF,aAAa,IAAI,CAAC,MAAM;IACxB,gBAAgB,IAAI,IAAI,CAAC,wBAAwB,EAAE,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACjG,aAAa,CAAC,CAAC;IACf,SAAS;AACT;IACA,QAAQ,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;AAChD;IACA,QAAQ,OAAO,YAAY,CAAC;IAC5B,KAAK;AACL;IACA;IACA;IACA;IACA,IAAI,OAAO,GAAG;IACd,QAAQ,IAAI,CAAC,eAAe,EAAE,CAAC;IAC/B,QAAQ,IAAI,CAAC,eAAe,EAAE,CAAC;IAC/B,QAAQ,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAChC,QAAQ,IAAI,IAAI,CAAC,+BAA+B,EAAE;IAClD,YAAY,IAAI,IAAI,CAAC,gCAAgC,EAAE;IACvD,gBAAgB,YAAY,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;IACpE,gBAAgB,IAAI,CAAC,gCAAgC,GAAG,IAAI,CAAC;IAC7D,aAAa;IACb,YAAY,IAAI,CAAC,uCAAuC,EAAE,CAAC;IAC3D,SAAS;IACT,QAAQ,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;IACzB,QAAQ,IAAI,CAAC,0BAA0B,GAAG;IAC1C,YAAY,IAAI,EAAE,IAAI;IACtB,YAAY,cAAc,EAAE,IAAI;IAChC,YAAY,gBAAgB,EAAE,IAAI;IAClC,YAAY,SAAS,EAAE,IAAI;IAC3B,YAAY,eAAe,EAAE,IAAI;IACjC,YAAY,wBAAwB,EAAE,IAAI;IAC1C,YAAY,oBAAoB,EAAE,IAAI;IACtC,YAAY,YAAY,EAAE,CAAC,CAAC;IAC5B,YAAY,kBAAkB,EAAE,CAAC,CAAC;IAClC,YAAY,qBAAqB,EAAE,CAAC,CAAC;IACrC,YAAY,gBAAgB,EAAE,EAAE;IAChC,SAAS,CAAC;IACV,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC7B;IACA,QAAQ,IAAI,CAAC,oCAAoC,GAAG,EAAE,CAAC;IACvD,QAAQ,IAAI,CAAC,+BAA+B,GAAG,EAAE,CAAC;AAClD;IACA,QAAQ,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;IACrC,QAAQ,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;IAClC,QAAQ,IAAI,CAAC,sBAAsB,GAAG,CAAC,CAAC;IACxC,QAAQ,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;IACrC,QAAQ,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC;IAClC,QAAQ,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;AAChC;IACA,QAAQ,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;AAC/B;IACA,QAAQ,IAAI,CAAC,WAAW,GAAG,IAAIA,gBAAK,CAAC,IAAI,EAAE,CAAC;IAC5C,QAAQ,IAAI,CAAC,qBAAqB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACzD,QAAQ,IAAI,CAAC,+BAA+B,GAAG,CAAC,CAAC;IACjD,QAAQ,IAAI,CAAC,yBAAyB,GAAG,CAAC,CAAC;IAC3C,QAAQ,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;IACrC,QAAQ,IAAI,CAAC,4BAA4B,GAAG,CAAC,CAAC;IAC9C,QAAQ,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;AAC3C;IACA,QAAQ,IAAI,CAAC,UAAU,GAAG,GAAG,CAAC;IAC9B,QAAQ,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;AAC3C;IACA,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IAC7B,QAAQ,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;IACjC,QAAQ,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;IAC7B,KAAK;AACL;IACA;IACA;IACA;IACA,IAAI,eAAe,GAAG;IACtB,QAAQ,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,KAAK,aAAa,EAAE;IAC9D,YAAY,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IACpC,YAAY,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACjC,SAAS;IACT,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE;IAC3B,YAAY,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IACpC,YAAY,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACjC,SAAS;IACT,KAAK;AACL;IACA,IAAI,eAAe,GAAG;IACtB,QAAQ,KAAK,IAAI,UAAU,IAAI,IAAI,CAAC,iBAAiB,EAAE;IACvD,YAAY,IAAI,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;IACnE,gBAAgB,MAAM,gBAAgB,GAAG,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;IAC5E,gBAAgB,IAAI,gBAAgB,CAAC,OAAO,EAAE;IAC9C,oBAAoB,gBAAgB,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IACvD,oBAAoB,gBAAgB,CAAC,OAAO,GAAG,IAAI,CAAC;IACpD,iBAAiB;IACjB,aAAa;IACb,SAAS;IACT,QAAQ,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;IACtC,KAAK;AACL;IACA,IAAI,gBAAgB,GAAG;IACvB,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE;IAC5B,YAAY,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;IACrC,YAAY,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IAClC,SAAS,MAAM,IAAI,IAAI,CAAC,aAAa,EAAE;IACvC,YAAY,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;IACzC,YAAY,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IACtC,SAAS;IACT,KAAK;AACL;IACA,IAAI,YAAY,GAAG;IACnB,QAAQ,OAAO,IAAI,CAAC,SAAS,CAAC;IAC9B,KAAK;AACL;IACA,IAAI,gBAAgB,CAAC,QAAQ,EAAE;IAC/B,QAAQ,IAAI,CAAC,wBAAwB,GAAG,QAAQ,CAAC;IACjD,KAAK;IACL;IACA;IACA;IACA;IACA,IAAI,4BAA4B,CAAC,aAAa,EAAE;IAChD,QAAQ,IAAI,CAAC,yBAAyB,CAAC,aAAa,CAAC,CAAC;IACtD,QAAQ,IAAI,IAAI,CAAC,+BAA+B,EAAE;IAClD,YAAY,IAAI,CAAC,6CAA6C,CAAC,aAAa,CAAC,CAAC;IAC9E,YAAY,IAAI,CAAC,sDAAsD,CAAC,aAAa,CAAC,CAAC;IACvF,SAAS;IACT,KAAK;AACL;IACA,IAAI,OAAO,0BAA0B,CAAC,UAAU,EAAE,QAAQ,EAAE,YAAY,EAAE,aAAa,EAAE,gBAAgB,EAAE,gBAAgB,EAAE;IAC7H,QAAQ,MAAM,cAAc,GAAG,gBAAgB,GAAG,gBAAgB,CAAC;AACnE;IACA,QAAQ,MAAM,gBAAgB,GAAG,UAAU,GAAG,cAAc,CAAC;IAC7D,QAAQ,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAgB,GAAG,YAAY,CAAC,CAAC;IACrE,QAAQ,MAAM,eAAe,GAAG,QAAQ,GAAG,YAAY,GAAG,gBAAgB,CAAC;AAC3E;IACA,QAAQ,MAAM,cAAc,GAAG,QAAQ,GAAG,cAAc,CAAC;IACzD,QAAQ,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,GAAG,YAAY,CAAC,CAAC;IACjE,QAAQ,MAAM,gBAAgB,GAAG,MAAM,GAAG,YAAY,GAAG,gBAAgB,IAAI,YAAY,GAAG,gBAAgB,CAAC,CAAC;AAC9G;IACA,QAAQ,OAAO;IACf,YAAY,WAAW,EAAE,eAAe;IACxC,YAAY,SAAS,EAAE,gBAAgB;IACvC,YAAY,UAAU,EAAE,QAAQ;IAChC,YAAY,QAAQ,EAAE,MAAM;IAC5B,SAAS,CAAC;IACV,KAAK;AACL;IACA,KAAK,iBAAiB,CAAC,UAAU,EAAE,WAAW,EAAE,YAAY,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,eAAe,EAAE;IACnH,QAAQ,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;IAChD,QAAQ,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;IAC9C,QAAQ,MAAM,YAAY,GAAG,SAAS,CAAC,0BAA0B,CAAC,IAAI,CAAC,mBAAmB,EAAE,UAAU,GAAG,CAAC,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC;IAC9H,kEAAkE,WAAW,CAAC,IAAI,CAAC,CAAC,EAAE,gBAAgB,EAAE,gBAAgB,CAAC,CAAC;IAC1H,QAAQ,MAAM,kBAAkB,GAAG,YAAY,CAAC,OAAO,GAAG,YAAY,CAAC,SAAS,CAAC;IACjF,QAAQ,MAAM,cAAc,GAAG,IAAI,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM;IAC3E,0DAA0D,YAAY,CAAC,SAAS,GAAG,eAAe,EAAE,kBAAkB,CAAC,CAAC;IACxH,QAAQ,MAAM,YAAY,GAAG,YAAY,CAAC,MAAM,GAAG,YAAY,CAAC,QAAQ,GAAG,CAAC,CAAC;IAC7E,QAAQ,MAAM,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC;IAChD,QAAQ,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;IACjE,QAAQ,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC;IAC7F,QAAQ,MAAM,cAAc,GAAG,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC;IACtE,QAAQ,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC,UAAU,EAAE,YAAY,CAAC,cAAc,CAAC,CAAC;IACnE,QAAQ,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,UAAU,EAAE,CAAC,EAAE,CAAC,EAAE,YAAY,CAAC,QAAQ;IACnE,yBAAyB,WAAW,CAAC,IAAI,CAAC,CAAC,EAAE,YAAY,EAAE,QAAQ,EAAE,MAAM,EAAE,cAAc,CAAC,CAAC;IAC7F,QAAQ,EAAE,CAAC,WAAW,CAAC,EAAE,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;IACtD,KAAK;AACL;IACA;IACA;IACA;IACA;IACA,IAAI,yBAAyB,CAAC,aAAa,EAAE;AAC7C;IACA,QAAQ,IAAI,CAAC,iCAAiC,CAAC,aAAa,EAAE,2BAA2B,EAAE,eAAe,CAAC,CAAC;AAC5G;IACA,QAAQ,MAAM,8BAA8B,GAAG,CAAC,CAAC;IACjD,QAAQ,MAAM,gCAAgC,GAAG,CAAC,CAAC;IACnD,QAAQ,MAAM,oCAAoC,GAAG,CAAC,CAAC;AACvD;IACA,QAAQ,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;IACtD,QAAQ,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;AAChD;IACA,QAAQ,MAAM,4BAA4B,GAAG,CAAC,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,kBAAkB,KAAK;IAChG,YAAY,KAAK,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC,EAAE,EAAE;IAC5C,gBAAgB,MAAM,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC;IACzC,gBAAgB,MAAM,WAAW,GAAG,CAAC,GAAG,CAAC,CAAC;IAC1C,gBAAgB,MAAM,gBAAgB,GAAG,CAAC,GAAG,CAAC,CAAC;IAC/C,gBAAgB,kBAAkB,CAAC,gBAAgB,CAAC,GAAG,kBAAkB,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IAC9F,gBAAgB,kBAAkB,CAAC,gBAAgB,GAAG,CAAC,CAAC,GAAG,gBAAgB,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;IAClG,gBAAgB,kBAAkB,CAAC,gBAAgB,GAAG,CAAC,CAAC,GAAG,gBAAgB,CAAC,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;IACtG,gBAAgB,kBAAkB,CAAC,gBAAgB,GAAG,CAAC,CAAC,GAAG,gBAAgB,CAAC,OAAO,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC;IACtG,aAAa;IACb,SAAS,CAAC;AACV;IACA,QAAQ,MAAM,sBAAsB,GAAG,CAAC,gBAAgB,EAAE,iBAAiB,KAAK;IAChF,YAAY,MAAM,OAAO,GAAG,IAAIA,gBAAK,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC1D,YAAY,OAAO,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,gBAAgB,GAAG,aAAa,GAAG,iBAAiB,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC;IAChH,YAAY,OAAO,OAAO,CAAC;IAC3B,SAAS,CAAC;AACV;IACA,QAAQ,IAAI,CAAC,aAAa,EAAE;AAC5B;IACA,YAAY,IAAI,CAAC,eAAe,EAAE,CAAC;AACnC;IACA,YAAY,MAAM,WAAW,GAAG,IAAI,YAAY,CAAC,aAAa,GAAG,8BAA8B,CAAC,CAAC;IACjG,YAAY,MAAM,OAAO,GAAG,IAAI,YAAY,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;IAChE,YAAY,MAAM,MAAM,GAAG,IAAI,UAAU,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;IAC7D,YAAY,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AACnE;IACA;IACA,YAAY,MAAM,UAAU,GAAG,sBAAsB,CAAC,8BAA8B,EAAE,CAAC,CAAC,CAAC;IACzF,YAAY,IAAI,mBAAmB,GAAG,IAAI,CAAC,6BAA6B,GAAG,WAAW,GAAG,YAAY,CAAC;IACtG,YAAY,IAAI,sBAAsB,GAAG,IAAI,CAAC,6BAA6B,GAAGA,gBAAK,CAAC,aAAa,GAAGA,gBAAK,CAAC,SAAS,CAAC;IACpH,YAAY,MAAM,iBAAiB,GAAG,IAAI,mBAAmB,CAAC,UAAU,CAAC,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,8BAA8B,CAAC,CAAC;IAC5H,YAAY,iBAAiB,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;IAC/C,YAAY,MAAM,MAAM,GAAG,IAAIA,gBAAK,CAAC,WAAW,CAAC,iBAAiB,EAAE,UAAU,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,EAAEA,gBAAK,CAAC,QAAQ,EAAE,sBAAsB,CAAC,CAAC;IACxI,YAAY,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC;IACtC,YAAY,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,kBAAkB,CAAC,KAAK,GAAG,MAAM,CAAC;IACrE,YAAY,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,sBAAsB,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;AACjF;IACA;IACA,YAAY,MAAM,kBAAkB,GAAG,sBAAsB,CAAC,gCAAgC,EAAE,CAAC,CAAC,CAAC;IACnG,YAAY,MAAM,iBAAiB,GAAG,IAAI,WAAW,CAAC,kBAAkB,CAAC,CAAC,GAAG,kBAAkB,CAAC,CAAC,GAAG,gCAAgC,CAAC,CAAC;IACtI,YAAY,4BAA4B,CAAC,CAAC,EAAE,UAAU,EAAE,OAAO,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC;IAC5F,YAAY,MAAM,cAAc,GAAG,IAAIA,gBAAK,CAAC,WAAW,CAAC,iBAAiB,EAAE,kBAAkB,CAAC,CAAC,EAAE,kBAAkB,CAAC,CAAC;IACtH,yDAAyDA,gBAAK,CAAC,iBAAiB,EAAEA,gBAAK,CAAC,eAAe,CAAC,CAAC;IACzG,YAAY,cAAc,CAAC,cAAc,GAAG,UAAU,CAAC;IACvD,YAAY,cAAc,CAAC,WAAW,GAAG,IAAI,CAAC;IAC9C,YAAY,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,oBAAoB,CAAC,KAAK,GAAG,cAAc,CAAC;IAC/E,YAAY,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,wBAAwB,CAAC,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IAC3F,YAAY,IAAI,CAAC,QAAQ,CAAC,kBAAkB,GAAG,IAAI,CAAC;AACpD;IACA,YAAY,IAAI,CAAC,iBAAiB,GAAG;IACrC,gBAAgB,UAAU,EAAE;IAC5B,oBAAoB,aAAa,EAAE,WAAW;IAC9C,oBAAoB,SAAS,EAAE,OAAO;IACtC,oBAAoB,QAAQ,EAAE,MAAM;IACpC,iBAAiB;IACjB,gBAAgB,aAAa,EAAE;IAC/B,oBAAoB,MAAM,EAAE,iBAAiB;IAC7C,oBAAoB,SAAS,EAAE,MAAM;IACrC,oBAAoB,MAAM,EAAE,UAAU;IACtC,iBAAiB;IACjB,gBAAgB,cAAc,EAAE;IAChC,oBAAoB,MAAM,EAAE,iBAAiB;IAC7C,oBAAoB,SAAS,EAAE,cAAc;IAC7C,oBAAoB,MAAM,EAAE,kBAAkB;IAC9C,iBAAiB;IACjB,aAAa,CAAC;AACd;IACA,YAAY,IAAI,IAAI,CAAC,WAAW,EAAE;IAClC,gBAAgB,MAAM,uBAAuB,GAAG,sBAAsB,CAAC,oCAAoC,EAAE,CAAC,CAAC,CAAC;IAChH,gBAAgB,MAAM,sBAAsB,GAAG,IAAI,WAAW,CAAC,uBAAuB,CAAC,CAAC;IACxF,+DAA+D,uBAAuB,CAAC,CAAC,GAAG,oCAAoC,CAAC,CAAC;IACjI,gBAAgB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE,sBAAsB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,+BAA+B,CAAC,CAAC,CAAC,CAAC;IACzH,gBAAgB,MAAM,uBAAuB,GAAG,IAAIA,gBAAK,CAAC,WAAW,CAAC,sBAAsB,EAAE,uBAAuB,CAAC,CAAC;IACvH,sEAAsE,uBAAuB,CAAC,CAAC,EAAEA,gBAAK,CAAC,gBAAgB;IACvH,sEAAsEA,gBAAK,CAAC,eAAe,CAAC,CAAC;IAC7F,gBAAgB,uBAAuB,CAAC,cAAc,GAAG,OAAO,CAAC;IACjE,gBAAgB,uBAAuB,CAAC,WAAW,GAAG,IAAI,CAAC;IAC3D,gBAAgB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,uBAAuB,CAAC,KAAK,GAAG,uBAAuB,CAAC;IAC/F,gBAAgB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,2BAA2B,CAAC,KAAK,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;IACvG,gBAAgB,IAAI,CAAC,QAAQ,CAAC,kBAAkB,GAAG,IAAI,CAAC;IACxD,gBAAgB,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,GAAG;IAC5D,oBAAoB,MAAM,EAAE,sBAAsB;IAClD,oBAAoB,SAAS,EAAE,uBAAuB;IACtD,oBAAoB,MAAM,EAAE,uBAAuB;IACnD,iBAAiB,CAAC;IAClB,aAAa;IACb,SAAS,MAAM;AACf;IACA,YAAY,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,WAAW;IAChF,qCAAqC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,MAAM,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;AACvI;IACA,YAAY,MAAM,4BAA4B,GAAG,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;IACvF,YAAY,MAAM,iBAAiB,GAAG,4BAA4B,CAAC,IAAI,CAAC;IACxE,YAAY,MAAM,kBAAkB,GAAG,4BAA4B,CAAC,OAAO,CAAC;IAC5E,YAAY,MAAM,oBAAoB,GAAG,IAAI,CAAC,mBAAmB,GAAG,8BAA8B,CAAC;IACnG,YAAY,MAAM,mBAAmB,GAAG,UAAU,GAAG,8BAA8B,CAAC;IACpF,YAAY,KAAK,IAAI,CAAC,GAAG,oBAAoB,EAAE,CAAC,GAAG,mBAAmB,EAAE,CAAC,EAAE,EAAE;IAC7E,gBAAgB,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;IAClF,gBAAgB,iBAAiB,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC;IAClD,aAAa;IACb,YAAY,MAAM,uBAAuB,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,kBAAkB,CAAC,GAAG,IAAI,CAAC;IACpH,YAAY,IAAI,CAAC,uBAAuB,IAAI,CAAC,uBAAuB,CAAC,cAAc,EAAE;IACrF,gBAAgB,kBAAkB,CAAC,WAAW,GAAG,IAAI,CAAC;IACtD,aAAa,MAAM;IACnB,gBAAgB,MAAM,wBAAwB,GAAG,IAAI,CAAC,6BAA6B,GAAG,CAAC,GAAG,CAAC,CAAC;IAC5F,gBAAgB,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,EAAE,4BAA4B,EAAE,uBAAuB;IAC/G,uCAAuC,8BAA8B,EAAE,8BAA8B,EAAE,wBAAwB,CAAC,CAAC;IACjI,aAAa;AACb;IACA,YAAY,MAAM,6BAA6B,GAAG,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;IACzF,YAAY,MAAM,kBAAkB,GAAG,6BAA6B,CAAC,IAAI,CAAC;IAC1E,YAAY,MAAM,mBAAmB,GAAG,6BAA6B,CAAC,OAAO,CAAC;IAC9E,YAAY,4BAA4B,CAAC,IAAI,CAAC,mBAAmB,EAAE,UAAU,EAAE,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,OAAO;IACtH,yCAAyC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;IACrG,YAAY,MAAM,wBAAwB,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,mBAAmB,CAAC,GAAG,IAAI,CAAC;IACtH,YAAY,IAAI,CAAC,wBAAwB,IAAI,CAAC,wBAAwB,CAAC,cAAc,EAAE;IACvF,gBAAgB,mBAAmB,CAAC,WAAW,GAAG,IAAI,CAAC;IACvD,aAAa,MAAM;IACnB,gBAAgB,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,EAAE,6BAA6B,EAAE,wBAAwB;IAClH,uCAAuC,gCAAgC,EAAE,gCAAgC,EAAE,CAAC,CAAC,CAAC;IAC9G,aAAa;AACb;IACA,YAAY,IAAI,IAAI,CAAC,WAAW,EAAE;IAClC,gBAAgB,MAAM,uBAAuB,GAAG,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,CAAC;IAC1F,gBAAgB,MAAM,sBAAsB,GAAG,uBAAuB,CAAC,IAAI,CAAC;IAC5E,gBAAgB,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;IAC5E,oBAAoB,sBAAsB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,+BAA+B,CAAC,CAAC,CAAC,CAAC;IACxF,iBAAiB;AACjB;IACA,gBAAgB,MAAM,6BAA6B,GAAG,uBAAuB,CAAC,OAAO,CAAC;IACtF,gBAAgB,MAAM,4BAA4B,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,6BAA6B,CAAC,GAAG,IAAI,CAAC;IACxI,gBAAgB,IAAI,CAAC,4BAA4B,IAAI,CAAC,4BAA4B,CAAC,cAAc,EAAE;IACnG,oBAAoB,6BAA6B,CAAC,WAAW,GAAG,IAAI,CAAC;IACrE,iBAAiB,MAAM;IACvB,oBAAoB,IAAI,CAAC,iBAAiB,CAAC,sBAAsB,EAAE,uBAAuB,EAAE,4BAA4B,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACnI,iBAAiB;IACjB,aAAa;IACb,SAAS;AACT;IACA,QAAQ,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC;IAChD,KAAK;AACL;IACA,IAAI,mBAAmB,CAAC,aAAa,EAAE;IACvC,QAAQ,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;IAChD,QAAQ,MAAM,UAAU,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC/C,QAAQ,IAAI,CAAC,aAAa,EAAE;IAC5B,YAAY,MAAM,SAAS,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAClD,YAAY,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,KAAK;IAC3C,gBAAgB,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;IAC7D,aAAa,CAAC,CAAC;IACf,YAAY,SAAS,CAAC,cAAc,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAC/D,YAAY,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACvD,YAAY,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;IACtF,YAAY,IAAI,CAAC,QAAQ,CAAC,kBAAkB,GAAG,IAAI,CAAC;IACpD,SAAS;AACT;IACA,QAAQ,MAAM,6BAA6B,GAAG,aAAa,GAAG,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC;IAC3F,QAAQ,KAAK,IAAI,CAAC,GAAG,6BAA6B,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;IACzE,YAAY,IAAI,CAAC,cAAc,CAAC,CAAC,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;IACtD,YAAY,MAAM,oBAAoB,GAAG,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,MAAM,EAAE,CAAC;IAC7F,YAAY,IAAI,oBAAoB,GAAG,IAAI,CAAC,+BAA+B,EAAE,IAAI,CAAC,+BAA+B,GAAG,oBAAoB,CAAC;IACzI,SAAS;AACT;IACA,QAAQ,IAAI,IAAI,CAAC,+BAA+B,GAAG,IAAI,CAAC,yBAAyB,GAAG,8BAA8B,EAAE;IACpH,YAAY,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,+BAA+B,CAAC;IAClF,YAAY,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,yBAAyB,GAAG,8BAA8B,EAAE,GAAG,CAAC,CAAC;IACtH,SAAS;IACT,QAAQ,IAAI,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,+BAA+B,CAAC;IAC9H,QAAQ,IAAI,CAAC,+BAA+B,EAAE,CAAC;IAC/C,KAAK;AACL;IACA,IAAI,+BAA+B,CAAC,eAAe,GAAG,eAAe,CAAC,OAAO,EAAE;IAC/E,QAAQ,MAAM,YAAY,GAAG,sBAAsB,CAAC;IACpD,QAAQ,MAAM,eAAe,GAAG,yBAAyB,CAAC;IAC1D,QAAQ,MAAM,iBAAiB,GAAG,IAAI,CAAC,UAAU,GAAG,YAAY,GAAG,eAAe,CAAC;IACnF,QAAQ,MAAM,UAAU,GAAG,eAAe,KAAK,eAAe,CAAC,OAAO,GAAG,iBAAiB,GAAG,eAAe,CAAC;IAC7G,QAAQ,IAAI,CAAC,4BAA4B,GAAG,CAAC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,4BAA4B;IACzG,6CAA6C,UAAU,GAAG,IAAI,CAAC,4BAA4B,CAAC;IAC5F,QAAQ,MAAM,gBAAgB,GAAG,CAAC,IAAI,CAAC,yBAAyB,GAAG,CAAC;IACpE,kCAAkC,IAAI,CAAC,4BAA4B,GAAG,IAAI,CAAC,yBAAyB,IAAI,CAAC,CAAC;IAC1G,QAAQ,MAAM,cAAc,GAAG,gBAAgB,GAAG,IAAI,CAAC;IACvD,QAAQ,MAAM,oBAAoB,GAAG,CAAC,cAAc,IAAI,eAAe,KAAK,eAAe,CAAC,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC;AAC7G;IACA,QAAQ,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,4BAA4B,CAAC,KAAK,GAAG,IAAI,CAAC,4BAA4B,CAAC;IACtG,QAAQ,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,mBAAmB,CAAC,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC;IACpF,QAAQ,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,eAAe,CAAC,KAAK,GAAG,IAAI,CAAC,eAAe,CAAC;IAC5E,QAAQ,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;IACrE,QAAQ,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,cAAc,CAAC,KAAK,GAAG,oBAAoB,CAAC;IAC3E,QAAQ,IAAI,CAAC,QAAQ,CAAC,kBAAkB,GAAG,IAAI,CAAC;IAChD,QAAQ,IAAI,CAAC,qBAAqB,GAAG,CAAC,cAAc,CAAC;IACrD,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,mBAAmB,CAAC,aAAa,EAAE,gBAAgB,EAAE;IACzD,QAAQ,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;IACvC,QAAQ,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAC1D,QAAQ,QAAQ,CAAC,UAAU,CAAC,UAAU,CAAC,WAAW,GAAG,IAAI,CAAC;IAC1D,QAAQ,IAAI,gBAAgB,GAAG,CAAC,IAAI,IAAI,CAAC,eAAe,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;IAC1G,QAAQ,QAAQ,CAAC,aAAa,GAAG,gBAAgB,CAAC;IAClD,KAAK;AACL;IACA;IACA;IACA;IACA;IACA,IAAI,gBAAgB,GAAG;IACvB,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACrD,YAAY,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC3C,YAAY,KAAK,CAAC,eAAe,EAAE,CAAC;IACpC,SAAS;IACT,KAAK;AACL;IACA,IAAI,cAAc,GAAG,WAAW;AAChC;IACA,QAAQ,MAAM,QAAQ,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AAC7C;IACA,QAAQ,OAAO,SAAS,gBAAgB,EAAE,kBAAkB,EAAE,kBAAkB;IAChF,wBAAwB,gBAAgB,EAAE,gBAAgB,EAAE,sBAAsB,EAAE;IACpF,YAAY,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;IACpD,YAAY,IAAI,UAAU,GAAG,CAAC,EAAE;IAChC,gBAAgB,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,GAAG,IAAI,CAAC,gBAAgB;IACvE,6BAA6B,gBAAgB,CAAC,CAAC,GAAG,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACzE,gBAAgB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrE,gBAAgB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,GAAG,QAAQ,CAAC,CAAC,EAAE,GAAG,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;IACnG,gBAAgB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,kBAAkB,EAAE,kBAAkB,CAAC,CAAC;IAC/F,gBAAgB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,CAAC,KAAK,GAAG,gBAAgB,GAAG,CAAC,GAAG,CAAC,CAAC;IACzF,gBAAgB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,GAAG,gBAAgB,CAAC;IAC1E,gBAAgB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,sBAAsB,CAAC,KAAK,GAAG,sBAAsB,CAAC;IAC7F,gBAAgB,IAAI,IAAI,CAAC,WAAW,EAAE;IACtC,oBAAoB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACjE,wBAAwB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;IACpG,qBAAqB;IACrB,iBAAiB;IACjB,gBAAgB,IAAI,CAAC,QAAQ,CAAC,kBAAkB,GAAG,IAAI,CAAC;IACxD,aAAa;IACb,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,aAAa,CAAC,UAAU,GAAG,CAAC,EAAE;IAClC,QAAQ,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACrC,QAAQ,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,GAAG,UAAU,CAAC;IAC7D,QAAQ,IAAI,CAAC,QAAQ,CAAC,kBAAkB,GAAG,IAAI,CAAC;IAChD,KAAK;AACL;IACA,IAAI,aAAa,GAAG;IACpB,QAAQ,OAAO,IAAI,CAAC,UAAU,CAAC;IAC/B,KAAK;AACL;IACA,IAAI,wBAAwB,CAAC,OAAO,EAAE;IACtC,QAAQ,IAAI,CAAC,qBAAqB,GAAG,OAAO,CAAC;IAC7C,QAAQ,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,qBAAqB,CAAC,KAAK,GAAG,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;IAC7E,QAAQ,IAAI,CAAC,QAAQ,CAAC,kBAAkB,GAAG,IAAI,CAAC;IAChD,KAAK;AACL;IACA,IAAI,wBAAwB,GAAG;IAC/B,QAAQ,OAAO,IAAI,CAAC,qBAAqB,CAAC;IAC1C,KAAK;AACL;IACA,IAAI,oBAAoB,GAAG;IAC3B,QAAQ,OAAO,IAAI,CAAC,iBAAiB,CAAC;IACtC,KAAK;AACL;IACA,IAAI,aAAa,GAAG;IACpB,QAAQ,OAAO,SAAS,CAAC,2BAA2B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAClE,KAAK;AACL;IACA,IAAI,OAAO,2BAA2B,CAAC,MAAM,EAAE;IAC/C,QAAQ,IAAI,eAAe,GAAG,CAAC,CAAC;IAChC,QAAQ,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE;IAClC,YAAY,IAAI,KAAK,IAAI,KAAK,CAAC,WAAW,EAAE,eAAe,IAAI,KAAK,CAAC,WAAW,CAAC,aAAa,EAAE,CAAC;IACjG,SAAS;IACT,QAAQ,OAAO,eAAe,CAAC;IAC/B,KAAK;AACL;IACA,IAAI,OAAO,iCAAiC,CAAC,YAAY,EAAE;IAC3D,QAAQ,IAAI,eAAe,GAAG,CAAC,CAAC;IAChC,QAAQ,KAAK,IAAI,WAAW,IAAI,YAAY,EAAE,eAAe,IAAI,WAAW,CAAC,aAAa,EAAE,CAAC;IAC7F,QAAQ,OAAO,eAAe,CAAC;IAC/B,KAAK;AACL;IACA,IAAI,gBAAgB,GAAG;IACvB,QAAQ,OAAO,SAAS,CAAC,8BAA8B,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACrE,KAAK;AACL;IACA,IAAI,OAAO,8BAA8B,CAAC,MAAM,EAAE;IAClD,QAAQ,IAAI,eAAe,GAAG,CAAC,CAAC;IAChC,QAAQ,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE;IAClC,YAAY,IAAI,KAAK,IAAI,KAAK,CAAC,WAAW,EAAE,eAAe,IAAI,KAAK,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC;IACpG,SAAS;IACT,QAAQ,OAAO,eAAe,CAAC;IAC/B,KAAK;AACL;IACA,IAAI,OAAO,oCAAoC,CAAC,YAAY,EAAE;IAC9D,QAAQ,IAAI,eAAe,GAAG,CAAC,CAAC;IAChC,QAAQ,KAAK,IAAI,WAAW,IAAI,YAAY,EAAE,eAAe,IAAI,WAAW,CAAC,gBAAgB,EAAE,CAAC;IAChG,QAAQ,OAAO,eAAe,CAAC;IAC/B,KAAK;AACL;IACA,IAAI,uCAAuC,GAAG;AAC9C;IACA,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO;AACnC;IACA,QAAQ,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;AAC9C;IACA,QAAQ,IAAI,IAAI,CAAC,0BAA0B,CAAC,GAAG,EAAE;IACjD,YAAY,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC;IACtE,YAAY,IAAI,CAAC,0BAA0B,CAAC,GAAG,GAAG,IAAI,CAAC;IACvD,SAAS;IACT,QAAQ,IAAI,IAAI,CAAC,0BAA0B,CAAC,OAAO,EAAE;IACrD,YAAY,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;IACtE,YAAY,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,0BAA0B,CAAC,YAAY,CAAC,CAAC;IAC1E,YAAY,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,0BAA0B,CAAC,cAAc,CAAC,CAAC;IAC5E,YAAY,IAAI,CAAC,0BAA0B,CAAC,OAAO,GAAG,IAAI,CAAC;IAC3D,YAAY,IAAI,CAAC,0BAA0B,CAAC,YAAY,GAAG,IAAI,CAAC;IAChE,YAAY,IAAI,CAAC,0BAA0B,CAAC,cAAc,GAAG,IAAI,CAAC;IAClE,SAAS;IACT,QAAQ,IAAI,CAAC,6CAA6C,EAAE,CAAC;IAC7D,QAAQ,IAAI,IAAI,CAAC,0BAA0B,CAAC,EAAE,EAAE;IAChD,YAAY,EAAE,CAAC,uBAAuB,CAAC,IAAI,CAAC,0BAA0B,CAAC,EAAE,CAAC,CAAC;IAC3E,YAAY,IAAI,CAAC,0BAA0B,CAAC,EAAE,GAAG,IAAI,CAAC;IACtD,SAAS;IACT,KAAK;AACL;IACA,IAAI,6CAA6C,GAAG;AACpD;IACA,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO;AACnC;IACA,QAAQ,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;AAC9C;IACA,QAAQ,IAAI,IAAI,CAAC,0BAA0B,CAAC,aAAa,EAAE;IAC3D,YAAY,IAAI,CAAC,0BAA0B,CAAC,aAAa,GAAG,IAAI,CAAC;IACjE,YAAY,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,0BAA0B,CAAC,aAAa,CAAC,CAAC;IAC3E,SAAS;IACT,QAAQ,IAAI,IAAI,CAAC,0BAA0B,CAAC,kBAAkB,EAAE;IAChE,YAAY,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,0BAA0B,CAAC,kBAAkB,CAAC,CAAC;IAChF,YAAY,IAAI,CAAC,0BAA0B,CAAC,kBAAkB,GAAG,IAAI,CAAC;IACtE,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA;IACA,IAAI,WAAW,CAAC,QAAQ,EAAE;IAC1B,QAAQ,IAAI,QAAQ,KAAK,IAAI,CAAC,QAAQ,EAAE;IACxC,YAAY,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACrC,YAAY,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;IAClD,YAAY,MAAM,UAAU,GAAG,IAAI,eAAe,CAAC,EAAE,CAAC,CAAC;IACvD,YAAY,MAAM,YAAY,GAAG,IAAI,iBAAiB,CAAC,EAAE,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC;IAC3E,YAAY,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC1C,YAAY,IAAI,CAAC,UAAU,GAAG,IAAIA,gBAAK,CAAC,UAAU,CAAC,EAAE,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;IACjF,YAAY,IAAI,IAAI,CAAC,+BAA+B,IAAI,IAAI,CAAC,aAAa,EAAE,GAAG,CAAC,EAAE;IAClF,gBAAgB,IAAI,CAAC,0CAA0C,EAAE,CAAC;IAClE,gBAAgB,IAAI,CAAC,6CAA6C,EAAE,CAAC;IACrE,gBAAgB,IAAI,CAAC,sDAAsD,EAAE,CAAC;IAC9E,aAAa;IACb,SAAS;IACT,KAAK;AACL;IACA,IAAI,0CAA0C,GAAG,WAAW;AAC5D;IACA,QAAQ,IAAI,oBAAoB,CAAC;AACjC;IACA,QAAQ,OAAO,WAAW;IAC1B,YAAY,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;AAC1D;IACA,YAAY,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO;AACvC;IACA,YAAY,MAAM,iBAAiB,IAAI,IAAI,CAAC,YAAY,KAAK,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC5E,YAAY,MAAM,cAAc,GAAG,oBAAoB,KAAK,aAAa,CAAC;AAC1E;IACA,YAAY,IAAI,CAAC,iBAAiB,IAAI,CAAC,cAAc,EAAE,OAAO;AAC9D;IACA,YAAY,IAAI,iBAAiB,EAAE;IACnC,gBAAgB,IAAI,CAAC,uCAAuC,EAAE,CAAC;IAC/D,aAAa,MAAM,IAAI,cAAc,EAAE;IACvC,gBAAgB,IAAI,CAAC,6CAA6C,EAAE,CAAC;IACrE,aAAa;AACb;IACA,YAAY,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;AAClD;IACA,YAAY,MAAM,YAAY,GAAG,CAAC,EAAE,EAAE,IAAI,EAAE,MAAM,KAAK;IACvD,gBAAgB,MAAM,MAAM,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IACrD,gBAAgB,IAAI,CAAC,MAAM,EAAE;IAC7B,oBAAoB,OAAO,CAAC,KAAK,CAAC,mDAAmD,CAAC,CAAC;IACvF,oBAAoB,OAAO,IAAI,CAAC;IAChC,iBAAiB;AACjB;IACA,gBAAgB,EAAE,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAChD,gBAAgB,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;AACzC;IACA,gBAAgB,MAAM,QAAQ,GAAG,EAAE,CAAC,kBAAkB,CAAC,MAAM,EAAE,EAAE,CAAC,cAAc,CAAC,CAAC;IAClF,gBAAgB,IAAI,CAAC,QAAQ,EAAE;IAC/B,oBAAoB,IAAI,QAAQ,GAAG,SAAS,CAAC;IAC7C,oBAAoB,IAAI,IAAI,KAAK,EAAE,CAAC,aAAa,EAAE,QAAQ,GAAG,eAAe,CAAC;IAC9E,yBAAyB,IAAI,IAAI,KAAK,EAAE,CAAC,eAAe,EAAE,QAAQ,GAAG,kBAAkB,CAAC;IACxF,oBAAoB,MAAM,MAAM,GAAG,EAAE,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;IAC/D,oBAAoB,OAAO,CAAC,KAAK,CAAC,oBAAoB,GAAG,QAAQ,GAAG,qBAAqB,GAAG,MAAM,CAAC,CAAC;IACpG,oBAAoB,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IAC5C,oBAAoB,OAAO,IAAI,CAAC;IAChC,iBAAiB;AACjB;IACA,gBAAgB,OAAO,MAAM,CAAC;IAC9B,aAAa,CAAC;AACd;IACA,YAAY,IAAI,QAAQ,CAAC;IACzB,YAAY,IAAI,IAAI,CAAC,gCAAgC,EAAE;IACvD,gBAAgB,QAAQ;IACxB,gBAAgB,CAAC;AACjB;AACA,sCAAsC,CAAC,CAAC;IACxC,gBAAgB,IAAI,IAAI,CAAC,WAAW,EAAE;IACtC,oBAAoB,QAAQ,IAAI,CAAC;AACjC;AACA,iDAAiD,EAAE,SAAS,CAAC,SAAS,CAAC;AACvE;AACA;AACA;AACA;AACA,oBAAoB,CAAC,CAAC;IACtB,iBAAiB,MAAM;IACvB,oBAAoB,QAAQ,IAAI,CAAC;AACjC;AACA;AACA;AACA;AACA,oBAAoB,CAAC,CAAC;IACtB,iBAAiB;IACjB,aAAa,MAAM;IACnB,gBAAgB,QAAQ;IACxB,gBAAgB,CAAC;AACjB;AACA,wCAAwC,CAAC,CAAC;IAC1C,gBAAgB,IAAI,IAAI,CAAC,WAAW,EAAE;IACtC,oBAAoB,QAAQ,IAAI,CAAC;AACjC;AACA,gDAAgD,EAAE,SAAS,CAAC,SAAS,CAAC;AACtE;AACA;AACA;AACA;AACA,oBAAoB,CAAC,CAAC;IACtB,iBAAiB,MAAM;IACvB,oBAAoB,QAAQ,IAAI,CAAC;AACjC;AACA;AACA;AACA;AACA,oBAAoB,CAAC,CAAC;IACtB,iBAAiB;IACjB,aAAa;AACb;IACA,YAAY,MAAM,QAAQ;IAC1B,YAAY,CAAC;AACb;AACA;AACA;AACA,YAAY,CAAC,CAAC;AACd;IACA,YAAY,MAAM,UAAU,GAAG,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAC;IACxE,YAAY,MAAM,cAAc,GAAG,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC;IACvE,YAAY,MAAM,qBAAqB,GAAG,cAAc,GAAG,EAAE,CAAC,mBAAmB,CAAC,cAAc,EAAE,EAAE,CAAC,aAAa,CAAC,GAAG,KAAK,CAAC;AAC5H;IACA,YAAY,IAAI,iBAAiB,EAAE;IACnC,gBAAgB,IAAI,CAAC,0BAA0B,CAAC,GAAG,GAAG,EAAE,CAAC,iBAAiB,EAAE,CAAC;IAC7E,aAAa;AACb;IACA,YAAY,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC;AACpE;IACA,YAAY,IAAI,iBAAiB,EAAE;IACnC,gBAAgB,MAAM,OAAO,GAAG,EAAE,CAAC,aAAa,EAAE,CAAC;IACnD,gBAAgB,MAAM,YAAY,GAAG,YAAY,CAAC,EAAE,EAAE,EAAE,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;IAClF,gBAAgB,MAAM,cAAc,GAAG,YAAY,CAAC,EAAE,EAAE,EAAE,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;IACtF,gBAAgB,IAAI,CAAC,YAAY,IAAI,CAAC,cAAc,EAAE;IACtD,oBAAoB,MAAM,IAAI,KAAK,CAAC,6DAA6D,CAAC,CAAC;IACnG,iBAAiB;IACjB,gBAAgB,EAAE,CAAC,YAAY,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;IACvD,gBAAgB,EAAE,CAAC,YAAY,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;IACzD,gBAAgB,EAAE,CAAC,yBAAyB,CAAC,OAAO,EAAE,CAAC,UAAU,CAAC,EAAE,EAAE,CAAC,gBAAgB,CAAC,CAAC;IACzF,gBAAgB,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;AACxC;IACA,gBAAgB,MAAM,MAAM,GAAG,EAAE,CAAC,mBAAmB,CAAC,OAAO,EAAE,EAAE,CAAC,WAAW,CAAC,CAAC;IAC/E,gBAAgB,IAAI,CAAC,MAAM,EAAE;IAC7B,oBAAoB,MAAM,KAAK,GAAG,EAAE,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAChE,oBAAoB,OAAO,CAAC,KAAK,CAAC,uCAAuC,GAAG,KAAK,CAAC,CAAC;IACnF,oBAAoB,EAAE,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IAC9C,oBAAoB,EAAE,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;IACpD,oBAAoB,EAAE,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;IAClD,oBAAoB,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;IAChG,iBAAiB;AACjB;IACA,gBAAgB,IAAI,CAAC,0BAA0B,CAAC,OAAO,GAAG,OAAO,CAAC;IAClE,gBAAgB,IAAI,CAAC,0BAA0B,CAAC,YAAY,GAAG,YAAY,CAAC;IAC5E,gBAAgB,IAAI,CAAC,0BAA0B,CAAC,YAAY,GAAG,cAAc,CAAC;IAC9E,aAAa;AACb;IACA,YAAY,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;AACnE;IACA,YAAY,IAAI,CAAC,0BAA0B,CAAC,UAAU;IACtD,gBAAgB,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,0BAA0B,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IACxF,YAAY,IAAI,IAAI,CAAC,WAAW,EAAE;IAClC,gBAAgB,IAAI,CAAC,0BAA0B,CAAC,mBAAmB;IACnE,oBAAoB,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,0BAA0B,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;IACpG,gBAAgB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC7D,oBAAoB,IAAI,CAAC,0BAA0B,CAAC,cAAc,CAAC,CAAC,CAAC;IACrE,wBAAwB,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,0BAA0B,CAAC,OAAO,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC3G,iBAAiB;IACjB,aAAa,MAAM;IACnB,gBAAgB,IAAI,CAAC,0BAA0B,CAAC,gBAAgB;IAChE,oBAAoB,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,0BAA0B,CAAC,OAAO,EAAE,eAAe,CAAC,CAAC;IACpG,aAAa;AACb;IACA,YAAY,IAAI,iBAAiB,IAAI,cAAc,EAAE;IACrD,gBAAgB,IAAI,CAAC,0BAA0B,CAAC,aAAa,GAAG,EAAE,CAAC,YAAY,EAAE,CAAC;IAClF,gBAAgB,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,0BAA0B,CAAC,aAAa,CAAC,CAAC;IAC9F,gBAAgB,EAAE,CAAC,uBAAuB,CAAC,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvF,gBAAgB,IAAI,IAAI,CAAC,gCAAgC,EAAE;IAC3D,oBAAoB,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC,0BAA0B,CAAC,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACzG,iBAAiB,MAAM;IACvB,oBAAoB,EAAE,CAAC,mBAAmB,CAAC,IAAI,CAAC,0BAA0B,CAAC,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACjH,iBAAiB;AACjB;IACA,gBAAgB,IAAI,IAAI,CAAC,WAAW,EAAE;IACtC,oBAAoB,IAAI,CAAC,0BAA0B,CAAC,sBAAsB,GAAG,EAAE,CAAC,YAAY,EAAE,CAAC;IAC/F,oBAAoB,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,0BAA0B,CAAC,sBAAsB,CAAC,CAAC;IAC3G,oBAAoB,EAAE,CAAC,uBAAuB,CAAC,IAAI,CAAC,0BAA0B,CAAC,mBAAmB,CAAC,CAAC;IACpG,oBAAoB,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC,0BAA0B,CAAC,mBAAmB,EAAE,CAAC,EAAE,EAAE,CAAC,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3H,iBAAiB;IACjB,aAAa;AACb;IACA,YAAY,IAAI,iBAAiB,IAAI,cAAc,EAAE;IACrD,gBAAgB,IAAI,CAAC,0BAA0B,CAAC,kBAAkB,GAAG,EAAE,CAAC,YAAY,EAAE,CAAC;IACvF,aAAa;IACb,YAAY,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,0BAA0B,CAAC,kBAAkB,CAAC,CAAC;IAC/F,YAAY,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,aAAa,GAAG,CAAC,EAAE,EAAE,CAAC,WAAW,CAAC,CAAC;AAC9E;IACA,YAAY,IAAI,iBAAiB,EAAE;IACnC,gBAAgB,IAAI,CAAC,0BAA0B,CAAC,EAAE,GAAG,EAAE,CAAC,uBAAuB,EAAE,CAAC;IAClF,aAAa;IACb,YAAY,EAAE,CAAC,qBAAqB,CAAC,EAAE,CAAC,kBAAkB,EAAE,IAAI,CAAC,0BAA0B,CAAC,EAAE,CAAC,CAAC;IAChG,YAAY,EAAE,CAAC,cAAc,CAAC,EAAE,CAAC,yBAAyB,EAAE,CAAC,EAAE,IAAI,CAAC,0BAA0B,CAAC,kBAAkB,CAAC,CAAC;AACnH;IACA,YAAY,IAAI,cAAc,IAAI,qBAAqB,KAAK,IAAI,EAAE,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;IAChG,YAAY,IAAI,UAAU,EAAE,EAAE,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;AAC3D;IACA,YAAY,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC;IAC9C,YAAY,oBAAoB,GAAG,aAAa,CAAC;IACjD,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA;IACA;IACA;IACA;IACA,IAAI,6CAA6C,CAAC,aAAa,GAAG,KAAK,EAAE;AACzE;IACA,QAAQ,IAAI,CAAC,iCAAiC,CAAC,aAAa,EAAE,+CAA+C,EAAE,eAAe,CAAC,CAAC;AAChI;IACA,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO;AACnC;IACA,QAAQ,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;AAC9C;IACA,QAAQ,MAAM,UAAU,GAAG,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAC;IACpE,QAAQ,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC;AAChE;IACA,QAAQ,MAAM,SAAS,GAAG,IAAI,CAAC,gCAAgC,GAAG,WAAW,GAAG,YAAY,CAAC;IAC7F,QAAQ,MAAM,uBAAuB,GAAG,IAAI,CAAC,gCAAgC,GAAG,EAAE,GAAG,EAAE,CAAC;IACxF,QAAQ,MAAM,eAAe,GAAG,aAAa,GAAG,IAAI,CAAC,mBAAmB,GAAG,uBAAuB,GAAG,CAAC,CAAC;IACvG,QAAQ,MAAM,UAAU,GAAG,IAAI,CAAC,gCAAgC;IAChE,2BAA2B,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,aAAa,CAAC;IACtE,2BAA2B,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;AACtE;IACA,QAAQ,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,0BAA0B,CAAC,aAAa,CAAC,CAAC;AACtF;IACA,QAAQ,IAAI,aAAa,EAAE;IAC3B,YAAY,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,YAAY,EAAE,eAAe,EAAE,UAAU,CAAC,CAAC;IAC3E,SAAS,MAAM;IACf,YAAY,MAAM,QAAQ,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,gBAAgB,EAAE,GAAG,uBAAuB,CAAC,CAAC;IAC9F,YAAY,QAAQ,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACrC,YAAY,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,QAAQ,EAAE,EAAE,CAAC,WAAW,CAAC,CAAC;IACrE,SAAS;AACT;IACA,QAAQ,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;AAC7C;IACA,QAAQ,IAAI,UAAU,EAAE,EAAE,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;IACvD,KAAK;AACL;IACA;IACA;IACA;IACA;IACA,IAAI,sDAAsD,CAAC,aAAa,EAAE;AAC1E;IACA,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO;AACxD;IACA,QAAQ,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;AAC9C;IACA,QAAQ,MAAM,UAAU,GAAG,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAC;IACpE,QAAQ,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC;AAChE;IACA,QAAQ,MAAM,eAAe,GAAG,aAAa,GAAG,IAAI,CAAC,mBAAmB,GAAG,CAAC,GAAG,CAAC,CAAC;IACjF,QAAQ,MAAM,gBAAgB,GAAG,IAAI,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC;AACzE;IACA,QAAQ,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,0BAA0B,CAAC,sBAAsB,CAAC,CAAC;AAC/F;IACA,QAAQ,IAAI,aAAa,EAAE;IAC3B,YAAY,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,YAAY,EAAE,eAAe,EAAE,gBAAgB,CAAC,CAAC;IACjF,SAAS,MAAM;IACf,YAAY,MAAM,QAAQ,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC,CAAC;IAC1E,YAAY,QAAQ,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;IAC3C,YAAY,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,QAAQ,EAAE,EAAE,CAAC,WAAW,CAAC,CAAC;IACrE,SAAS;IACT,QAAQ,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;AAC7C;IACA,QAAQ,IAAI,UAAU,EAAE,EAAE,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;IACvD,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,mBAAmB,CAAC,aAAa,EAAE;AACvC;IACA,QAAQ,IAAI,gBAAgB,CAAC;IAC7B,QAAQ,IAAI,aAAa,EAAE;IAC3B,YAAY,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;IACpD,YAAY,MAAM,SAAS,GAAG,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC;IACpE,YAAY,gBAAgB,GAAG,IAAI,WAAW,CAAC,SAAS,CAAC,CAAC;IAC1D,YAAY,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE;IACxE,gBAAgB,gBAAgB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,+BAA+B,CAAC,CAAC,CAAC,CAAC;IAC9E,aAAa;IACb,SAAS,MAAM;IACf,YAAY,gBAAgB,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,+BAA+B,CAAC,MAAM,CAAC,CAAC;IAC5F,YAAY,gBAAgB,CAAC,GAAG,CAAC,IAAI,CAAC,+BAA+B,CAAC,CAAC;IACvE,SAAS;AACT;IACA,QAAQ,OAAO,gBAAgB,CAAC;IAChC,KAAK;AACL;IACA;IACA;IACA;IACA;IACA,IAAI,mBAAmB,GAAG,WAAW;AACrC;IACA,QAAQ,MAAM,SAAS,GAAG,EAAE,CAAC;AAC7B;IACA,QAAQ,OAAO,SAAS,KAAK,EAAE;IAC/B,YAAY,IAAI,SAAS,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,EAAE,SAAS,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;IACnF,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACzD,gBAAgB,MAAM,cAAc,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAClE,gBAAgB,MAAM,sBAAsB,GAAG,cAAc,CAAC,QAAQ,CAAC;IACvE,gBAAgB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;IAC7C,oBAAoB,SAAS,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,GAAG,sBAAsB,CAAC,CAAC,CAAC,CAAC;IACtE,iBAAiB;IACjB,aAAa;IACb,YAAY,KAAK,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACjC,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,qBAAqB,GAAG,WAAW;AACvC;IACA,QAAQ,MAAM,UAAU,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AAC/C;IACA,QAAQ,OAAO,SAAS,mBAAmB,EAAE,oBAAoB,EAAE;IACnE,YAAY,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO;AACvC;IACA;IACA,YAAY,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;AAClD;IACA,YAAY,MAAM,UAAU,GAAG,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAC;IACxE,YAAY,MAAM,cAAc,GAAG,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC;IACvE,YAAY,MAAM,qBAAqB,GAAG,cAAc,GAAG,EAAE,CAAC,mBAAmB,CAAC,cAAc,EAAE,EAAE,CAAC,aAAa,CAAC,GAAG,KAAK,CAAC;AAC5H;IACA,YAAY,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC;IACpE,YAAY,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC;AACnE;IACA,YAAY,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC;AAC7C;IACA,YAAY,IAAI,IAAI,CAAC,WAAW,EAAE;IAClC,gBAAgB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC7D,oBAAoB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;IAChE,oBAAoB,UAAU,CAAC,WAAW,CAAC,mBAAmB,CAAC,CAAC;AAChE;IACA,oBAAoB,IAAI,IAAI,CAAC,gCAAgC,EAAE;IAC/D,wBAAwB,MAAM,WAAW,GAAG,SAAS,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;IACxF,wBAAwB,MAAM,UAAU,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,EAAE,CAAC,EAAE,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC;IAC9G,wBAAwB,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,0BAA0B,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;IACpH,wFAAwF,UAAU,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;IACtH,qBAAqB,MAAM;IAC3B,wBAAwB,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,0BAA0B,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC,QAAQ,CAAC,CAAC;IAC3H,qBAAqB;IACrB,iBAAiB;IACjB,aAAa,MAAM;IACnB,gBAAgB,IAAI,IAAI,CAAC,gCAAgC,EAAE;IAC3D,oBAAoB,MAAM,eAAe,GAAG,SAAS,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,CAAC;IACjG,oBAAoB,MAAM,SAAS,GAAG,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;IACpG,oBAAoB,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,0BAA0B,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7H,iBAAiB,MAAM;IACvB,oBAAoB,MAAM,QAAQ,GAAG,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,mBAAmB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,mBAAmB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;IAC1I,oBAAoB,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,0BAA0B,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1H,iBAAiB;IACjB,aAAa;AACb;IACA,YAAY,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,0BAA0B,CAAC,aAAa,CAAC,CAAC;IAC1F,YAAY,EAAE,CAAC,uBAAuB,CAAC,IAAI,CAAC,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACnF,YAAY,IAAI,IAAI,CAAC,gCAAgC,EAAE;IACvD,gBAAgB,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC,0BAA0B,CAAC,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACrG,aAAa,MAAM;IACnB,gBAAgB,EAAE,CAAC,mBAAmB,CAAC,IAAI,CAAC,0BAA0B,CAAC,UAAU,EAAE,CAAC,EAAE,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC7G,aAAa;AACb;IACA,YAAY,IAAI,IAAI,CAAC,WAAW,EAAE;IAClC,gBAAgB,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,0BAA0B,CAAC,sBAAsB,CAAC,CAAC;IACvG,gBAAgB,EAAE,CAAC,uBAAuB,CAAC,IAAI,CAAC,0BAA0B,CAAC,mBAAmB,CAAC,CAAC;IAChG,gBAAgB,EAAE,CAAC,oBAAoB,CAAC,IAAI,CAAC,0BAA0B,CAAC,mBAAmB,EAAE,CAAC,EAAE,EAAE,CAAC,YAAY,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACvH,aAAa;AACb;IACA,YAAY,EAAE,CAAC,qBAAqB,CAAC,EAAE,CAAC,kBAAkB,EAAE,IAAI,CAAC,0BAA0B,CAAC,EAAE,CAAC,CAAC;IAChG,YAAY,EAAE,CAAC,cAAc,CAAC,EAAE,CAAC,yBAAyB,EAAE,CAAC,EAAE,IAAI,CAAC,0BAA0B,CAAC,kBAAkB,CAAC,CAAC;AACnH;IACA,YAAY,EAAE,CAAC,sBAAsB,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;IACjD,YAAY,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,EAAE,IAAI,CAAC,aAAa,EAAE,CAAC,CAAC;IAC9D,YAAY,EAAE,CAAC,oBAAoB,EAAE,CAAC;AACtC;IACA,YAAY,EAAE,CAAC,cAAc,CAAC,EAAE,CAAC,yBAAyB,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;IACrE,YAAY,EAAE,CAAC,qBAAqB,CAAC,EAAE,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;AAClE;IACA,YAAY,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC;AAC9C;IACA,YAAY,MAAM,IAAI,GAAG,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC,0BAA0B,EAAE,CAAC,CAAC,CAAC;IACxE,YAAY,EAAE,CAAC,KAAK,EAAE,CAAC;AACvB;IACA,YAAY,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,KAAK;IACrD,gBAAgB,MAAM,SAAS,GAAG,MAAM;IACxC,oBAAoB,IAAI,IAAI,CAAC,QAAQ,EAAE;IACvC,wBAAwB,OAAO,EAAE,CAAC;IAClC,qBAAqB,MAAM;IAC3B,wBAAwB,MAAM,OAAO,GAAG,CAAC,CAAC;IAC1C,wBAAwB,MAAM,QAAQ,GAAG,CAAC,CAAC;IAC3C,wBAAwB,MAAM,MAAM,GAAG,EAAE,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IAClF,wBAAwB,QAAQ,MAAM;IACtC,4BAA4B,KAAK,EAAE,CAAC,eAAe;IACnD,gCAAgC,IAAI,CAAC,gCAAgC,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC;IAC9F,gCAAgC,OAAO,IAAI,CAAC,gCAAgC,CAAC;IAC7E,4BAA4B,KAAK,EAAE,CAAC,WAAW;IAC/C,gCAAgC,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;IACzE,4BAA4B;IAC5B,gCAAgC,IAAI,CAAC,gCAAgC,GAAG,IAAI,CAAC;IAC7E,gCAAgC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;IACpD,gCAAgC,MAAM,UAAU,GAAG,EAAE,CAAC,YAAY,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAC;IAC5F,gCAAgC,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC;IACxF,gCAAgC,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,0BAA0B,CAAC,kBAAkB,CAAC,CAAC;IACnH,gCAAgC,EAAE,CAAC,gBAAgB,CAAC,EAAE,CAAC,YAAY,EAAE,CAAC,EAAE,oBAAoB,CAAC,CAAC;IAC9F,gCAAgC,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;AACrE;IACA,gCAAgC,IAAI,UAAU,EAAE,EAAE,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;AAC/E;IACA;AACA;IACA,gCAAgC,OAAO,EAAE,CAAC;IAC1C,yBAAyB;IACzB,qBAAqB;IACrB,iBAAiB,CAAC;IAClB,gBAAgB,IAAI,CAAC,gCAAgC,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC;IAC9E,aAAa,CAAC,CAAC;AACf;IACA,YAAY,IAAI,cAAc,IAAI,qBAAqB,KAAK,IAAI,EAAE,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;IAChG,YAAY,IAAI,UAAU,EAAE,EAAE,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;AAC3D;IACA,YAAY,OAAO,OAAO,CAAC;IAC3B,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,uBAAuB,CAAC,WAAW,EAAE,SAAS,EAAE,oBAAoB,EAAE;IAC1E,QAAQ,IAAI,oBAAoB,KAAK,SAAS,IAAI,oBAAoB,KAAK,IAAI,EAAE;IACjF,YAAY,oBAAoB,GAAG,IAAI,CAAC,WAAW,GAAG,KAAK,GAAG,IAAI,CAAC;IACnE,SAAS;IACT,QAAQ,SAAS,CAAC,WAAW,GAAG,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC;IACzE,QAAQ,SAAS,CAAC,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC;IACpE,QAAQ,SAAS,CAAC,cAAc,GAAG,oBAAoB,GAAG,IAAI,CAAC,yBAAyB,CAAC,WAAW,CAAC,GAAG,IAAI,CAAC;IAC7G,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,mBAAmB,CAAC,WAAW,EAAE,OAAO,EAAE,MAAM,EAAE,mBAAmB,GAAG,SAAS,EAAE,aAAa,EAAE,iBAAiB,EAAE;AACzH;IACA,QAAQ,IAAI,CAAC,iCAAiC,CAAC,aAAa,EAAE,qBAAqB,EAAE,eAAe,CAAC,CAAC;AACtG;IACA,QAAQ,IAAI,QAAQ,GAAG,CAAC,CAAC;IACzB,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACrD,YAAY,IAAI,mBAAmB,KAAK,SAAS,IAAI,mBAAmB,KAAK,IAAI,EAAE;IACnF,gBAAgB,mBAAmB,GAAG,IAAI,CAAC,WAAW,GAAG,KAAK,GAAG,IAAI,CAAC;IACtE,aAAa;AACb;IACA,YAAY,IAAI,aAAa,GAAG,QAAQ,CAAC;IACzC,YAAY,IAAI,OAAO,CAAC;IACxB,YAAY,IAAI,KAAK,CAAC;IACtB,YAAY,IAAI,aAAa,EAAE;IAC/B,gBAAgB,OAAO,GAAG,IAAI,CAAC,mBAAmB,CAAC;IACnD,gBAAgB,aAAa,GAAG,iBAAiB,GAAG,CAAC,GAAG,OAAO,CAAC;IAChE,aAAa;AACb;IACA,YAAY,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC3C,YAAY,MAAM,WAAW,GAAG,KAAK,CAAC,WAAW,CAAC;IAClD,YAAY,MAAM,cAAc,GAAG,mBAAmB,GAAG,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC;IAChF,YAAY,IAAI,WAAW,EAAE;IAC7B,gBAAgB,WAAW,CAAC,wBAAwB,CAAC,WAAW,EAAE,cAAc;IAChF,qDAAqD,OAAO,EAAE,KAAK,EAAE,aAAa,EAAE,IAAI,CAAC,6BAA6B,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IAChI,aAAa;IACb,YAAY,IAAI,OAAO,EAAE,WAAW,CAAC,oBAAoB,CAAC,OAAO,EAAE,cAAc,EAAE,OAAO,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IAClH,YAAY,IAAI,MAAM,EAAE,WAAW,CAAC,mBAAmB,CAAC,MAAM,EAAE,KAAK,CAAC,YAAY,EAAE,cAAc,EAAE,OAAO,EAAE,KAAK,EAAE,aAAa,CAAC,CAAC;IACnI,YAAY,QAAQ,IAAI,WAAW,CAAC,aAAa,EAAE,CAAC;IACpD,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,iBAAiB,CAAC,OAAO,GAAG,KAAK,EAAE,aAAa,GAAG,KAAK,EAAE;AAC9D;IACA,QAAQ,IAAI,CAAC,iCAAiC,CAAC,aAAa,EAAE,mBAAmB,EAAE,eAAe,CAAC,CAAC;AACpG;IACA,QAAQ,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;IAChD,QAAQ,MAAM,SAAS,GAAG,aAAa,GAAG,UAAU,GAAG,IAAI,CAAC,mBAAmB,GAAG,UAAU,CAAC;IAC7F,QAAQ,MAAM,YAAY,GAAG,IAAI,YAAY,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;IAC7D,QAAQ,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,SAAS,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC;IACpG,QAAQ,IAAI,UAAU,CAAC;IACvB,QAAQ,IAAI,cAAc,GAAG,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;IAC7C,QAAQ,UAAU,GAAG,IAAI,UAAU,CAAC,SAAS,GAAG,cAAc,CAAC,CAAC;IAChE,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;IAC5C,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;IACxC,gBAAgB,UAAU,CAAC,CAAC,GAAG,cAAc,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;IAClG,aAAa;IACb,YAAY,IAAI,OAAO,EAAE,UAAU,CAAC,CAAC,GAAG,cAAc,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;IACnE,SAAS;IACT,QAAQ,OAAO,UAAU,CAAC;IAC1B,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,eAAe,CAAC,OAAO,GAAG,KAAK,EAAE,aAAa,GAAG,KAAK,EAAE;AAC5D;IACA,QAAQ,IAAI,CAAC,iCAAiC,CAAC,aAAa,EAAE,iBAAiB,EAAE,eAAe,CAAC,CAAC;AAClG;IACA,QAAQ,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;IAChD,QAAQ,MAAM,SAAS,GAAG,aAAa,GAAG,UAAU,GAAG,IAAI,CAAC,mBAAmB,GAAG,UAAU,CAAC;IAC7F,QAAQ,MAAM,YAAY,GAAG,IAAI,YAAY,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;IAC7D,QAAQ,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,SAAS,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC;IACpG,QAAQ,IAAI,CAAC,OAAO,EAAE,OAAO,YAAY,CAAC;IAC1C,QAAQ,IAAI,kBAAkB,GAAG,IAAI,YAAY,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;IACjE,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;IAC5C,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;IACxC,gBAAgB,kBAAkB,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;IACxE,aAAa;IACb,YAAY,kBAAkB,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;IAChD,SAAS;IACT,QAAQ,OAAO,kBAAkB,CAAC;IAClC,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,cAAc,GAAG,WAAW;AAChC;IACA,QAAQ,MAAM,SAAS,GAAG,EAAE,CAAC;AAC7B;IACA,QAAQ,OAAO,SAAS,WAAW,EAAE,SAAS,EAAE,mBAAmB,EAAE;IACrE,YAAY,IAAI,CAAC,uBAAuB,CAAC,WAAW,EAAE,SAAS,EAAE,mBAAmB,CAAC,CAAC;IACtF,YAAY,SAAS,CAAC,WAAW,CAAC,cAAc,CAAC,SAAS,CAAC,UAAU,EAAE,SAAS,EAAE,SAAS,CAAC,cAAc,CAAC,CAAC;IAC5G,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,wBAAwB,GAAG,WAAW;AAC1C;IACA,QAAQ,MAAM,SAAS,GAAG,EAAE,CAAC;AAC7B;IACA,QAAQ,OAAO,SAAS,WAAW,EAAE,QAAQ,EAAE,WAAW,EAAE,mBAAmB,EAAE;IACjF,YAAY,IAAI,CAAC,uBAAuB,CAAC,WAAW,EAAE,SAAS,EAAE,mBAAmB,CAAC,CAAC;IACtF,YAAY,SAAS,CAAC,WAAW,CAAC,wBAAwB,CAAC,SAAS,CAAC,UAAU,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,CAAC,cAAc,CAAC,CAAC;IAClI,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,aAAa,GAAG,WAAW;AAC/B;IACA,QAAQ,MAAM,SAAS,GAAG,EAAE,CAAC;AAC7B;IACA,QAAQ,OAAO,SAAS,WAAW,EAAE,QAAQ,EAAE;IAC/C,YAAY,IAAI,CAAC,uBAAuB,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;IACjE,YAAY,SAAS,CAAC,WAAW,CAAC,aAAa,CAAC,SAAS,CAAC,UAAU,EAAE,QAAQ,EAAE,SAAS,CAAC,cAAc,CAAC,CAAC;IAC1G,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,iBAAiB,CAAC,UAAU,EAAE,YAAY,EAAE;IAChD,QAAQ,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IAChD,QAAQ,KAAK,CAAC,eAAe,EAAE,CAAC;IAChC,QAAQ,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IAC3C,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,QAAQ,CAAC,UAAU,EAAE;IACzB,QAAQ,IAAI,UAAU,GAAG,CAAC,IAAI,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;IAChE,YAAY,MAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;IAC7E,SAAS;IACT,QAAQ,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IACvC,KAAK;AACL;IACA,IAAI,sBAAsB,CAAC,WAAW,EAAE;IACxC,QAAQ,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,+BAA+B,CAAC,WAAW,CAAC,CAAC,CAAC,WAAW,CAAC;IAC5F,KAAK;AACL;IACA,IAAI,qBAAqB,CAAC,WAAW,EAAE;IACvC,QAAQ,OAAO,IAAI,CAAC,+BAA+B,CAAC,WAAW,CAAC,CAAC;IACjE,KAAK;AACL;IACA,IAAI,yBAAyB,CAAC,WAAW,EAAE;IAC3C,QAAQ,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,+BAA+B,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,CAAC;IAC1F,KAAK;AACL;IACA,IAAI,kBAAkB,CAAC,WAAW,EAAE;IACpC,QAAQ,OAAO,IAAI,CAAC,oCAAoC,CAAC,WAAW,CAAC,CAAC;IACtE,KAAK;AACL;IACA,IAAI,OAAO,qBAAqB,CAAC,MAAM,EAAE;IACzC,QAAQ,MAAM,cAAc,GAAG,MAAM,CAAC,QAAQ,CAAC;IAC/C,QAAQ,MAAM,cAAc,GAAG,EAAE,CAAC;IAClC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE;IACrC,YAAY,cAAc,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC;IACvE,SAAS;IACT,QAAQ,OAAO,cAAc,CAAC;IAC9B,KAAK;AACL;IACA,IAAI,iCAAiC,CAAC,aAAa,EAAE,YAAY,EAAE,aAAa,EAAE;IAClF,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,aAAa,EAAE;IACrD,YAAY,MAAM,IAAI,KAAK,CAAC,CAAC,EAAE,YAAY,CAAC,OAAO,EAAE,aAAa,CAAC,uDAAuD,CAAC,CAAC,CAAC;IAC7H,SAAS;IACT,KAAK;IACL;;ACx4DA,qBAAe,s8FAAs8F;;ICGr9F,SAAS,UAAU,CAAC,IAAI,EAAE;AAC1B;IACA,IAAI,IAAI,YAAY,CAAC;IACrB,IAAI,IAAI,UAAU,CAAC;IACnB,IAAI,IAAI,eAAe,CAAC;IACxB,IAAI,IAAI,gBAAgB,CAAC;IACzB,IAAI,IAAI,WAAW,CAAC;IACpB,IAAI,IAAI,UAAU,CAAC;IACnB,IAAI,IAAI,mBAAmB,CAAC;IAC5B,IAAI,IAAI,mBAAmB,CAAC;IAC5B,IAAI,IAAI,sBAAsB,CAAC;IAC/B,IAAI,IAAI,gBAAgB,CAAC;IACzB,IAAI,IAAI,0BAA0B,CAAC;IACnC,IAAI,IAAI,qBAAqB,CAAC;IAC9B,IAAI,IAAI,iBAAiB,CAAC;IAC1B,IAAI,IAAI,aAAa,CAAC;IACtB,IAAI,IAAI,mBAAmB,CAAC;IAC5B,IAAI,IAAI,UAAU,CAAC;IACnB,IAAI,IAAI,gBAAgB,CAAC;AACzB;IACA,IAAI,IAAI,SAAS,CAAC;AAClB;IACA,IAAI,SAAS,IAAI,CAAC,cAAc,EAAE,gBAAgB,EAAE,aAAa;IACjE,kBAAkB,uBAAuB,EAAE,iBAAiB,EAAE,wBAAwB,EAAE,cAAc,EAAE;IACxG,QAAQ,MAAM,aAAa,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;AAChD;IACA,QAAQ,IAAI,CAAC,eAAe,EAAE;IAC9B,YAAY,MAAM,aAAa,GAAG,IAAI,WAAW,CAAC,UAAU,EAAE,mBAAmB,EAAE,iBAAiB,CAAC,UAAU,GAAG,SAAS,CAAC,WAAW,CAAC,CAAC;IACzI,YAAY,aAAa,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;IACjD,YAAY,MAAM,UAAU,GAAG,IAAI,YAAY,CAAC,UAAU,EAAE,gBAAgB,EAAE,cAAc,CAAC,UAAU,GAAG,SAAS,CAAC,aAAa,CAAC,CAAC;IACnI,YAAY,UAAU,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;IAC3C,YAAY,IAAI,uBAAuB,EAAE;IACzC,gBAAgB,IAAI,oBAAoB,CAAC;IACzC,gBAAgB,IAAI,gBAAgB,EAAE;IACtC,oBAAoB,oBAAoB,GAAG,IAAI,UAAU,CAAC,UAAU,EAAE,0BAA0B;IAChG,0DAA0D,wBAAwB,CAAC,UAAU,GAAG,SAAS,CAAC,WAAW,CAAC,CAAC;IACvH,iBAAiB,MAAM;IACvB,oBAAoB,oBAAoB,GAAG,IAAI,YAAY,CAAC,UAAU,EAAE,0BAA0B;IAClG,4DAA4D,wBAAwB,CAAC,UAAU,GAAG,SAAS,CAAC,aAAa,CAAC,CAAC;IAC3H,iBAAiB;IACjB,gBAAgB,oBAAoB,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;IACnE,aAAa;IACb,SAAS;AACT;IACA,QAAQ,IAAI,CAAC,UAAU,EAAE,UAAU,GAAG,IAAI,WAAW,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;IAC/E,QAAQ,IAAI,YAAY,CAAC,UAAU,EAAE,mBAAmB,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IACjF,QAAQ,IAAI,WAAW,CAAC,UAAU,EAAE,iBAAiB,EAAE,SAAS,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAChG,QAAQ,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,mBAAmB,EAAE,aAAa,EAAE,0BAA0B;IACvG,yCAAyC,qBAAqB,EAAE,iBAAiB,EAAE,mBAAmB;IACtG,yCAAyC,mBAAmB,EAAE,sBAAsB,EAAE,gBAAgB,EAAE,SAAS,CAAC,aAAa;IAC/H,yCAAyC,cAAc,EAAE,gBAAgB,EAAE,UAAU,EAAE,uBAAuB,EAAE,gBAAgB;IAChI,yCAAyC,WAAW,CAAC,CAAC;AACtD;IACA,QAAQ,MAAM,WAAW,GAAG;IAC5B,YAAY,UAAU,EAAE,IAAI;IAC5B,YAAY,gBAAgB,EAAE,cAAc;IAC5C,YAAY,kBAAkB,EAAE,gBAAgB;IAChD,YAAY,UAAU,EAAE,CAAC;IACzB,SAAS,CAAC;IACV,QAAQ,IAAI,CAAC,eAAe,EAAE;IAC9B,YAAY,MAAM,aAAa,GAAG,IAAI,WAAW,CAAC,UAAU,EAAE,mBAAmB,EAAE,gBAAgB,CAAC,CAAC;IACrG,YAAY,IAAI,CAAC,gBAAgB,IAAI,gBAAgB,CAAC,MAAM,GAAG,gBAAgB,EAAE;IACjF,gBAAgB,gBAAgB,GAAG,IAAI,WAAW,CAAC,gBAAgB,CAAC,CAAC;IACrE,aAAa;IACb,YAAY,gBAAgB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAChD,YAAY,WAAW,CAAC,aAAa,GAAG,gBAAgB,CAAC;IACzD,SAAS;IACT,QAAQ,MAAM,WAAW,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;AAC9C;IACA,QAAQ,WAAW,CAAC,QAAQ,GAAG,WAAW,GAAG,aAAa,CAAC;AAC3D;IACA,QAAQ,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;IACtC,KAAK;AACL;IACA,IAAI,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC,KAAK;IAC5B,QAAQ,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE;IAC5B,YAAY,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC;IACrC,YAAY,gBAAgB,GAAG,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC;IACvD,YAAY,IAAI,gBAAgB,EAAE;IAClC,gBAAgB,IAAI,UAAU,CAAC,UAAU,EAAE,aAAa,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,SAAS,CAAC,WAAW,GAAG,CAAC;IACxG,+BAA+B,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;IACpF,aAAa,MAAM;IACnB,gBAAgB,IAAI,YAAY,CAAC,UAAU,EAAE,aAAa,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,SAAS,CAAC,aAAa,GAAG,CAAC;IAC5G,iCAAiC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC;IACxF,aAAa;IACb,YAAY,IAAI,WAAW,EAAE;IAC7B,gBAAgB,IAAI,WAAW,CAAC,UAAU,EAAE,sBAAsB,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,CAAC;IAC1F,gCAAgC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC;IAC3F,aAAa;IACb,YAAY,IAAI,CAAC,WAAW,CAAC;IAC7B,gBAAgB,eAAe,EAAE,IAAI;IACrC,aAAa,CAAC,CAAC;IACf,SAAS,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE;IAChC,YAAY,MAAM,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAC;IAClE,YAAY,MAAM,SAAS,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,IAAI,CAAC,CAAC;IAC9D,YAAY,MAAM,uBAAuB,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC;AAChF;IACA,YAAY,IAAI,iBAAiB,CAAC;IAClC,YAAY,IAAI,wBAAwB,CAAC;IACzC,YAAY,IAAI,cAAc,CAAC;IAC/B,YAAY,IAAI,CAAC,eAAe,EAAE;IAClC,gBAAgB,iBAAiB,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC;IAC9D,gBAAgB,cAAc,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;IACxD,gBAAgB,IAAI,uBAAuB,EAAE,wBAAwB,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC;IACzG,aAAa;IACb,YAAY,IAAI,CAAC,SAAS,EAAE,WAAW,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,uBAAuB;IAC3F,iBAAiB,iBAAiB,EAAE,wBAAwB,EAAE,cAAc,CAAC,CAAC;IAC9E,SAAS,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE;IAChC;IACA,YAAY,SAAS,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC;AAC9C;IACA,YAAY,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;IAChD,YAAY,eAAe,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC;IAC1D,YAAY,gBAAgB,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC;IAC5D,YAAY,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;AAClD;IACA,YAAY,MAAM,uBAAuB,GAAG,gBAAgB,IAAI,SAAS,CAAC,WAAW,GAAG,CAAC,KAAK,SAAS,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC;AAC3H;IACA,YAAY,MAAM,eAAe,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;AAChF;IACA,YAAY,MAAM,UAAU,GAAG,EAAE,GAAG,SAAS,CAAC,aAAa,CAAC;IAC5D,YAAY,MAAM,8BAA8B,GAAG,UAAU,GAAG,SAAS,CAAC,WAAW,CAAC;IACtF,YAAY,MAAM,wBAAwB,GAAG,UAAU,GAAG,uBAAuB,CAAC;IAClF,YAAY,MAAM,0CAA0C,GAAG,UAAU,CAAC;IAC1E,YAAY,MAAM,qCAAqC,GAAG,gBAAgB;IAC1E,2DAA2D,UAAU,GAAG,SAAS,CAAC,WAAW,KAAK,UAAU,GAAG,SAAS,CAAC,aAAa,CAAC,CAAC;IACxI,YAAY,MAAM,gCAAgC,GAAG,UAAU,GAAG,SAAS,CAAC,WAAW,CAAC;IACxF,YAAY,MAAM,8BAA8B,GAAG,UAAU,GAAG,SAAS,CAAC,WAAW,CAAC;IACtF,YAAY,MAAM,wCAAwC,GAAG,SAAS,CAAC,aAAa,GAAG,SAAS,CAAC,WAAW,GAAG,CAAC,CAAC;IACjH,YAAY,MAAM,iCAAiC,GAAG,WAAW,IAAI,UAAU,GAAG,SAAS,CAAC,WAAW,IAAI,CAAC,CAAC;IAC7G,YAAY,MAAM,2BAA2B,GAAG,WAAW,IAAI,SAAS,CAAC,SAAS,GAAG,UAAU,IAAI,CAAC,CAAC;IACrG,YAAY,MAAM,WAAW,GAAG,SAAS,CAAC,cAAc,GAAG,EAAE,CAAC;AAC9D;IACA,YAAY,MAAM,mBAAmB,GAAG,8BAA8B;IACtE,wCAAwC,wBAAwB;IAChE,wCAAwC,0CAA0C;IAClF,wCAAwC,qCAAqC;IAC7E,wCAAwC,gCAAgC;IACxE,wCAAwC,wCAAwC;IAChF,wCAAwC,8BAA8B;IACtE,wCAAwC,iCAAiC;IACzE,wCAAwC,2BAA2B;IACnE,wCAAwC,WAAW,CAAC;IACpD,YAAY,MAAM,kBAAkB,GAAG,IAAI,CAAC,KAAK,CAAC,mBAAmB,GAAG,SAAS,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;IACvG,YAAY,MAAM,gBAAgB,GAAG;IACrC,gBAAgB,MAAM,EAAE,EAAE;IAC1B,gBAAgB,GAAG,EAAE;IACrB,oBAAoB,MAAM,EAAE,IAAI,WAAW,CAAC,MAAM,CAAC;IACnD,wBAAwB,OAAO,EAAE,kBAAkB,GAAG,CAAC;IACvD,wBAAwB,OAAO,EAAE,kBAAkB,GAAG,CAAC;IACvD,wBAAwB,MAAM,EAAE,IAAI;IACpC,qBAAqB,CAAC;IACtB,iBAAiB;IACjB,aAAa,CAAC;IACd,YAAY,WAAW,CAAC,OAAO,CAAC,eAAe,CAAC;IAChD,aAAa,IAAI,CAAC,CAAC,UAAU,KAAK;IAClC,gBAAgB,OAAO,WAAW,CAAC,WAAW,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;IAC7E,aAAa,CAAC;IACd,aAAa,IAAI,CAAC,CAAC,QAAQ,KAAK;IAChC,gBAAgB,YAAY,GAAG,QAAQ,CAAC;IACxC,gBAAgB,mBAAmB,GAAG,CAAC,CAAC;IACxC,gBAAgB,aAAa,GAAG,mBAAmB,GAAG,8BAA8B,CAAC;IACrF,gBAAgB,mBAAmB,GAAG,aAAa,GAAG,wBAAwB,CAAC;IAC/E,gBAAgB,0BAA0B,GAAG,mBAAmB,GAAG,0CAA0C,CAAC;IAC9G,gBAAgB,qBAAqB,GAAG,0BAA0B,GAAG,qCAAqC,CAAC;IAC3G,gBAAgB,iBAAiB,GAAG,qBAAqB,GAAG,gCAAgC,CAAC;IAC7F,gBAAgB,mBAAmB,GAAG,iBAAiB,GAAG,wCAAwC,CAAC;IACnG,gBAAgB,sBAAsB,GAAG,mBAAmB,GAAG,8BAA8B,CAAC;IAC9F,gBAAgB,gBAAgB,GAAG,sBAAsB,GAAG,iCAAiC,CAAC;IAC9F,gBAAgB,UAAU,GAAG,gBAAgB,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC;IAChE,gBAAgB,IAAI,eAAe,EAAE;IACrC,oBAAoB,IAAI,CAAC,WAAW,CAAC;IACrC,wBAAwB,yBAAyB,EAAE,IAAI;IACvD,wBAAwB,qBAAqB,EAAE,UAAU;IACzD,wBAAwB,qBAAqB,EAAE,mBAAmB;IAClE,wBAAwB,qBAAqB,EAAE,UAAU;IACzD,wBAAwB,qBAAqB,EAAE,mBAAmB;IAClE,wBAAwB,4BAA4B,EAAE,UAAU;IAChE,wBAAwB,4BAA4B,EAAE,0BAA0B;IAChF,wBAAwB,kBAAkB,EAAE,UAAU;IACtD,wBAAwB,kBAAkB,EAAE,gBAAgB;IAC5D,qBAAqB,CAAC,CAAC;IACvB,iBAAiB,MAAM;IACvB,oBAAoB,IAAI,CAAC,WAAW,CAAC;IACrC,wBAAwB,yBAAyB,EAAE,IAAI;IACvD,qBAAqB,CAAC,CAAC;IACvB,iBAAiB;IACjB,aAAa,CAAC,CAAC;IACf,SAAS;IACT,KAAK,CAAC;IACN,CAAC;AACD;IACO,SAAS,gBAAgB,CAAC,UAAU,EAAE,eAAe,EAAE,gBAAgB,EAAE,WAAW,EAAE;IAC7F,IAAI,MAAM,MAAM,GAAG,IAAI,MAAM;IAC7B,QAAQ,GAAG,CAAC,eAAe;IAC3B,YAAY,IAAI,IAAI,CAAC,CAAC,GAAG,EAAE,UAAU,CAAC,QAAQ,EAAE,EAAE,SAAS,CAAC,EAAE;IAC9D,gBAAgB,IAAI,EAAE,wBAAwB;IAC9C,aAAa,CAAC;IACd,SAAS;IACT,KAAK,CAAC;AACN;IACA,IAAI,MAAM,sBAAsB,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC;IACpD,IAAI,MAAM,eAAe,GAAG,IAAI,UAAU,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;IAC1E,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,sBAAsB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IAC5D,QAAQ,eAAe,CAAC,CAAC,CAAC,GAAG,sBAAsB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;IAClE,KAAK;AACL;IACA,IAAI,MAAM,CAAC,WAAW,CAAC;IACvB,QAAQ,MAAM,EAAE;IAChB,YAAY,iBAAiB,EAAE,eAAe,CAAC,MAAM;IACrD,YAAY,YAAY,EAAE,UAAU;IACpC,YAAY,iBAAiB,EAAE,eAAe;IAC9C,YAAY,kBAAkB,EAAE,gBAAgB;IAChD,YAAY,aAAa,EAAE,WAAW;IACtC;IACA,YAAY,WAAW,EAAE;IACzB,gBAAgB,eAAe,EAAE,SAAS,CAAC,aAAa;IACxD,gBAAgB,aAAa,EAAE,SAAS,CAAC,WAAW;IACpD,gBAAgB,eAAe,EAAE,SAAS,CAAC,aAAa;IACxD,gBAAgB,gBAAgB,EAAE,SAAS,CAAC,cAAc;IAC1D,gBAAgB,WAAW,EAAE,SAAS,CAAC,SAAS;IAChD,aAAa;IACb,SAAS;IACT,KAAK,CAAC,CAAC;IACP,IAAI,OAAO,MAAM,CAAC;IAClB;;ACpOY,UAAC,SAAS,GAAG;IACzB,IAAI,IAAI,EAAE,CAAC;IACX,IAAI,EAAE,EAAE,CAAC;IACT,IAAI,EAAE,EAAE,CAAC;IACT;;ICJA;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;AACA;IACO,MAAM,QAAQ,CAAC;AACtB;IACA,IAAI,OAAO,YAAY,EAAE,QAAQ,GAAG;AACpC;IACA,QAAQ,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,EAAE,QAAQ,EAAE,CAAC;AAC1D;IACA,QAAQ,SAAS,WAAW,iBAAiB;AAC7C;IACA,YAAY,IAAI,cAAc,GAAG,IAAI,CAAC;AACtC;IACA,YAAY,eAAe,gBAAgB,EAAE,OAAO,GAAG;AACvD;IACA,gBAAgB,OAAO,CAAC,gBAAgB,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC;AAClE;IACA,gBAAgB,MAAM,QAAQ,CAAC,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,CAAC;IACxD,gBAAgB,MAAM,CAAC,WAAW,GAAG,SAAS,CAAC;AAC/C;IACA,gBAAgB,cAAc,GAAG,OAAO,CAAC;AACzC;IACA,aAAa;AACb;IACA,YAAY,SAAS,cAAc,gBAAgB;AACnD;IACA,gBAAgB,cAAc,CAAC,mBAAmB,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC;AAC5E;IACA,gBAAgB,MAAM,CAAC,WAAW,GAAG,UAAU,CAAC;AAChD;IACA,gBAAgB,cAAc,GAAG,IAAI,CAAC;AACtC;IACA,aAAa;AACb;IACA;AACA;IACA,YAAY,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,EAAE,CAAC;AACtC;IACA,YAAY,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,SAAS,CAAC;IAC5C,YAAY,MAAM,CAAC,KAAK,CAAC,IAAI,GAAG,kBAAkB,CAAC;IACnD,YAAY,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC;AACzC;IACA,YAAY,MAAM,CAAC,WAAW,GAAG,UAAU,CAAC;AAC5C;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA,YAAY,MAAM,WAAW,GAAG,EAAE,gBAAgB,EAAE,CAAC,aAAa,EAAE,eAAe,EAAE,eAAe,EAAE,QAAQ,CAAC,EAAE,CAAC;AAClH;IACA,YAAY,MAAM,CAAC,YAAY,GAAG,WAAW;AAC7C;IACA,gBAAgB,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;AAC7C;IACA,aAAa,CAAC;AACd;IACA,YAAY,MAAM,CAAC,YAAY,GAAG,WAAW;AAC7C;IACA,gBAAgB,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;AAC7C;IACA,aAAa,CAAC;AACd;IACA,YAAY,MAAM,CAAC,OAAO,GAAG,WAAW;AACxC;IACA,gBAAgB,KAAK,cAAc,KAAK,IAAI,GAAG;AAC/C;IACA,oBAAoB,SAAS,CAAC,EAAE,CAAC,cAAc,EAAE,cAAc,EAAE,WAAW,EAAE,CAAC,IAAI,EAAE,gBAAgB,EAAE,CAAC;AACxG;IACA,iBAAiB,MAAM;AACvB;IACA,oBAAoB,cAAc,CAAC,GAAG,EAAE,CAAC;AACzC;IACA,oBAAoB,KAAK,SAAS,CAAC,EAAE,CAAC,YAAY,KAAK,SAAS,GAAG;AACnE;IACA,wBAAwB,SAAS,CAAC,EAAE,CAAC,YAAY,EAAE,cAAc,EAAE,WAAW,EAAE;IAChF,6BAA6B,IAAI,EAAE,gBAAgB,EAAE;IACrD,6BAA6B,KAAK,EAAE,EAAE,GAAG,MAAM;AAC/C;IACA,gCAAgC,OAAO,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC;AACpD;IACA,6BAA6B,EAAE,CAAC;AAChC;IACA,qBAAqB;AACrB;IACA,iBAAiB;AACjB;IACA,aAAa,CAAC;AACd;IACA,YAAY,KAAK,SAAS,CAAC,EAAE,CAAC,YAAY,KAAK,SAAS,GAAG;AAC3D;IACA,gBAAgB,SAAS,CAAC,EAAE,CAAC,YAAY,EAAE,cAAc,EAAE,WAAW,EAAE;IACxE,qBAAqB,IAAI,EAAE,gBAAgB,EAAE;IAC7C,qBAAqB,KAAK,EAAE,EAAE,GAAG,MAAM;AACvC;IACA,wBAAwB,OAAO,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC;AAC5C;IACA,qBAAqB,EAAE,CAAC;AACxB;IACA,aAAa;AACb;IACA,SAAS;AACT;IACA,QAAQ,SAAS,aAAa,GAAG;AACjC;IACA,YAAY,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,EAAE,CAAC;AACtC;IACA,YAAY,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;IACzC,YAAY,MAAM,CAAC,KAAK,CAAC,IAAI,GAAG,kBAAkB,CAAC;IACnD,YAAY,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC;AACzC;IACA,YAAY,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC;IACvC,YAAY,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC;AACvC;IACA,YAAY,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;AAClC;IACA,SAAS;AACT;IACA,QAAQ,SAAS,iBAAiB,GAAG;AACrC;IACA,YAAY,aAAa,EAAE,CAAC;AAC5B;IACA,YAAY,MAAM,CAAC,WAAW,GAAG,kBAAkB,CAAC;AACpD;IACA,SAAS;AACT;IACA,QAAQ,SAAS,gBAAgB,EAAE,SAAS,GAAG;AAC/C;IACA,YAAY,aAAa,EAAE,CAAC;AAC5B;IACA,YAAY,OAAO,CAAC,IAAI,EAAE,qDAAqD,EAAE,SAAS,EAAE,CAAC;AAC7F;IACA,YAAY,MAAM,CAAC,WAAW,GAAG,gBAAgB,CAAC;AAClD;IACA,SAAS;AACT;IACA,QAAQ,SAAS,cAAc,EAAE,OAAO,GAAG;AAC3C;IACA,YAAY,OAAO,CAAC,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC;IAChD,YAAY,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;IAC1C,YAAY,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,UAAU,CAAC;IAC/C,YAAY,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,gBAAgB,CAAC;IACpD,YAAY,OAAO,CAAC,KAAK,CAAC,YAAY,GAAG,KAAK,CAAC;IAC/C,YAAY,OAAO,CAAC,KAAK,CAAC,UAAU,GAAG,iBAAiB,CAAC;IACzD,YAAY,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;IACzC,YAAY,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,wBAAwB,CAAC;IAC1D,YAAY,OAAO,CAAC,KAAK,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC/C,YAAY,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;IAC1C,YAAY,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;IAC3C,YAAY,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC;AACzC;IACA,SAAS;AACT;IACA,QAAQ,KAAK,IAAI,IAAI,SAAS,GAAG;AACjC;IACA,YAAY,MAAM,CAAC,EAAE,GAAG,UAAU,CAAC;IACnC,YAAY,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;AAC1C;IACA,YAAY,cAAc,EAAE,MAAM,EAAE,CAAC;AACrC;IACA,YAAY,SAAS,CAAC,EAAE,CAAC,kBAAkB,EAAE,cAAc,EAAE,CAAC,IAAI,EAAE,UAAU,SAAS,GAAG;AAC1F;IACA,gBAAgB,SAAS,GAAG,WAAW,EAAE,GAAG,iBAAiB,EAAE,CAAC;AAChE;IACA,gBAAgB,KAAK,SAAS,IAAI,QAAQ,CAAC,kBAAkB,GAAG;AAChE;IACA,oBAAoB,MAAM,CAAC,KAAK,EAAE,CAAC;AACnC;IACA,iBAAiB;AACjB;IACA,aAAa,EAAE,CAAC,KAAK,EAAE,gBAAgB,EAAE,CAAC;AAC1C;IACA,YAAY,OAAO,MAAM,CAAC;AAC1B;IACA,SAAS,MAAM;AACf;IACA,YAAY,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC;AAC1D;IACA,YAAY,KAAK,MAAM,CAAC,eAAe,KAAK,KAAK,GAAG;AACpD;IACA,gBAAgB,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;IACpF,gBAAgB,OAAO,CAAC,SAAS,GAAG,mBAAmB,CAAC;AACxD;IACA,aAAa,MAAM;AACnB;IACA,gBAAgB,OAAO,CAAC,IAAI,GAAG,2BAA2B,CAAC;IAC3D,gBAAgB,OAAO,CAAC,SAAS,GAAG,qBAAqB,CAAC;AAC1D;IACA,aAAa;AACb;IACA,YAAY,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,kBAAkB,CAAC;IACpD,YAAY,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC;IAC1C,YAAY,OAAO,CAAC,KAAK,CAAC,cAAc,GAAG,MAAM,CAAC;AAClD;IACA,YAAY,cAAc,EAAE,OAAO,EAAE,CAAC;AACtC;IACA,YAAY,OAAO,OAAO,CAAC;AAC3B;IACA,SAAS;AACT;IACA,KAAK;AACL;IACA,IAAI,OAAO,8BAA8B,GAAG;AAC5C;IACA,QAAQ,KAAK,OAAO,SAAS,KAAK,WAAW,IAAI,IAAI,IAAI,SAAS,GAAG;AACrE;IACA;IACA;IACA,YAAY,KAAK,gBAAgB,CAAC,IAAI,EAAE,SAAS,CAAC,SAAS,EAAE,GAAG,OAAO;AACvE;IACA,YAAY,SAAS,CAAC,EAAE,CAAC,gBAAgB,EAAE,gBAAgB,EAAE,MAAM;AACnE;IACA,gBAAgB,QAAQ,CAAC,kBAAkB,GAAG,IAAI,CAAC;AACnD;IACA,aAAa,EAAE,CAAC;AAChB;IACA,SAAS;AACT;IACA,KAAK;AACL;IACA,CAAC;AACD;IACA,QAAQ,CAAC,kBAAkB,GAAG,KAAK,CAAC;IACpC,QAAQ,CAAC,8BAA8B,EAAE;;IC5OzC;IACA;AACA;IACA;IACA;IACA;IACA;IACA;IACA;AACA;IACA;IACA;IACA;AACA;IACO,MAAM,QAAQ,CAAC;AACtB;IACA,IAAI,OAAO,YAAY,EAAE,QAAQ,EAAE,WAAW,GAAG,EAAE,GAAG;AACtD;IACA,QAAQ,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,EAAE,QAAQ,EAAE,CAAC;AAC1D;IACA,QAAQ,SAAS,WAAW,iBAAiB;AAC7C;IACA,YAAY,KAAK,WAAW,CAAC,UAAU,KAAK,SAAS,GAAG;AACxD;IACA,gBAAgB,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,EAAE,KAAK,EAAE,CAAC;IAChE,gBAAgB,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;IAC/C,gBAAgB,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,OAAO,EAAE,CAAC;AACrD;IACA,gBAAgB,MAAM,GAAG,GAAG,QAAQ,CAAC,eAAe,EAAE,4BAA4B,EAAE,KAAK,EAAE,CAAC;IAC5F,gBAAgB,GAAG,CAAC,YAAY,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC;IAChD,gBAAgB,GAAG,CAAC,YAAY,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;IACjD,gBAAgB,GAAG,CAAC,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC;IAChD,gBAAgB,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;IACzC,gBAAgB,GAAG,CAAC,KAAK,CAAC,GAAG,GAAG,MAAM,CAAC;IACvC,gBAAgB,GAAG,CAAC,gBAAgB,EAAE,OAAO,EAAE,WAAW;AAC1D;IACA,oBAAoB,cAAc,CAAC,GAAG,EAAE,CAAC;AACzC;IACA,iBAAiB,EAAE,CAAC;IACpB,gBAAgB,OAAO,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC;AAC3C;IACA,gBAAgB,MAAM,IAAI,GAAG,QAAQ,CAAC,eAAe,EAAE,4BAA4B,EAAE,MAAM,EAAE,CAAC;IAC9F,gBAAgB,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE,+BAA+B,EAAE,CAAC;IAC1E,gBAAgB,IAAI,CAAC,YAAY,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;IACtD,gBAAgB,IAAI,CAAC,YAAY,EAAE,cAAc,EAAE,CAAC,EAAE,CAAC;IACvD,gBAAgB,GAAG,CAAC,WAAW,EAAE,IAAI,EAAE,CAAC;AACxC;IACA,gBAAgB,KAAK,WAAW,CAAC,gBAAgB,KAAK,SAAS,GAAG;AAClE;IACA,oBAAoB,WAAW,CAAC,gBAAgB,GAAG,EAAE,CAAC;AACtD;IACA,iBAAiB;AACjB;IACA,gBAAgB,WAAW,CAAC,gBAAgB,CAAC,IAAI,EAAE,aAAa,EAAE,CAAC;IACnE,gBAAgB,WAAW,CAAC,UAAU,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;AAC3D;IACA,aAAa;AACb;IACA;AACA;IACA,YAAY,IAAI,cAAc,GAAG,IAAI,CAAC;AACtC;IACA,YAAY,eAAe,gBAAgB,EAAE,OAAO,GAAG;AACvD;IACA,gBAAgB,OAAO,CAAC,gBAAgB,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC;AAClE;IACA,gBAAgB,QAAQ,CAAC,EAAE,CAAC,qBAAqB,EAAE,OAAO,EAAE,CAAC;AAC7D;IACA,gBAAgB,MAAM,QAAQ,CAAC,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,CAAC;AACxD;IACA,gBAAgB,MAAM,CAAC,WAAW,GAAG,SAAS,CAAC;IAC/C,gBAAgB,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,EAAE,CAAC;AAC/D;IACA,gBAAgB,cAAc,GAAG,OAAO,CAAC;AACzC;IACA,aAAa;AACb;IACA,YAAY,SAAS,cAAc,gBAAgB;AACnD;IACA,gBAAgB,cAAc,CAAC,mBAAmB,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC;AAC5E;IACA,gBAAgB,MAAM,CAAC,WAAW,GAAG,UAAU,CAAC;IAChD,gBAAgB,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;AACnE;IACA,gBAAgB,cAAc,GAAG,IAAI,CAAC;AACtC;IACA,aAAa;AACb;IACA;AACA;IACA,YAAY,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,EAAE,CAAC;AACtC;IACA,YAAY,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,SAAS,CAAC;IAC5C,YAAY,MAAM,CAAC,KAAK,CAAC,IAAI,GAAG,kBAAkB,CAAC;IACnD,YAAY,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC;AACzC;IACA,YAAY,MAAM,CAAC,WAAW,GAAG,UAAU,CAAC;AAC5C;IACA,YAAY,MAAM,CAAC,YAAY,GAAG,WAAW;AAC7C;IACA,gBAAgB,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;AAC7C;IACA,aAAa,CAAC;AACd;IACA,YAAY,MAAM,CAAC,YAAY,GAAG,WAAW;AAC7C;IACA,gBAAgB,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;AAC7C;IACA,aAAa,CAAC;AACd;IACA,YAAY,MAAM,CAAC,OAAO,GAAG,WAAW;AACxC;IACA,gBAAgB,KAAK,cAAc,KAAK,IAAI,GAAG;AAC/C;IACA,oBAAoB,SAAS,CAAC,EAAE,CAAC,cAAc,EAAE,cAAc,EAAE,WAAW,EAAE,CAAC,IAAI,EAAE,gBAAgB,EAAE,CAAC;AACxG;IACA,iBAAiB,MAAM;AACvB;IACA,oBAAoB,cAAc,CAAC,GAAG,EAAE,CAAC;AACzC;IACA,oBAAoB,KAAK,SAAS,CAAC,EAAE,CAAC,YAAY,KAAK,SAAS,GAAG;AACnE;IACA,wBAAwB,SAAS,CAAC,EAAE,CAAC,YAAY,EAAE,cAAc,EAAE,WAAW,EAAE;IAChF,6BAA6B,IAAI,EAAE,gBAAgB,EAAE;IACrD,6BAA6B,KAAK,EAAE,EAAE,GAAG,MAAM;AAC/C;IACA,gCAAgC,OAAO,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC;AACpD;IACA,6BAA6B,EAAE,CAAC;AAChC;IACA,qBAAqB;AACrB;IACA,iBAAiB;AACjB;IACA,aAAa,CAAC;AACd;IACA,YAAY,KAAK,SAAS,CAAC,EAAE,CAAC,YAAY,KAAK,SAAS,GAAG;AAC3D;IACA,gBAAgB,SAAS,CAAC,EAAE,CAAC,YAAY,EAAE,cAAc,EAAE,WAAW,EAAE;IACxE,qBAAqB,IAAI,EAAE,gBAAgB,EAAE;IAC7C,qBAAqB,KAAK,EAAE,EAAE,GAAG,MAAM;AACvC;IACA,wBAAwB,OAAO,CAAC,IAAI,EAAE,GAAG,EAAE,CAAC;AAC5C;IACA,qBAAqB,EAAE,CAAC;AACxB;IACA,aAAa;AACb;IACA,SAAS;AACT;IACA,QAAQ,SAAS,aAAa,GAAG;AACjC;IACA,YAAY,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,EAAE,CAAC;AACtC;IACA,YAAY,MAAM,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;IACzC,YAAY,MAAM,CAAC,KAAK,CAAC,IAAI,GAAG,kBAAkB,CAAC;IACnD,YAAY,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC;AACzC;IACA,YAAY,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC;IACvC,YAAY,MAAM,CAAC,YAAY,GAAG,IAAI,CAAC;AACvC;IACA,YAAY,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC;AAClC;IACA,SAAS;AACT;IACA,QAAQ,SAAS,kBAAkB,GAAG;AACtC;IACA,YAAY,aAAa,EAAE,CAAC;AAC5B;IACA,YAAY,MAAM,CAAC,WAAW,GAAG,kBAAkB,CAAC;AACpD;IACA,SAAS;AACT;IACA,QAAQ,SAAS,gBAAgB,EAAE,SAAS,GAAG;AAC/C;IACA,YAAY,aAAa,EAAE,CAAC;AAC5B;IACA,YAAY,OAAO,CAAC,IAAI,EAAE,qDAAqD,EAAE,SAAS,EAAE,CAAC;AAC7F;IACA,YAAY,MAAM,CAAC,WAAW,GAAG,gBAAgB,CAAC;AAClD;IACA,SAAS;AACT;IACA,QAAQ,SAAS,cAAc,EAAE,OAAO,GAAG;AAC3C;IACA,YAAY,OAAO,CAAC,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC;IAChD,YAAY,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;IAC1C,YAAY,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,UAAU,CAAC;IAC/C,YAAY,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,gBAAgB,CAAC;IACpD,YAAY,OAAO,CAAC,KAAK,CAAC,YAAY,GAAG,KAAK,CAAC;IAC/C,YAAY,OAAO,CAAC,KAAK,CAAC,UAAU,GAAG,iBAAiB,CAAC;IACzD,YAAY,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;IACzC,YAAY,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,wBAAwB,CAAC;IAC1D,YAAY,OAAO,CAAC,KAAK,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC/C,YAAY,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC;IAC1C,YAAY,OAAO,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;IAC3C,YAAY,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC;AACzC;IACA,SAAS;AACT;IACA,QAAQ,KAAK,IAAI,IAAI,SAAS,GAAG;AACjC;IACA,YAAY,MAAM,CAAC,EAAE,GAAG,UAAU,CAAC;IACnC,YAAY,MAAM,CAAC,KAAK,CAAC,OAAO,GAAG,MAAM,CAAC;AAC1C;IACA,YAAY,cAAc,EAAE,MAAM,EAAE,CAAC;AACrC;IACA,YAAY,SAAS,CAAC,EAAE,CAAC,kBAAkB,EAAE,cAAc,EAAE,CAAC,IAAI,EAAE,UAAU,SAAS,GAAG;AAC1F;IACA,gBAAgB,SAAS,GAAG,WAAW,EAAE,GAAG,kBAAkB,EAAE,CAAC;AACjE;IACA,aAAa,EAAE,CAAC,KAAK,EAAE,gBAAgB,EAAE,CAAC;AAC1C;IACA,YAAY,OAAO,MAAM,CAAC;AAC1B;IACA,SAAS,MAAM;AACf;IACA,YAAY,MAAM,OAAO,GAAG,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE,CAAC;AAC1D;IACA,YAAY,KAAK,MAAM,CAAC,eAAe,KAAK,KAAK,GAAG;AACpD;IACA,gBAAgB,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;IACpF,gBAAgB,OAAO,CAAC,SAAS,GAAG,mBAAmB,CAAC;AACxD;IACA,aAAa,MAAM;AACnB;IACA,gBAAgB,OAAO,CAAC,IAAI,GAAG,2BAA2B,CAAC;IAC3D,gBAAgB,OAAO,CAAC,SAAS,GAAG,qBAAqB,CAAC;AAC1D;IACA,aAAa;AACb;IACA,YAAY,OAAO,CAAC,KAAK,CAAC,IAAI,GAAG,kBAAkB,CAAC;IACpD,YAAY,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC;IAC1C,YAAY,OAAO,CAAC,KAAK,CAAC,cAAc,GAAG,MAAM,CAAC;AAClD;IACA,YAAY,cAAc,EAAE,OAAO,EAAE,CAAC;AACtC;IACA,YAAY,OAAO,OAAO,CAAC;AAC3B;IACA,SAAS;AACT;IACA,KAAK;AACL;IACA;;ACnPY,UAAC,UAAU,GAAG;IAC1B,IAAI,MAAM,EAAE,CAAC;IACb,IAAI,QAAQ,EAAE,CAAC;IACf,IAAI,KAAK,EAAE,CAAC;IACZ;;ICqBA,MAAM,gBAAgB,GAAG,EAAE,CAAC;IAC5B,MAAM,mCAAmC,GAAG,GAAG,CAAC;IAChD,MAAM,kDAAkD,GAAG,OAAO,CAAC;IACnE,MAAM,0BAA0B,GAAG,IAAI,CAAC;IACxC,MAAM,2BAA2B,GAAG,GAAG,CAAC;IACxC,MAAM,+CAA+C,GAAG,EAAE,CAAC;AAC3D;IACA;IACA;IACA;IACA;IACO,MAAM,MAAM,CAAC;AACpB;IACA,IAAI,WAAW,CAAC,OAAO,GAAG,EAAE,EAAE;AAC9B;IACA;IACA;IACA,QAAQ,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5D,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AACxE;IACA;IACA,QAAQ,IAAI,CAAC,OAAO,CAAC,qBAAqB,EAAE,OAAO,CAAC,qBAAqB,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACxF,QAAQ,IAAI,CAAC,qBAAqB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;AAClG;IACA;IACA,QAAQ,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,OAAO,CAAC,mBAAmB,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAClF,QAAQ,IAAI,CAAC,mBAAmB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAC9F;IACA;IACA,QAAQ,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,KAAK,CAAC;AACtD;IACA;IACA,QAAQ,IAAI,OAAO,CAAC,cAAc,KAAK,SAAS,IAAI,OAAO,CAAC,cAAc,KAAK,IAAI,EAAE,OAAO,CAAC,cAAc,GAAG,IAAI,CAAC;IACnH,QAAQ,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;IACzE,QAAQ,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACrE;IACA;IACA,QAAQ,IAAI,OAAO,CAAC,kBAAkB,KAAK,SAAS,EAAE,OAAO,CAAC,kBAAkB,GAAG,IAAI,CAAC;IACxF,QAAQ,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,CAAC;AAC7D;IACA;IACA,QAAQ,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;AAC/C;IACA;IACA;IACA,QAAQ,IAAI,CAAC,sBAAsB,GAAG,OAAO,CAAC,sBAAsB,IAAI,KAAK,CAAC;IAC9E,QAAQ,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,sBAAsB,GAAG,CAAC,GAAG,MAAM,CAAC,gBAAgB,CAAC;AAC1F;IACA;IACA,QAAQ,IAAI,CAAC,6BAA6B,GAAG,OAAO,CAAC,6BAA6B,IAAI,KAAK,CAAC;AAC5F;IACA;IACA,QAAQ,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;IAC7C;IACA,QAAQ,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;IACzC;IACA,QAAQ,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;AACrC;IACA;IACA;IACA,QAAQ,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,IAAI,KAAK,CAAC;AACtE;IACA;IACA;IACA;IACA,QAAQ,IAAI,OAAO,CAAC,gBAAgB,KAAK,SAAS,IAAI,OAAO,CAAC,gBAAgB,KAAK,IAAI,EAAE;IACzF,YAAY,OAAO,CAAC,gBAAgB,GAAG,IAAI,CAAC;IAC5C,SAAS;IACT,QAAQ,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,CAAC;AACzD;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,OAAO,CAAC,sBAAsB,KAAK,SAAS,IAAI,OAAO,CAAC,sBAAsB,KAAK,IAAI,EAAE,OAAO,CAAC,sBAAsB,GAAG,IAAI,CAAC;IAC3I,QAAQ,IAAI,CAAC,sBAAsB,GAAG,OAAO,CAAC,sBAAsB,CAAC;AACrE;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC;AACnD;IACA;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,KAAK,CAAC;AACxD;IACA,QAAQ,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,IAAI,SAAS,CAAC,IAAI,CAAC;AAC7D;IACA,QAAQ,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,CAAC,IAAI,EAAE;IAC/C,YAAY,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;IAC5C,SAAS;AACT;IACA;IACA;IACA,QAAQ,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,IAAI,UAAU,CAAC,MAAM,CAAC;AAClE;IACA;IACA;IACA;IACA;IACA,QAAQ,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,IAAI,eAAe,CAAC,OAAO,CAAC;AAClF;IACA;IACA;IACA,QAAQ,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,eAAe,IAAI,GAAG,CAAC;AAC9D;IACA;IACA,QAAQ,IAAI,CAAC,uBAAuB,GAAG,OAAO,CAAC,uBAAuB,IAAI,IAAI,CAAC;AAC/E;IACA,QAAQ,IAAI,CAAC,eAAe,EAAE,CAAC;AAC/B;IACA,QAAQ,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IAC7B,QAAQ,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;IACxC,QAAQ,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;AACzC;IACA,QAAQ,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;IACvC,QAAQ,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;AACtC;IACA,QAAQ,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;IACpC,QAAQ,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;IACtC,QAAQ,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;AAC9B;IACA,QAAQ,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;AAChC;IACA,QAAQ,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IAC/B,QAAQ,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IACjC,QAAQ,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;IAClC,QAAQ,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;IAC5C,QAAQ,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;IAC5C,QAAQ,IAAI,CAAC,8BAA8B,GAAG,IAAI,CAAC;IACnD,QAAQ,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;IACzC,QAAQ,IAAI,CAAC,iBAAiB,GAAG,EAAE,CAAC;AACpC;IACA,QAAQ,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;IAC3C,QAAQ,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;AACtC;IACA,QAAQ,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,EAAE,CAAC;AACzC;IACA,QAAQ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AAC9B;IACA,QAAQ,IAAI,CAAC,uBAAuB,GAAG,KAAK,CAAC;AAC7C;IACA,QAAQ,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC;IAC5B,QAAQ,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;IAC9B,QAAQ,IAAI,CAAC,uBAAuB,GAAG,CAAC,CAAC;AACzC;IACA,QAAQ,IAAI,CAAC,oBAAoB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACxD,QAAQ,IAAI,CAAC,gBAAgB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AACpD;IACA,QAAQ,IAAI,CAAC,aAAa,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACjD,QAAQ,IAAI,CAAC,iBAAiB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACrD,QAAQ,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;AAClC;IACA,QAAQ,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;IACnC,QAAQ,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;IACtC,QAAQ,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;IACtC,QAAQ,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;IACpC,QAAQ,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;AACpC;IACA,QAAQ,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAChC,QAAQ,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;IACxC,QAAQ,IAAI,CAAC,uBAAuB,GAAG,EAAE,CAAC;IAC1C,QAAQ,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;IAC1C,QAAQ,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;AAC7C;IACA,QAAQ,IAAI,CAAC,cAAc,GAAG,IAAI,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC1F,QAAQ,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;IACnC,QAAQ,IAAI,CAAC,kBAAkB,GAAG,IAAI,kBAAkB,CAAC,IAAI,CAAC,WAAW,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC5F,QAAQ,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC;IACvC,QAAQ,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,WAAW,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC1E,QAAQ,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;AAC9B;IACA,QAAQ,IAAI,CAAC,mBAAmB,GAAG,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,GAAG,KAAK,CAAC;IACnF,QAAQ,IAAI,CAAC,qBAAqB,GAAG,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,GAAG,KAAK,CAAC;AACvF;IACA,QAAQ,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IACjC,QAAQ,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;IAC/B,QAAQ,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IAC9B,QAAQ,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC;IAC1C,KAAK;AACL;IACA,IAAI,eAAe,GAAG;IACtB,QAAQ,IAAI,CAAC,SAAS,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,6BAA6B,EAAE,IAAI,CAAC,gBAAgB;IACnH,uCAAuC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,uBAAuB,CAAC,CAAC;IACvI,QAAQ,IAAI,CAAC,SAAS,CAAC,aAAa,GAAG,KAAK,CAAC;IAC7C,KAAK;AACL;IACA,IAAI,IAAI,GAAG;AACX;IACA,QAAQ,IAAI,IAAI,CAAC,WAAW,EAAE,OAAO;AACrC;IACA,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;IAC/B,YAAY,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE;IAC7C,gBAAgB,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IACjE,gBAAgB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC;IACtD,gBAAgB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;IACvD,gBAAgB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,GAAG,UAAU,CAAC;IAC7D,gBAAgB,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC5D,aAAa,MAAM;IACnB,gBAAgB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,aAAa,IAAI,QAAQ,CAAC,IAAI,CAAC;IAC3F,aAAa;IACb,SAAS;AACT;IACA,QAAQ,MAAM,gBAAgB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACrD,QAAQ,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;AACnD;IACA,QAAQ,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;IACvC,YAAY,IAAI,CAAC,iBAAiB,GAAG,IAAIA,gBAAK,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,CAAC,GAAG,gBAAgB,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;IACvI,YAAY,IAAI,CAAC,kBAAkB,GAAG,IAAIA,gBAAK,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC,GAAG,CAAC;IAClH,mEAAmE,gBAAgB,CAAC,CAAC,GAAG,CAAC,EAAE,gBAAgB,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC;IAChI,YAAY,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,iBAAiB,CAAC;IAC1G,YAAY,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;IAClE,YAAY,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,SAAS,EAAE,CAAC;IAC3D,YAAY,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;IACzD,SAAS;AACT;IACA,QAAQ,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE;IACzC,YAAY,IAAI,CAAC,QAAQ,GAAG,IAAIA,gBAAK,CAAC,aAAa,CAAC;IACpD,gBAAgB,SAAS,EAAE,KAAK;IAChC,gBAAgB,SAAS,EAAE,OAAO;IAClC,aAAa,CAAC,CAAC;IACf,YAAY,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC/D,YAAY,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC;IAC3C,YAAY,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAIA,gBAAK,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE,GAAG,CAAC,CAAC;IAC1E,YAAY,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC;AAC1E;IACA,YAAY,IAAI,CAAC,cAAc,GAAG,IAAI,cAAc,CAAC,MAAM;IAC3D,gBAAgB,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;IAC3D,gBAAgB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC;IAC9E,gBAAgB,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC5C,aAAa,CAAC,CAAC;IACf,YAAY,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC1D,YAAY,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IACnE,SAAS;AACT;IACA,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE;IAC5B,YAAY,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,CAAC,EAAE,EAAE;IACjD,gBAAgB,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IACnF,aAAa,MAAM,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,CAAC,EAAE,EAAE;IACxD,gBAAgB,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IACnF,aAAa;IACb,YAAY,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,OAAO,GAAG,IAAI,CAAC;IAC5C,YAAY,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;IAClE,YAAY,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,SAAS,EAAE,CAAC;IAC3D,YAAY,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;IACzD,SAAS;AACT;IACA,QAAQ,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,IAAI,IAAIA,gBAAK,CAAC,KAAK,EAAE,CAAC;IAC/D,QAAQ,IAAI,CAAC,WAAW,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC5D,QAAQ,IAAI,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC;IAC3C,QAAQ,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,CAAC;IAC5C,QAAQ,IAAI,CAAC,WAAW,CAAC,iBAAiB,EAAE,CAAC;AAC7C;IACA,QAAQ,IAAI,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,SAAS,KAAK,SAAS,CAAC,IAAI,EAAE;IAC1E,YAAY,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;IAC3C,gBAAgB,IAAI,CAAC,mBAAmB,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IAC/G,gBAAgB,IAAI,CAAC,oBAAoB,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IACjH,aAAa,MAAM;IACnB,gBAAgB,IAAI,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE;IACtD,oBAAoB,IAAI,CAAC,oBAAoB,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IACzG,iBAAiB,MAAM;IACvB,oBAAoB,IAAI,CAAC,mBAAmB,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IACxG,iBAAiB;IACjB,aAAa;IACb,YAAY,KAAK,IAAI,QAAQ,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,oBAAoB,CAAC,EAAE;IACxF,gBAAgB,IAAI,QAAQ,EAAE;IAC9B,oBAAoB,QAAQ,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;IACvD,oBAAoB,QAAQ,CAAC,WAAW,GAAG,GAAG,CAAC;IAC/C,oBAAoB,QAAQ,CAAC,aAAa,GAAG,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC;IAC3D,oBAAoB,QAAQ,CAAC,aAAa,GAAG,GAAG,CAAC;IACjD,oBAAoB,QAAQ,CAAC,aAAa,GAAG,IAAI,CAAC;IAClD,oBAAoB,QAAQ,CAAC,aAAa,GAAG,IAAI,CAAC;IAClD,oBAAoB,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;IACnE,iBAAiB;IACjB,aAAa;IACb,YAAY,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,GAAG,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,mBAAmB,CAAC;IACpH,YAAY,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjE,YAAY,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;IACpG,YAAY,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjE,YAAY,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;IACpG,YAAY,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7D,YAAY,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;IAChG,YAAY,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7D,YAAY,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;IAC5E,SAAS;AACT;IACA,QAAQ,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC/D,QAAQ,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3D,QAAQ,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;AACtD;IACA,QAAQ,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAChC,KAAK;AACL;IACA,IAAI,mBAAmB,GAAG;IAC1B,QAAQ,IAAI,IAAI,CAAC,kBAAkB,EAAE;IACrC,YAAY,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,mBAAmB,CAAC,aAAa,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAChG,YAAY,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;IAC1C,YAAY,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,mBAAmB,CAAC,aAAa,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAChG,YAAY,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;IAC1C,YAAY,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;IAC5F,YAAY,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;IACxC,YAAY,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;IACxE,YAAY,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;IACxC,SAAS;IACT,KAAK;AACL;IACA,IAAI,aAAa,CAAC,UAAU,EAAE;IAC9B,QAAQ,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACrC,KAAK;AACL;IACA,IAAI,SAAS,GAAG,WAAW;AAC3B;IACA,QAAQ,MAAM,OAAO,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC5C,QAAQ,MAAM,cAAc,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACnD,QAAQ,MAAM,eAAe,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AACpD;IACA,QAAQ,OAAO,SAAS,CAAC,EAAE;IAC3B,YAAY,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAClC,YAAY,OAAO,CAAC,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAChE,YAAY,cAAc,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;IACpE,YAAY,eAAe,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC;IACtE,YAAY,QAAQ,CAAC,CAAC,IAAI;IAC1B,gBAAgB,KAAK,MAAM;IAC3B,oBAAoB,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC;IACjD,oBAAoB,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAChD,gBAAgB,MAAM;IACtB,gBAAgB,KAAK,MAAM;IAC3B,oBAAoB,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC;IACjD,oBAAoB,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAChD,gBAAgB,MAAM;IACtB,gBAAgB,KAAK,WAAW;IAChC,oBAAoB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;IACtE,gBAAgB,MAAM;IACtB,gBAAgB,KAAK,YAAY;IACjC,oBAAoB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAC;IACvE,gBAAgB,MAAM;IACtB,gBAAgB,KAAK,MAAM;IAC3B,oBAAoB,IAAI,CAAC,cAAc,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC;IAC/D,gBAAgB,MAAM;IACtB,gBAAgB,KAAK,MAAM;IAC3B,oBAAoB,IAAI,CAAC,gBAAgB,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC;IACnE,gBAAgB,MAAM;IACtB,gBAAgB,KAAK,MAAM;IAC3B,oBAAoB,IAAI,CAAC,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC;IACnD,oBAAoB,IAAI,IAAI,CAAC,QAAQ,EAAE;IACvC,wBAAwB,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;IAC9C,qBAAqB,MAAM;IAC3B,wBAAwB,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC;IAC9C,qBAAqB;IACrB,gBAAgB,MAAM;IACtB,gBAAgB,KAAK,MAAM;IAC3B,oBAAoB,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;IACnD,wBAAwB,IAAI,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;IACpF,qBAAqB;IACrB,gBAAgB,MAAM;IACtB,gBAAgB,KAAK,MAAM;IAC3B,oBAAoB,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;IACnD,wBAAwB,IAAI,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,wBAAwB,EAAE,CAAC,CAAC;IAC5G,qBAAqB;IACrB,gBAAgB,MAAM;IACtB,gBAAgB,KAAK,OAAO;IAC5B,oBAAoB,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;IACnD,wBAAwB,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,GAAG,IAAI,CAAC,CAAC;IAC5F,qBAAqB;IACrB,gBAAgB,MAAM;IACtB,gBAAgB,KAAK,OAAO;IAC5B,oBAAoB,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;IACnD,wBAAwB,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,GAAG,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;IAC3G,qBAAqB;IACrB,gBAAgB,MAAM;IACtB,aAAa;IACb,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,WAAW,CAAC,KAAK,EAAE;IACvB,QAAQ,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;IAC7D,KAAK;AACL;IACA,IAAI,WAAW,GAAG;IAClB,QAAQ,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACxD,QAAQ,IAAI,CAAC,aAAa,GAAG,cAAc,EAAE,CAAC;IAC9C,KAAK;AACL;IACA,IAAI,SAAS,GAAG,WAAW;AAC3B;IACA,QAAQ,MAAM,WAAW,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AAChD;IACA,QAAQ,OAAO,SAAS,KAAK,EAAE;IAC/B,YAAY,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IAC7E,YAAY,MAAM,WAAW,GAAG,cAAc,EAAE,CAAC;IACjD,YAAY,MAAM,QAAQ,GAAG,WAAW,GAAG,IAAI,CAAC,aAAa,GAAG,GAAG,IAAI,WAAW,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;IAChG,YAAY,IAAI,QAAQ,EAAE;IAC1B,gBAAgB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;IACzC,aAAa;IACb,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,YAAY,CAAC,KAAK,EAAE;IACxB,QAAQ,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;IAC7D,QAAQ,IAAI,CAAC,wBAAwB,EAAE,CAAC;IACxC,KAAK;AACL;IACA,IAAI,wBAAwB,GAAG,WAAW;AAC1C;IACA,QAAQ,MAAM,gBAAgB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACrD,QAAQ,MAAM,eAAe,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACpD,QAAQ,MAAM,OAAO,GAAG,EAAE,CAAC;AAC3B;IACA,QAAQ,OAAO,WAAW;IAC1B,YAAY,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE;IACjD,gBAAgB,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;IAC3D,gBAAgB,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;IACnC,gBAAgB,IAAI,CAAC,SAAS,CAAC,8BAA8B,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC;IACjH,gBAAgB,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC3E,gBAAgB,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;IACxC,oBAAoB,MAAM,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IAC3C,oBAAoB,MAAM,iBAAiB,GAAG,GAAG,CAAC,MAAM,CAAC;IACzD,oBAAoB,eAAe,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACtF,oBAAoB,IAAI,eAAe,CAAC,MAAM,EAAE,GAAG,mCAAmC,EAAE;IACxF,wBAAwB,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAC7E,wBAAwB,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;IACtE,wBAAwB,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC;IAC9D,wBAAwB,IAAI,CAAC,kCAAkC,GAAG,cAAc,EAAE,CAAC;IACnF,qBAAqB;IACrB,iBAAiB;IACjB,aAAa;IACb,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,mBAAmB,CAAC,aAAa,EAAE;IACvC,QAAQ,IAAI,IAAI,CAAC,WAAW,EAAE;IAC9B,YAAY,aAAa,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC;IAC3D,YAAY,aAAa,CAAC,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC;IAC5D,SAAS,MAAM;IACf,YAAY,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IACjD,SAAS;IACT,KAAK;AACL;IACA,IAAI,mBAAmB,CAAC,gBAAgB,EAAE;IAC1C,QAAQ,IAAI,gBAAgB,KAAK,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE,OAAO;IAC1E,QAAQ,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;IACvC,QAAQ,MAAM,QAAQ,GAAG,gBAAgB,GAAG,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,iBAAiB,CAAC;IAC7F,QAAQ,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IACpD,QAAQ,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;IACxC,QAAQ,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;IACpD,QAAQ,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;IACxD,QAAQ,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IAChD,QAAQ,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B;IACA,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE;IAC3B,YAAY,MAAM,YAAY,GAAG,IAAI,CAAC,QAAQ,CAAC;IAC/C,YAAY,MAAM,UAAU,GAAG,gBAAgB,GAAG,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,mBAAmB,CAAC;IACvG,YAAY,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IACxD,YAAY,UAAU,CAAC,mBAAmB,EAAE,CAAC;IAC7C,YAAY,YAAY,CAAC,mBAAmB,EAAE,CAAC;IAC/C,YAAY,IAAI,gBAAgB,EAAE;IAClC,gBAAgB,MAAM,CAAC,yBAAyB,CAAC,QAAQ,EAAE,UAAU,EAAE,YAAY,CAAC,CAAC;IACrF,aAAa,MAAM;IACnB,gBAAgB,MAAM,CAAC,yBAAyB,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;IACnF,aAAa;IACb,YAAY,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;IACvC,YAAY,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IACrD,SAAS;IACT,KAAK;AACL;IACA,IAAI,OAAO,yBAAyB,GAAG,WAAW;AAClD;IACA,QAAQ,MAAM,UAAU,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AAC/C;IACA,QAAQ,OAAO,SAAS,cAAc,EAAE,YAAY,EAAE,QAAQ,EAAE;IAChE,YAAY,MAAM,gBAAgB,GAAG,CAAC,IAAI,YAAY,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;IACrE,YAAY,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,SAAS,EAAE,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC,MAAM,EAAE,CAAC;IAChI,YAAY,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAC1E,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;AACA;IACA,IAAI,OAAO,yBAAyB,GAAG,WAAW;AAClD;IACA,QAAQ,MAAM,UAAU,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AAC/C;IACA,QAAQ,OAAO,SAAS,UAAU,EAAE,cAAc,EAAE,QAAQ,EAAE;IAC9D,YAAY,MAAM,gBAAgB,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,CAAC;IAC5G,YAAY,UAAU,CAAC,IAAI,GAAG,CAAC,IAAI,gBAAgB,GAAG,IAAI,CAAC,CAAC;IAC5D,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,eAAe,GAAG,WAAW;AACjC;IACA,QAAQ,MAAM,gBAAgB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AACrD;IACA,QAAQ,OAAO,WAAW;IAC1B,YAAY,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO;IACxC,YAAY,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC;IAC9D,YAAY,IAAI,UAAU,GAAG,CAAC,EAAE;IAChC,gBAAgB,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC;IAClD,gBAAgB,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;IAC3D,gBAAgB,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG;IACnF,qCAAqC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC,CAAC,CAAC;IAChF,gBAAgB,MAAM,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,GAAG;IACnF,qCAAqC,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC,CAAC,CAAC;AAChF;IACA,gBAAgB,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,IAAI,GAAG,GAAG,IAAI,CAAC,gBAAgB,IAAI,GAAG,CAAC;IAC/G,gBAAgB,MAAM,eAAe,GAAG,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IAC/E,gBAAgB,MAAM,sBAAsB,GAAG,GAAG,GAAG,eAAe,CAAC;AACrE;IACA,gBAAgB,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,gBAAgB,EAAE,YAAY,GAAG,eAAe,EAAE,YAAY,GAAG,eAAe;IAC9H,8CAA8C,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,IAAI,GAAG,EAAE,sBAAsB,CAAC,CAAC;IACjI,aAAa;IACb,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,oBAAoB,GAAG;IAC3B,QAAQ,OAAO,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,qBAAqB,KAAK,IAAI;IACnG,2BAA2B,IAAI,CAAC,wBAAwB,KAAK,IAAI,CAAC;IAClE,KAAK;AACL;IACA,IAAI,qBAAqB,GAAG;IAC5B,QAAQ,OAAO,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,QAAQ,CAAC;IAC/C,KAAK;AACL;AACA;IACA,IAAI,0BAA0B,GAAG;IACjC,QAAQ,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;IAC1C,KAAK;AACL;IACA,IAAI,wBAAwB,CAAC,OAAO,EAAE;IACtC,QAAQ,IAAI,CAAC,qBAAqB,GAAG,OAAO,CAAC;IAC7C,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,aAAa,CAAC,IAAI,EAAE,OAAO,GAAG,EAAE,EAAE;AACtC;IACA,QAAQ,IAAI,IAAI,CAAC,oBAAoB,EAAE,EAAE;IACzC,YAAY,MAAM,IAAI,KAAK,CAAC,6EAA6E,CAAC,CAAC;IAC3G,SAAS;AACT;IACA,QAAQ,IAAI,IAAI,CAAC,qBAAqB,EAAE,EAAE;IAC1C,YAAY,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;IACjF,SAAS;AACT;IACA,QAAQ,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IACpC,QAAQ,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,IAAI,EAAE;IACrD,YAAY,MAAM,GAAG,mBAAmB,CAAC,IAAI,CAAC,CAAC;IAC/C,SAAS;IACT,QAAQ,MAAM,mBAAmB,GAAG,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,OAAO,CAAC,UAAU,CAAC;AACtF;IACA,QAAQ,MAAM,kBAAkB,GAAG;IACnC,YAAY,UAAU,EAAE,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,WAAW;IAC/D,YAAY,UAAU,EAAE,OAAO,CAAC,QAAQ;IACxC,YAAY,OAAO,EAAE,OAAO,CAAC,KAAK;IAClC,YAAY,4BAA4B,EAAE,OAAO,CAAC,0BAA0B;IAC5E,SAAS,CAAC;AACV;IACA,QAAQ,IAAI,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;IAClD,QAAQ,IAAI,aAAa,KAAK,KAAK,EAAE,aAAa,GAAG,IAAI,CAAC;AAC1D;IACA,QAAQ,IAAI,aAAa,GAAG,IAAI,CAAC;IACjC,QAAQ,IAAI,aAAa,EAAE;IAC3B,YAAY,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE,CAAC;IACjD,YAAY,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;IAC1E,SAAS;AACT;IACA,QAAQ,IAAI,YAAY,GAAG,KAAK,CAAC;AACjC;IACA,QAAQ,IAAI,oBAAoB,GAAG,CAAC,CAAC;IACrC,QAAQ,MAAM,UAAU,GAAG,CAAC,OAAO,EAAE,YAAY,EAAE,YAAY,KAAK;IACpE,YAAY,IAAI,aAAa,EAAE;IAC/B,gBAAgB,IAAI,YAAY,KAAK,YAAY,CAAC,WAAW,EAAE;IAC/D,oBAAoB,oBAAoB,GAAG,OAAO,CAAC;IACnD,oBAAoB,IAAI,OAAO,IAAI,GAAG,EAAE;IACxC,wBAAwB,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;IACnG,qBAAqB,MAAM;IAC3B,wBAAwB,IAAI,mBAAmB,EAAE;IACjD,4BAA4B,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,aAAa,EAAE,uBAAuB,CAAC,CAAC;IAC1G,yBAAyB,MAAM;IAC/B,4BAA4B,MAAM,MAAM,GAAG,YAAY,GAAG,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACtF,4BAA4B,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;IACzG,yBAAyB;IACzB,qBAAqB;IACrB,iBAAiB,MAAM,IAAI,YAAY,KAAK,YAAY,CAAC,UAAU,EAAE;IACrE,oBAAoB,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,aAAa,EAAE,sBAAsB,CAAC,CAAC;IACjG,iBAAiB,MAAM;IACvB,oBAAoB,IAAI,CAAC,cAAc,CAAC,iBAAiB,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;IACnF,iBAAiB;IACjB,aAAa;IACb,YAAY,IAAI,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,UAAU,CAAC,OAAO,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC;IAC5F,SAAS,CAAC;AACV;IACA,QAAQ,MAAM,YAAY,GAAG,CAAC,WAAW,EAAE,UAAU,EAAE,UAAU,KAAK;IACtE,YAAY,IAAI,CAAC,mBAAmB,IAAI,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,EAAE,YAAY,CAAC,UAAU,CAAC,CAAC;IACjH,YAAY,OAAO,IAAI,CAAC,eAAe,CAAC,CAAC,WAAW,CAAC,EAAE,CAAC,kBAAkB,CAAC;IAC3E,yCAAyC,UAAU,EAAE,UAAU,IAAI,aAAa,EAAE,aAAa,CAAC,CAAC,IAAI,CAAC,MAAM;IAC5G,gBAAgB,IAAI,CAAC,mBAAmB,IAAI,OAAO,CAAC,UAAU,EAAE,OAAO,CAAC,UAAU,CAAC,GAAG,EAAE,MAAM,EAAE,YAAY,CAAC,UAAU,CAAC,CAAC;IACzH,gBAAgB,IAAI,aAAa,EAAE;IACnC,oBAAoB,IAAI,UAAU,IAAI,mBAAmB,IAAI,UAAU,IAAI,CAAC,mBAAmB,EAAE;IACjG,wBAAwB,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM;IAC1D,4BAA4B,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;IAC1E,4BAA4B,IAAI,CAAC,UAAU,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC;IAC7F,yBAAyB,CAAC,CAAC;IAC3B,qBAAqB;IACrB,oBAAoB,IAAI,mBAAmB,EAAE;IAC7C,wBAAwB,IAAI,UAAU,EAAE;IACxC,4BAA4B,YAAY,GAAG,IAAI,CAAC;IAChD,4BAA4B,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC;IAC3D,yBAAyB,MAAM;IAC/B,4BAA4B,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,oBAAoB,CAAC,CAAC;IACtF,yBAAyB;IACzB,qBAAqB;IACrB,iBAAiB;IACjB,aAAa,CAAC,CAAC;IACf,SAAS,CAAC;AACV;IACA,QAAQ,MAAM,aAAa,GAAG,MAAM;IACpC,YAAY,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC;IAC3C,YAAY,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE,CAAC;IACjD,SAAS,CAAC;AACV;IACA,QAAQ,MAAM,QAAQ,GAAG,mBAAmB,GAAG,IAAI,CAAC,oCAAoC,CAAC,IAAI,CAAC,IAAI,CAAC;IACnG,+CAA+C,IAAI,CAAC,uCAAuC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvG,QAAQ,OAAO,QAAQ,CAAC,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,0BAA0B,EAAE,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;IACzI,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,cAAc,CAAC,YAAY,EAAE,aAAa,GAAG,IAAI,EAAE,UAAU,GAAG,SAAS,EAAE;AAC/E;IACA,QAAQ,IAAI,IAAI,CAAC,oBAAoB,EAAE,EAAE;IACzC,YAAY,MAAM,IAAI,KAAK,CAAC,6EAA6E,CAAC,CAAC;IAC3G,SAAS;AACT;IACA,QAAQ,IAAI,IAAI,CAAC,qBAAqB,EAAE,EAAE;IAC1C,YAAY,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;IACjF,SAAS;AACT;IACA,QAAQ,MAAM,SAAS,GAAG,YAAY,CAAC,MAAM,CAAC;IAC9C,QAAQ,MAAM,eAAe,GAAG,EAAE,CAAC;IACnC,QAAQ,IAAI,aAAa,EAAE;IAC3B,YAAY,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE,CAAC;IACjD,YAAY,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;IACvC,SAAS;IACT,QAAQ,MAAM,cAAc,GAAG,CAAC,SAAS,EAAE,OAAO,EAAE,YAAY,KAAK;IACrE,YAAY,eAAe,CAAC,SAAS,CAAC,GAAG,OAAO,CAAC;IACjD,YAAY,IAAI,YAAY,GAAG,CAAC,CAAC;IACjC,YAAY,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE,YAAY,IAAI,eAAe,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACxF,YAAY,YAAY,GAAG,YAAY,GAAG,SAAS,CAAC;IACpD,YAAY,YAAY,GAAG,CAAC,EAAE,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACzD,YAAY,IAAI,aAAa,EAAE;IAC/B,gBAAgB,IAAI,YAAY,IAAI,GAAG,EAAE;IACzC,oBAAoB,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC;IACzE,iBAAiB,MAAM;IACvB,oBAAoB,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;IACnF,iBAAiB;IACjB,aAAa;IACb,YAAY,IAAI,UAAU,EAAE,UAAU,CAAC,YAAY,EAAE,YAAY,EAAE,YAAY,CAAC,WAAW,CAAC,CAAC;IAC7F,SAAS,CAAC;AACV;IACA,QAAQ,MAAM,YAAY,GAAG,EAAE,CAAC;IAChC,QAAQ,MAAM,kBAAkB,GAAG,EAAE,CAAC;IACtC,QAAQ,MAAM,aAAa,GAAG,EAAE,CAAC;IACjC,QAAQ,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACtD;IACA,YAAY,IAAI,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;IAChD,YAAY,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,IAAI,EAAE;IACzD,gBAAgB,MAAM,GAAG,mBAAmB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IACnE,aAAa;AACb;IACA,YAAY,MAAM,eAAe,GAAG,IAAI,CAAC,2BAA2B,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC,0BAA0B;IACrI,qEAAqE,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,CAAC,CAAC;IAC7H,YAAY,aAAa,CAAC,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;IAC7D,YAAY,YAAY,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAC/C,YAAY,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;IAC7D,YAAY,IAAI,CAAC,uBAAuB,CAAC,eAAe,CAAC,EAAE,CAAC,GAAG,eAAe,CAAC;IAC/E,SAAS;IACT,QAAQ,MAAM,YAAY,GAAG,MAAM;IACnC,YAAY,KAAK,IAAI,YAAY,IAAI,aAAa,EAAE;IACpD,gBAAgB,YAAY,EAAE,CAAC;IAC/B,aAAa;IACb,SAAS,CAAC;IACV,QAAQ,MAAM,cAAc,GAAG,IAAI,gBAAgB,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;IACzE,YAAY,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC;IAC3C,aAAa,IAAI,CAAC,CAAC,YAAY,KAAK;IACpC,gBAAgB,IAAI,aAAa,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;IAC9D,gBAAgB,IAAI,UAAU,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC,EAAE,IAAI,EAAE,YAAY,CAAC,UAAU,CAAC,CAAC;IACrF,gBAAgB,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,YAAY,EAAE,IAAI,EAAE,aAAa,EAAE,aAAa,CAAC,CAAC,IAAI,CAAC,MAAM;IAChH,oBAAoB,IAAI,UAAU,EAAE,UAAU,CAAC,GAAG,EAAE,MAAM,EAAE,YAAY,CAAC,UAAU,CAAC,CAAC;IACrF,oBAAoB,OAAO,EAAE,CAAC;IAC9B,oBAAoB,IAAI,CAAC,0BAA0B,EAAE,CAAC;IACtD,iBAAiB,CAAC,CAAC;IACnB,aAAa,CAAC;IACd,aAAa,KAAK,CAAC,CAAC,CAAC,KAAK;IAC1B,gBAAgB,IAAI,aAAa,EAAE,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;IAC9D,gBAAgB,IAAI,EAAE,CAAC,YAAY,mBAAmB,CAAC,EAAE;IACzD,oBAAoB,MAAM,CAAC,IAAI,KAAK,CAAC,CAAC,kEAAkE,CAAC,CAAC,CAAC,CAAC;IAC5G,iBAAiB,MAAM;IACvB,oBAAoB,OAAO,EAAE,CAAC;IAC9B,iBAAiB;IACjB,gBAAgB,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAClD,aAAa,CAAC;IACd,aAAa,OAAO,CAAC,MAAM;IAC3B,gBAAgB,KAAK,IAAI,WAAW,IAAI,YAAY,EAAE;IACtD,oBAAoB,OAAO,IAAI,CAAC,uBAAuB,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IACxE,iBAAiB;IACjB,aAAa,CAAC,CAAC;IACf,SAAS,EAAE,YAAY,CAAC,CAAC;IACzB,QAAQ,IAAI,CAAC,wBAAwB,CAAC,cAAc,CAAC,CAAC;IACtD,QAAQ,OAAO,cAAc,CAAC;IAC9B,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,uCAAuC,CAAC,IAAI,EAAE,MAAM,EAAE,0BAA0B,EAAE,kBAAkB,EAAE,UAAU,EAAE,WAAW,EAAE;IACnI,QAAQ,MAAM,oBAAoB,GAAG,MAAM;IAC3C,YAAY,OAAO,IAAI,CAAC,uBAAuB,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IAChE,SAAS,CAAC;AACV;IACA,QAAQ,MAAM,WAAW,GAAG,IAAI,CAAC,2BAA2B,CAAC,IAAI,EAAE,0BAA0B,EAAE,UAAU,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,CAAC;IACpI,SAAS,IAAI,CAAC,CAAC,WAAW,KAAK;IAC/B,YAAY,oBAAoB,EAAE,CAAC;IACnC,YAAY,OAAO,kBAAkB,CAAC,WAAW,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM;IAC1E,gBAAgB,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAClD,aAAa,CAAC,CAAC;IACf,SAAS,CAAC;IACV,SAAS,KAAK,CAAC,CAAC,CAAC,KAAK;IACtB,YAAY,IAAI,WAAW,EAAE,WAAW,EAAE,CAAC;IAC3C,YAAY,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC9C,YAAY,oBAAoB,EAAE,CAAC;IACnC,YAAY,IAAI,EAAE,CAAC,YAAY,mBAAmB,CAAC,EAAE;IACrD,gBAAgB,OAAO,IAAI,KAAK,CAAC,CAAC,6CAA6C,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE;IAC1F,aAAa;IACb,SAAS,CAAC,CAAC;AACX;IACA,QAAQ,IAAI,CAAC,uBAAuB,CAAC,WAAW,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC;IACnE,QAAQ,IAAI,CAAC,wBAAwB,CAAC,WAAW,CAAC,CAAC;AACnD;IACA,QAAQ,OAAO,WAAW,CAAC;IAC3B,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,oCAAoC,CAAC,IAAI,EAAE,MAAM,EAAE,0BAA0B,EAAE,mBAAmB,EAAE,UAAU,EAAE,WAAW,EAAE;IACjI,QAAQ,IAAI,iCAAiC,CAAC;IAC9C,QAAQ,IAAI,iCAAiC,CAAC;IAC9C,QAAQ,IAAI,iBAAiB,CAAC;IAC9B,QAAQ,IAAI,iBAAiB,CAAC;IAC9B,QAAQ,IAAI,wBAAwB,GAAG,CAAC,CAAC;IACzC,QAAQ,IAAI,uBAAuB,GAAG,KAAK,CAAC;IAC5C,QAAQ,MAAM,2BAA2B,GAAG,EAAE,CAAC;AAC/C;IACA,QAAQ,MAAM,6BAA6B,GAAG,MAAM;IACpD,YAAY,IAAI,2BAA2B,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,uBAAuB,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,EAAE;IACrH,gBAAgB,uBAAuB,GAAG,IAAI,CAAC;IAC/C,gBAAgB,MAAM,WAAW,GAAG,2BAA2B,CAAC,KAAK,EAAE,CAAC;IACxE,gBAAgB,mBAAmB,CAAC,WAAW,CAAC,WAAW,EAAE,WAAW,CAAC,UAAU,EAAE,WAAW,CAAC,UAAU,CAAC;IAC5G,iBAAiB,IAAI,CAAC,MAAM;IAC5B,oBAAoB,uBAAuB,GAAG,KAAK,CAAC;IACpD,oBAAoB,IAAI,WAAW,CAAC,UAAU,EAAE;IAChD,wBAAwB,iCAAiC,EAAE,CAAC;IAC5D,qBAAqB,MAAM,IAAI,WAAW,CAAC,UAAU,EAAE;IACvD,wBAAwB,iBAAiB,EAAE,CAAC;IAC5C,wBAAwB,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAC1D,qBAAqB;IACrB,oBAAoB,MAAM,CAAC,UAAU,CAAC,MAAM;IAC5C,wBAAwB,6BAA6B,EAAE,CAAC;IACxD,qBAAqB,EAAE,CAAC,CAAC,CAAC;IAC1B,iBAAiB,CAAC,CAAC;IACnB,aAAa;IACb,SAAS,CAAC;AACV;IACA,QAAQ,MAAM,yBAAyB,GAAG,CAAC,WAAW,EAAE,UAAU,KAAK;IACvE,YAAY,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE,EAAE;IAC/C,gBAAgB,2BAA2B,CAAC,IAAI,CAAC;IACjD,oBAAoB,WAAW;IAC/B,oBAAoB,UAAU,EAAE,wBAAwB,KAAK,CAAC;IAC9D,oBAAoB,UAAU;IAC9B,iBAAiB,CAAC,CAAC;IACnB,gBAAgB,wBAAwB,EAAE,CAAC;IAC3C,gBAAgB,6BAA6B,EAAE,CAAC;IAChD,aAAa;IACb,SAAS,CAAC;AACV;IACA,QAAQ,IAAI,mBAAmB,GAAG,IAAI,CAAC,2BAA2B,CAAC,IAAI,EAAE,0BAA0B;IACnG,mEAAmE,UAAU,EAAE,IAAI,EAAE,yBAAyB,EAAE,MAAM,CAAC,CAAC;AACxH;IACA,QAAQ,MAAM,gCAAgC,GAAG,IAAI,gBAAgB,CAAC,CAAC,QAAQ,EAAE,QAAQ,KAAK;IAC9F,YAAY,iCAAiC,GAAG,QAAQ,CAAC;IACzD,YAAY,iCAAiC,GAAG,QAAQ,CAAC;IACzD,YAAY,MAAM,oBAAoB,GAAG,MAAM;IAC/C,gBAAgB,OAAO,IAAI,CAAC,uBAAuB,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;IAC5E,aAAa,CAAC;IACd,YAAY,mBAAmB,CAAC,IAAI,CAAC,MAAM;IAC3C,gBAAgB,oBAAoB,EAAE,CAAC;IACvC,aAAa,CAAC;IACd,aAAa,KAAK,CAAC,CAAC,CAAC,KAAK;IAC1B,gBAAgB,IAAI,EAAE,CAAC,YAAY,mBAAmB,CAAC,EAAE;IACzD,oBAAoB,iBAAiB,CAAC,CAAC,CAAC,CAAC;IACzC,oBAAoB,iCAAiC,CAAC,CAAC,CAAC,CAAC;IACzD,iBAAiB;IACjB,gBAAgB,IAAI,WAAW,EAAE,WAAW,EAAE,CAAC;IAC/C,gBAAgB,IAAI,CAAC,0BAA0B,EAAE,CAAC;IAClD,gBAAgB,oBAAoB,EAAE,CAAC;IACvC,aAAa,CAAC,CAAC;IACf,SAAS,EAAE,mBAAmB,CAAC,YAAY,CAAC,CAAC;IAC7C,QAAQ,IAAI,CAAC,uBAAuB,CAAC,mBAAmB,CAAC,EAAE,CAAC,GAAG,mBAAmB,CAAC;AACnF;IACA,QAAQ,IAAI,CAAC,wBAAwB,CAAC,IAAI,gBAAgB,CAAC,CAAC,QAAQ,EAAE,QAAQ,KAAK;IACnF,YAAY,iBAAiB,GAAG,QAAQ,CAAC;IACzC,YAAY,iBAAiB,GAAG,QAAQ,CAAC;IACzC,SAAS,CAAC,CAAC,CAAC;AACZ;IACA,QAAQ,OAAO,gCAAgC,CAAC;IAChD,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,2BAA2B,CAAC,IAAI,EAAE,0BAA0B,GAAG,CAAC,EAAE,UAAU,GAAG,SAAS;IAC5F,gCAAgC,mBAAmB,GAAG,KAAK,EAAE,cAAc,GAAG,SAAS,EAAE,MAAM,EAAE;IACjG,QAAQ,IAAI,MAAM,KAAK,WAAW,CAAC,KAAK,EAAE;IAC1C,YAAY,OAAO,WAAW,CAAC,WAAW,CAAC,IAAI,EAAE,UAAU,EAAE,mBAAmB,EAAE,cAAc,EAAE,0BAA0B,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;IACxI,SAAS,MAAM,IAAI,MAAM,KAAK,WAAW,CAAC,MAAM,EAAE;IAClD,YAAY,OAAO,YAAY,CAAC,WAAW,CAAC,IAAI,EAAE,UAAU,EAAE,mBAAmB,EAAE,cAAc,CAAC,CAAC;IACnG,SAAS,MAAM,IAAI,MAAM,KAAK,WAAW,CAAC,GAAG,EAAE;IAC/C,YAAY,OAAO,SAAS,CAAC,WAAW,CAAC,IAAI,EAAE,UAAU,EAAE,mBAAmB,EAAE,cAAc,EAAE,0BAA0B,EAAE,CAAC,CAAC,CAAC;IAC/H,SAAS;AACT;IACA,QAAQ,OAAO,gBAAgB,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,CAAC,kEAAkE,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/H,KAAK;AACL;IACA,IAAI,OAAO,YAAY,CAAC,MAAM,EAAE;IAChC,QAAQ,OAAO,MAAM,KAAK,WAAW,CAAC,KAAK,IAAI,MAAM,KAAK,WAAW,CAAC,MAAM,IAAI,MAAM,KAAK,WAAW,CAAC,GAAG,CAAC;IAC3G,KAAK;AACL;IACA;IACA;IACA;IACA;IACA,IAAI,eAAe,GAAG,WAAW;AACjC;IACA,QAAQ,OAAO,SAAS,YAAY,EAAE,kBAAkB,GAAG,EAAE,EAAE,UAAU,GAAG,IAAI;IAChF,wBAAwB,aAAa,GAAG,IAAI,EAAE,mCAAmC,GAAG,IAAI,EAAE;AAC1F;IACA,YAAY,IAAI,IAAI,CAAC,qBAAqB,EAAE,EAAE,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;AACvE;IACA,YAAY,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;IAC1C,YAAY,IAAI,qBAAqB,GAAG,IAAI,CAAC;AAC7C;IACA,YAAY,MAAM,MAAM,GAAG,CAAC,YAAY,EAAE,QAAQ,KAAK;IACvD,gBAAgB,IAAI,IAAI,CAAC,qBAAqB,EAAE,EAAE,OAAO;AACzD;IACA,gBAAgB,IAAI,qBAAqB,KAAK,IAAI,EAAE;IACpD,oBAAoB,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,qBAAqB,CAAC,CAAC;IAC1E,oBAAoB,qBAAqB,GAAG,IAAI,CAAC;IACjD,iBAAiB;AACjB;IACA;IACA;IACA,gBAAgB,IAAI,CAAC,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,UAAU,EAAE;IACjE,oBAAoB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;IAChD,wBAAwB,SAAS,EAAE,YAAY,CAAC,OAAO,CAAC,MAAM;IAC9D,wBAAwB,kBAAkB,EAAE,YAAY,CAAC,gBAAgB,CAAC,MAAM;IAChF,wBAAwB,OAAO,EAAE;IACjC,4BAA4B,MAAM,EAAE,YAAY,CAAC,IAAI;IACrD,4BAA4B,IAAI,EAAE,YAAY,CAAC,EAAE;IACjD,4BAA4B,OAAO,EAAE,YAAY,CAAC,KAAK;IACvD,yBAAyB;IACzB,qBAAqB,CAAC,CAAC;IACvB,iBAAiB;AACjB;IACA,gBAAgB,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;IAC7C,gBAAgB,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;IACrD,gBAAgB,QAAQ,EAAE,CAAC;IAC3B,aAAa,CAAC;AACd;IACA,YAAY,MAAM,WAAW,GAAG,MAAM;IACtC,gBAAgB,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,KAAK;IAChD,oBAAoB,IAAI,aAAa,EAAE;IACvC,wBAAwB,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;IACpG,qBAAqB;IACrB,oBAAoB,cAAc,CAAC,MAAM;IACzC,wBAAwB,IAAI,IAAI,CAAC,qBAAqB,EAAE,EAAE;IAC1D,4BAA4B,OAAO,EAAE,CAAC;IACtC,yBAAyB,MAAM;IAC/B,4BAA4B,MAAM,YAAY,GAAG,IAAI,CAAC,qBAAqB,CAAC,YAAY,EAAE,kBAAkB;IAC5G,4EAA4E,UAAU,EAAE,mCAAmC,CAAC,CAAC;IAC7H,4BAA4B,MAAM,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC;IACpF,4BAA4B,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,aAAa,KAAK,aAAa,EAAE;IACpG,gCAAgC,IAAI,CAAC,iBAAiB,EAAE,CAAC;IACzD,6BAA6B;IAC7B,4BAA4B,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,aAAa,GAAG,CAAC,EAAE;IACvE,gCAAgC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,MAAM;IAChF,oCAAoC,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;IAClE,iCAAiC,CAAC,CAAC;IACnC,6BAA6B,MAAM;IACnC,gCAAgC,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC;IAC9D,6BAA6B;IAC7B,yBAAyB;IACzB,qBAAqB,EAAE,IAAI,CAAC,CAAC;IAC7B,iBAAiB,CAAC,CAAC;IACnB,aAAa,CAAC;AACd;IACA,YAAY,OAAO,WAAW,EAAE,CAAC;IACjC,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,qBAAqB,CAAC,YAAY,EAAE,kBAAkB,EAAE,UAAU,GAAG,IAAI,EAAE,mCAAmC,GAAG,KAAK,EAAE;IAC5H,QAAQ,IAAI,IAAI,CAAC,qBAAqB,EAAE,EAAE,OAAO;IACjD,QAAQ,MAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,IAAI,EAAE,CAAC;IAClE,QAAQ,MAAM,qBAAqB,GAAG,IAAI,CAAC,SAAS,CAAC,kBAAkB,IAAI,EAAE,CAAC;IAC9E,QAAQ,eAAe,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,CAAC;IAC9C,QAAQ,qBAAqB,CAAC,IAAI,CAAC,GAAG,kBAAkB,CAAC,CAAC;IAC1D,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACrE,QAAQ,IAAI,qBAAqB,CAAC;IAClC,QAAQ,MAAM,wBAAwB,GAAG,CAAC,QAAQ,KAAK;IACvD,YAAY,IAAI,IAAI,CAAC,qBAAqB,EAAE,EAAE,OAAO;IACrD,YAAY,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC;IAC9D,YAAY,IAAI,mCAAmC,IAAI,UAAU,IAAI,kDAAkD,EAAE;IACzH,gBAAgB,IAAI,CAAC,QAAQ,IAAI,CAAC,qBAAqB,EAAE;IACzD,oBAAoB,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACjE,oBAAoB,qBAAqB,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;IAChG,iBAAiB;IACjB,aAAa;IACb,SAAS,CAAC;IACV,QAAQ,MAAM,gBAAgB,GAAG,CAAC,QAAQ,KAAK;IAC/C,YAAY,IAAI,IAAI,CAAC,qBAAqB,EAAE,EAAE,OAAO;IACrD,YAAY,IAAI,QAAQ,IAAI,qBAAqB,EAAE;IACnD,gBAAgB,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,qBAAqB,CAAC,CAAC;IACtE,aAAa;IACb,SAAS,CAAC;IACV,QAAQ,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,eAAe,EAAE,qBAAqB,EAAE,IAAI,EAAE,UAAU,EAAE,wBAAwB,EAAE,gBAAgB,CAAC,CAAC;IAC1I,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,eAAe,CAAC,SAAS,EAAE;IAC/B,QAAQ,IAAI,IAAI,CAAC,qBAAqB,EAAE,EAAE,OAAO;IACjD,QAAQ,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,KAAK;IACxC,YAAY,MAAM,kBAAkB,GAAG,IAAI,CAAC,gBAAgB,GAAG,UAAU,GAAG,YAAY,CAAC;IACzF,YAAY,MAAM,UAAU,GAAG,SAAS,CAAC,aAAa,EAAE,CAAC;IACzD,YAAY,MAAM,aAAa,GAAG,SAAS,CAAC,gBAAgB,EAAE,CAAC;IAC/D,YAAY,IAAI,CAAC,UAAU,GAAG,gBAAgB,CAAC,aAAa,EAAE,IAAI,CAAC,sBAAsB;IACzF,+CAA+C,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;IAClG,YAAY,IAAI,SAAS,GAAG,CAAC,CAAC;IAC9B,YAAY,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC,CAAC,KAAK;IAC/C,gBAAgB,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE;IACrC,oBAAoB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC7C,oBAAoB,IAAI,IAAI,CAAC,sBAAsB,EAAE;IACrD,wBAAwB,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAClH,qBAAqB,MAAM;IAC3B,wBAAwB,MAAM,aAAa,GAAG,IAAI,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACvH,wBAAwB,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,aAAa,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACnG,qBAAqB;IACrB,oBAAoB,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC;IACxD,oBAAoB,IAAI,CAAC,mBAAmB,EAAE,CAAC;IAC/C,oBAAoB,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;IACpD,oBAAoB,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAChD,oBAAoB,IAAI,SAAS,KAAK,CAAC,EAAE;IACzC,wBAAwB,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC,IAAI,KAAK;IACjE,4BAA4B,IAAI,EAAE,CAAC;IACnC,yBAAyB,CAAC,CAAC;IAC3B,wBAAwB,IAAI,CAAC,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;IAC1D,qBAAqB;IACrB,oBAAoB,SAAS,EAAE,CAAC;IAChC,iBAAiB,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE;IAChD,oBAAoB,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IAC7C,iBAAiB,MAAM,IAAI,CAAC,CAAC,IAAI,CAAC,uBAAuB,EAAE;IAC3D,oBAAoB,OAAO,CAAC,GAAG,CAAC,yCAAyC,CAAC,CAAC;IAC3E,oBAAoB,IAAI,IAAI,CAAC,sBAAsB,EAAE;IACrD,wBAAwB,IAAI,CAAC,uBAAuB,GAAG,IAAI,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB;IACjG,uEAAuE,CAAC,CAAC,IAAI,CAAC,mBAAmB,EAAE,aAAa,CAAC,CAAC;IAClH,wBAAwB,IAAI,CAAC,uBAAuB,GAAG,IAAI,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB;IACjG,uEAAuE,CAAC,CAAC,IAAI,CAAC,mBAAmB,EAAE,aAAa,CAAC,CAAC;IAClH,wBAAwB,IAAI,CAAC,8BAA8B,GAAG,IAAI,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,0BAA0B;IACtH,qFAAqF,CAAC,CAAC,IAAI,CAAC,0BAA0B;IACtH,qFAAqF,aAAa,CAAC,CAAC;IACpG,yBAAyB,IAAI,CAAC,oBAAoB,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB;IAC7F,sEAAsE,CAAC,CAAC,IAAI,CAAC,gBAAgB,EAAE,SAAS,CAAC,SAAS,GAAG,EAAE,CAAC,CAAC;IACzH,qBAAqB,MAAM;IAC3B,wBAAwB,IAAI,CAAC,uBAAuB,GAAG,IAAI,WAAW,CAAC,aAAa,CAAC,CAAC;IACtF,wBAAwB,IAAI,CAAC,8BAA8B,GAAG,IAAI,kBAAkB,CAAC,aAAa,CAAC,CAAC;IACpG,wBAAwB,IAAI,CAAC,oBAAoB,GAAG,IAAI,YAAY,CAAC,SAAS,CAAC,SAAS,GAAG,EAAE,CAAC,CAAC;IAC/F,qBAAqB;IACrB,oBAAoB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC7F,oBAAoB,IAAI,CAAC,UAAU,CAAC,aAAa,GAAG,aAAa,CAAC;AAClE;IACA,oBAAoB,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;IAC7D,oBAAoB,MAAM,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC,oBAAoB,EAAE,CAAC;IACpF,oBAAoB,MAAM,sBAAsB,GAAG,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAAC;IACtF,oBAAoB,MAAM,wBAAwB,GAAG,iBAAiB,CAAC,YAAY,CAAC,IAAI,CAAC;IACzF,oBAAoB,OAAO,CAAC,GAAG,CAAC,4BAA4B,GAAG,sBAAsB,CAAC,CAAC,GAAG,KAAK,GAAG,sBAAsB,CAAC,CAAC,CAAC,CAAC;IAC5H,oBAAoB,OAAO,CAAC,GAAG,CAAC,+BAA+B,GAAG,wBAAwB,CAAC,CAAC,GAAG,KAAK,GAAG,wBAAwB,CAAC,CAAC,CAAC,CAAC;AACnI;IACA,oBAAoB,OAAO,EAAE,CAAC;IAC9B,iBAAiB;IACjB,aAAa,CAAC;IACd,SAAS,CAAC,CAAC;IACX,KAAK;AACL;IACA,IAAI,iBAAiB,GAAG;IACxB,QAAQ,IAAI,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC;IACzD,QAAQ,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IAC/B,QAAQ,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAChC,QAAQ,IAAI,IAAI,CAAC,mBAAmB,EAAE;IACtC,YAAY,IAAI,CAAC,mBAAmB,EAAE,CAAC;IACvC,YAAY,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC;IAC5C,SAAS;IACT,QAAQ,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IACjC,KAAK;AACL;IACA,IAAI,gBAAgB,CAAC,KAAK,EAAE,aAAa,GAAG,IAAI,EAAE;IAClD,QAAQ,IAAI,IAAI,CAAC,oBAAoB,EAAE,EAAE;IACzC,YAAY,MAAM,IAAI,KAAK,CAAC,gFAAgF,CAAC,CAAC;IAC9G,SAAS;AACT;IACA,QAAQ,IAAI,IAAI,CAAC,qBAAqB,EAAE,EAAE;IAC1C,YAAY,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;IACpF,SAAS;AACT;IACA,QAAQ,IAAI,WAAW,CAAC;AACxB;IACA,QAAQ,IAAI,CAAC,wBAAwB,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,KAAK;IACzE,YAAY,IAAI,cAAc,CAAC;AAC/B;IACA,YAAY,IAAI,aAAa,EAAE;IAC/B,gBAAgB,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE,CAAC;IACrD,gBAAgB,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;IAC3C,gBAAgB,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;IACxF,aAAa;AACb;IACA,YAAY,MAAM,qBAAqB,GAAG,MAAM;IAChD,gBAAgB,IAAI,aAAa,EAAE;IACnC,oBAAoB,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;IAC/C,oBAAoB,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;IACnE,iBAAiB;IACjB,aAAa,CAAC;AACd;IACA,YAAY,MAAM,MAAM,GAAG,CAAC,KAAK,KAAK;IACtC,gBAAgB,qBAAqB,EAAE,CAAC;IACxC,gBAAgB,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;IACrD,gBAAgB,IAAI,CAAC,KAAK,EAAE,OAAO,EAAE,CAAC;IACtC,qBAAqB,MAAM,CAAC,KAAK,CAAC,CAAC;IACnC,aAAa,CAAC;AACd;IACA,YAAY,MAAM,iBAAiB,GAAG,MAAM;IAC5C,gBAAgB,IAAI,IAAI,CAAC,qBAAqB,EAAE,EAAE;IAClD,oBAAoB,MAAM,EAAE,CAAC;IAC7B,oBAAoB,OAAO,IAAI,CAAC;IAChC,iBAAiB;IACjB,gBAAgB,OAAO,KAAK,CAAC;IAC7B,aAAa,CAAC;AACd;IACA,YAAY,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,OAAO,CAAC,OAAO,EAAE,CAAC;IAChE,YAAY,WAAW,CAAC,IAAI,CAAC,MAAM;IACnC,gBAAgB,IAAI,iBAAiB,EAAE,EAAE,OAAO;IAChD,gBAAgB,MAAM,iBAAiB,GAAG,EAAE,CAAC;IAC7C,gBAAgB,MAAM,iBAAiB,GAAG,EAAE,CAAC;IAC7C,gBAAgB,MAAM,6BAA6B,GAAG,EAAE,CAAC;IACzD,gBAAgB,MAAM,iCAAiC,GAAG,IAAI,CAAC,SAAS,CAAC,4BAA4B,CAAC;IACtG,gBAAgB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACvE,oBAAoB,IAAI,CAAC,KAAK,KAAK,EAAE;IACrC,wBAAwB,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC/D,wBAAwB,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;IAClE,wBAAwB,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/E,wBAAwB,6BAA6B,CAAC,IAAI,CAAC;IAC3D,4BAA4B,UAAU,EAAE,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE;IAC9D,4BAA4B,YAAY,EAAE,KAAK,CAAC,UAAU,CAAC,KAAK,EAAE;IAClE,4BAA4B,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE;IACxD,yBAAyB,CAAC,CAAC;IAC3B,qBAAqB;IACrB,iBAAiB;IACjB,gBAAgB,IAAI,CAAC,iBAAiB,EAAE,CAAC;IACzC,gBAAgB,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;IACzC,gBAAgB,IAAI,CAAC,eAAe,EAAE,CAAC;IACvC,gBAAgB,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE,iBAAiB,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC;IAC7F,iBAAiB,IAAI,CAAC,MAAM;IAC5B,oBAAoB,IAAI,iBAAiB,EAAE,EAAE,OAAO;IACpD,oBAAoB,qBAAqB,EAAE,CAAC;IAC5C,oBAAoB,IAAI,CAAC,SAAS,CAAC,4BAA4B,GAAG,iCAAiC,CAAC;IACpG,oBAAoB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,KAAK,KAAK;IACpE,wBAAwB,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,6BAA6B,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,CAAC;IAC3F,wBAAwB,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,6BAA6B,CAAC,KAAK,CAAC,CAAC,UAAU,CAAC,CAAC;IAC/F,wBAAwB,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,6BAA6B,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC;IACrF,qBAAqB,CAAC,CAAC;IACvB,oBAAoB,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,CAAC;IACtD,oBAAoB,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;IAClD,oBAAoB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC;IAC9C,qBAAqB,IAAI,CAAC,MAAM;IAChC,wBAAwB,IAAI,iBAAiB,EAAE,EAAE;IACjD,4BAA4B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;IACzD,4BAA4B,OAAO;IACnC,yBAAyB;IACzB,wBAAwB,WAAW,GAAG,IAAI,CAAC,WAAW,IAAI,OAAO,CAAC,OAAO,EAAE,CAAC;IAC5E,wBAAwB,WAAW,CAAC,IAAI,CAAC,MAAM;IAC/C,4BAA4B,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;IACzD,4BAA4B,MAAM,EAAE,CAAC;IACrC,yBAAyB,CAAC,CAAC;IAC3B,qBAAqB,CAAC,CAAC;IACvB,iBAAiB,CAAC;IAClB,iBAAiB,KAAK,CAAC,CAAC,CAAC,KAAK;IAC9B,oBAAoB,MAAM,CAAC,CAAC,CAAC,CAAC;IAC9B,iBAAiB,CAAC,CAAC;IACnB,aAAa,CAAC,CAAC;IACf,SAAS,CAAC,CAAC;AACX;IACA,QAAQ,OAAO,IAAI,CAAC,wBAAwB,CAAC;IAC7C,KAAK;AACL;IACA;IACA;IACA;IACA,IAAI,KAAK,GAAG;IACZ,QAAQ,IAAI,IAAI,CAAC,cAAc,EAAE;IACjC,YAAY,IAAI,IAAI,CAAC,SAAS,EAAE;IAChC,gBAAgB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IAC1E,aAAa,MAAM;IACnB,gBAAgB,IAAI,CAAC,cAAc,GAAG,qBAAqB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IACvF,aAAa;IACb,YAAY,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC;IAC9C,SAAS,MAAM;IACf,YAAY,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;IACrF,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA,IAAI,IAAI,GAAG;IACX,QAAQ,IAAI,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,qBAAqB,EAAE;IAC/D,YAAY,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;IACjC,gBAAgB,oBAAoB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAC1D,aAAa;IACb,YAAY,IAAI,CAAC,qBAAqB,GAAG,KAAK,CAAC;IAC/C,SAAS;IACT,KAAK;AACL;IACA;IACA;IACA;IACA,IAAI,MAAM,OAAO,GAAG;IACpB,QAAQ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IAC9B,QAAQ,IAAI,YAAY,GAAG,EAAE,CAAC;IAC9B,QAAQ,IAAI,eAAe,GAAG,EAAE,CAAC;IACjC,QAAQ,KAAK,IAAI,UAAU,IAAI,IAAI,CAAC,uBAAuB,EAAE;IAC7D,YAAY,IAAI,IAAI,CAAC,uBAAuB,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;IACzE,gBAAgB,MAAM,sBAAsB,GAAG,IAAI,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC;IACxF,gBAAgB,eAAe,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;IAC7D,gBAAgB,YAAY,CAAC,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;IAClE,aAAa;IACb,SAAS;IACT,QAAQ,IAAI,IAAI,CAAC,WAAW,EAAE;IAC9B,YAAY,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAChD,SAAS;IACT,QAAQ,MAAM,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,OAAO,CAAC,MAAM;IACvE,YAAY,IAAI,CAAC,IAAI,EAAE,CAAC;IACxB,YAAY,IAAI,IAAI,CAAC,QAAQ,EAAE;IAC/B,gBAAgB,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IACxC,gBAAgB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACrC,aAAa;IACb,YAAY,IAAI,IAAI,CAAC,SAAS,EAAE;IAChC,gBAAgB,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;IACzC,gBAAgB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACtC,aAAa;IACb,YAAY,IAAI,IAAI,CAAC,WAAW,EAAE;IAClC,gBAAgB,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;IAC3C,gBAAgB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IACxC,aAAa;IACb,YAAY,IAAI,IAAI,CAAC,cAAc,EAAE;IACrC,gBAAgB,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAChE,gBAAgB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;IAC3C,aAAa;IACb,YAAY,IAAI,CAAC,iBAAiB,EAAE,CAAC;IACrC,YAAY,IAAI,CAAC,mBAAmB,EAAE,CAAC;AACvC;IACA,YAAY,IAAI,CAAC,cAAc,CAAC,cAAc,EAAE,CAAC;IACjD,YAAY,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IACnD,YAAY,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,CAAC;IAC3C,YAAY,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;IACvD,YAAY,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;AAC9C;IACA,YAAY,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IAC/B,YAAY,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IACnC,YAAY,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC;IAC1C,YAAY,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;IACrC,YAAY,IAAI,IAAI,CAAC,QAAQ,EAAE;IAC/B,gBAAgB,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE;IACjD,oBAAoB,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IAC3E,oBAAoB,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;IAC5C,iBAAiB;IACjB,gBAAgB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACrC,aAAa;AACb;IACA,YAAY,IAAI,CAAC,IAAI,CAAC,qBAAqB,EAAE;IAC7C,gBAAgB,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC5D,aAAa;AACb;IACA,YAAY,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;IAChD,YAAY,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC;IAChD,YAAY,IAAI,CAAC,8BAA8B,GAAG,IAAI,CAAC;IACvD,YAAY,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;IAC7C,YAAY,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACjC,YAAY,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;IACnC,SAAS,CAAC,CAAC;IACX,QAAQ,eAAe,CAAC,OAAO,CAAC,CAAC,OAAO,KAAK;IAC7C,YAAY,OAAO,CAAC,KAAK,EAAE,CAAC;IAC5B,SAAS,CAAC,CAAC;IACX,QAAQ,OAAO,cAAc,CAAC;IAC9B,KAAK;AACL;IACA,IAAI,gBAAgB,GAAG;IACvB,QAAQ,IAAI,IAAI,CAAC,cAAc,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;IACpD,YAAY,IAAI,CAAC,cAAc,GAAG,qBAAqB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IACnF,SAAS;IACT,QAAQ,IAAI,CAAC,MAAM,EAAE,CAAC;IACtB,QAAQ,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;IACjC,YAAY,IAAI,CAAC,MAAM,EAAE,CAAC;IAC1B,YAAY,IAAI,CAAC,uBAAuB,EAAE,CAAC;IAC3C,SAAS,MAAM;IACf,YAAY,IAAI,CAAC,uBAAuB,GAAG,CAAC,CAAC;IAC7C,SAAS;IACT,QAAQ,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;IACrC,KAAK;AACL;IACA,IAAI,oBAAoB,GAAG;IAC3B,QAAQ,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;IACpC,KAAK;AACL;IACA,IAAI,YAAY,GAAG,WAAW;AAC9B;IACA,QAAQ,IAAI,WAAW,GAAG,CAAC,CAAC;IAC5B,QAAQ,MAAM,kBAAkB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACvD,QAAQ,MAAM,qBAAqB,GAAG,IAAIA,gBAAK,CAAC,UAAU,EAAE,CAAC;IAC7D,QAAQ,MAAM,aAAa,GAAG,MAAM,CAAC;AACrC;IACA,QAAQ,OAAO,WAAW;IAC1B,YAAY,IAAI,YAAY,GAAG,KAAK,CAAC;IACrC,YAAY,IAAI,aAAa,GAAG,KAAK,CAAC;IACtC,YAAY,IAAI,IAAI,CAAC,MAAM,EAAE;IAC7B,gBAAgB,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;IAChD,gBAAgB,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC;IAClD,gBAAgB,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,kBAAkB,CAAC,CAAC,CAAC,GAAG,aAAa;IACrF,gCAAgC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,kBAAkB,CAAC,CAAC,CAAC,GAAG,aAAa;IACrF,gCAAgC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,kBAAkB,CAAC,CAAC,CAAC,GAAG,aAAa;IACrF,gCAAgC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,qBAAqB,CAAC,CAAC,CAAC,GAAG,aAAa;IACxF,gCAAgC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,qBAAqB,CAAC,CAAC,CAAC,GAAG,aAAa;IACxF,gCAAgC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,qBAAqB,CAAC,CAAC,CAAC,GAAG,aAAa;IACxF,gCAAgC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,qBAAqB,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC;IACzF,aAAa;AACb;IACA,YAAY,YAAY,GAAG,IAAI,CAAC,UAAU,KAAK,UAAU,CAAC,KAAK,KAAK,WAAW,KAAK,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,qBAAqB;IAC7H,2BAA2B,aAAa,IAAI,IAAI,CAAC,UAAU,KAAK,UAAU,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,KAAK,IAAI,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC;AACxI;IACA,YAAY,IAAI,IAAI,CAAC,MAAM,EAAE;IAC7B,gBAAgB,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC9D,gBAAgB,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IACnE,aAAa;AACb;IACA,YAAY,WAAW,EAAE,CAAC;IAC1B,YAAY,OAAO,YAAY,CAAC;IAChC,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,MAAM,GAAG,WAAW;AACxB;IACA,QAAQ,OAAO,WAAW;IAC1B,YAAY,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,OAAO;AACpE;IACA,YAAY,MAAM,cAAc,GAAG,CAAC,UAAU,KAAK;IACnD,gBAAgB,KAAK,IAAI,KAAK,IAAI,UAAU,CAAC,QAAQ,EAAE;IACvD,oBAAoB,IAAI,KAAK,CAAC,OAAO,EAAE,OAAO,IAAI,CAAC;IACnD,iBAAiB;IACjB,gBAAgB,OAAO,KAAK,CAAC;IAC7B,aAAa,CAAC;AACd;IACA,YAAY,MAAM,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC;IAC1D,YAAY,IAAI,cAAc,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;IACjD,gBAAgB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACnE,gBAAgB,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,KAAK,CAAC;IAChD,aAAa;IACb,YAAY,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAC9D,YAAY,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,KAAK,CAAC;IAC5C,YAAY,IAAI,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,GAAG,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IAChI,YAAY,IAAI,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,YAAY,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACxG,YAAY,IAAI,CAAC,QAAQ,CAAC,SAAS,GAAG,aAAa,CAAC;IACpD,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,MAAM,CAAC,QAAQ,EAAE,MAAM,EAAE;IAC7B,QAAQ,IAAI,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IACxE,QAAQ,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,OAAO;IAChE,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE;IAC3B,YAAY,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;IACnC,YAAY,IAAI,IAAI,CAAC,MAAM,CAAC,oBAAoB,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;IAC/E,gBAAgB,MAAM,CAAC,yBAAyB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;IAC1F,aAAa;IACb,SAAS;IACT,QAAQ,IAAI,CAAC,SAAS,CAAC,+BAA+B,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAC7E,QAAQ,IAAI,CAAC,eAAe,EAAE,CAAC;IAC/B,QAAQ,IAAI,CAAC,4BAA4B,EAAE,CAAC;IAC5C,QAAQ,IAAI,CAAC,eAAe,EAAE,CAAC;IAC/B,QAAQ,IAAI,CAAC,gBAAgB,EAAE,CAAC;IAChC,QAAQ,IAAI,CAAC,SAAS,EAAE,CAAC;IACzB,QAAQ,IAAI,CAAC,sBAAsB,EAAE,CAAC;IACtC,QAAQ,IAAI,CAAC,eAAe,EAAE,CAAC;IAC/B,QAAQ,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAClC,KAAK;AACL;IACA,IAAI,mBAAmB,CAAC,QAAQ,EAAE,MAAM,EAAE;IAC1C,QAAQ,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IACjC,QAAQ,IAAI,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtE,QAAQ,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IAC7B,QAAQ,IAAI,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM,CAAC;IACzD,QAAQ,IAAI,CAAC,IAAI,EAAE,CAAC;IACpB,KAAK;AACL;IACA,IAAI,SAAS,GAAG,WAAW;AAC3B;IACA,QAAQ,IAAI,YAAY,GAAG,cAAc,EAAE,CAAC;IAC5C,QAAQ,IAAI,UAAU,GAAG,CAAC,CAAC;AAC3B;IACA,QAAQ,OAAO,WAAW;IAC1B,YAAY,IAAI,IAAI,CAAC,uBAAuB,GAAG,+CAA+C,EAAE;IAChG,gBAAgB,MAAM,WAAW,GAAG,cAAc,EAAE,CAAC;IACrD,gBAAgB,MAAM,SAAS,GAAG,WAAW,GAAG,YAAY,CAAC;IAC7D,gBAAgB,IAAI,SAAS,IAAI,GAAG,EAAE;IACtC,oBAAoB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACjD,oBAAoB,UAAU,GAAG,CAAC,CAAC;IACnC,oBAAoB,YAAY,GAAG,WAAW,CAAC;IAC/C,iBAAiB,MAAM;IACvB,oBAAoB,UAAU,EAAE,CAAC;IACjC,iBAAiB;IACjB,aAAa,MAAM;IACnB,gBAAgB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;IACvC,aAAa;IACb,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,4BAA4B,GAAG,WAAW;AAC9C;IACA,QAAQ,MAAM,gBAAgB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACrD,QAAQ,MAAM,mBAAmB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACxD,QAAQ,IAAI,sBAAsB,CAAC;AACnC;IACA,QAAQ,OAAO,WAAW;IAC1B,YAAY,IAAI,CAAC,IAAI,CAAC,mBAAmB,EAAE;IAC3C,gBAAgB,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;IAC3D,gBAAgB,IAAI,sBAAsB,KAAK,SAAS,IAAI,sBAAsB,KAAK,IAAI,CAAC,MAAM,CAAC,oBAAoB;IACvH,oBAAoB,mBAAmB,CAAC,CAAC,KAAK,gBAAgB,CAAC,CAAC,IAAI,mBAAmB,CAAC,CAAC,KAAK,gBAAgB,CAAC,CAAC,EAAE;IAClH,oBAAoB,IAAI,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE;IAC1D,wBAAwB,IAAI,CAAC,MAAM,CAAC,IAAI,GAAG,CAAC,mBAAmB,CAAC,CAAC,GAAG,GAAG,CAAC;IACxE,wBAAwB,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,mBAAmB,CAAC,CAAC,GAAG,GAAG,CAAC;IACxE,wBAAwB,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,mBAAmB,CAAC,CAAC,GAAG,GAAG,CAAC;IACtE,wBAAwB,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,mBAAmB,CAAC,CAAC,GAAG,GAAG,CAAC;IAC1E,qBAAqB,MAAM;IAC3B,wBAAwB,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,mBAAmB,CAAC,CAAC,GAAG,mBAAmB,CAAC,CAAC,CAAC;IAC3F,qBAAqB;IACrB,oBAAoB,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,CAAC;IACzD,oBAAoB,gBAAgB,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;IAC/D,oBAAoB,sBAAsB,GAAG,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC;IAC9E,iBAAiB;IACjB,aAAa;IACb,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,sBAAsB,GAAG,WAAW;AACxC;IACA,QAAQ,IAAI,cAAc,CAAC;AAC3B;IACA,QAAQ,OAAO,WAAW;IAC1B,YAAY,MAAM,WAAW,GAAG,cAAc,EAAE,CAAC;IACjD,YAAY,IAAI,CAAC,cAAc,EAAE,cAAc,GAAG,WAAW,CAAC;IAC9D,YAAY,MAAM,SAAS,GAAG,WAAW,GAAG,cAAc,CAAC;AAC3D;IACA,YAAY,IAAI,CAAC,sBAAsB,CAAC,WAAW,CAAC,CAAC;IACrD,YAAY,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;AAC9C;IACA,YAAY,cAAc,GAAG,WAAW,CAAC;IACzC,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,sBAAsB,GAAG,WAAW;AACxC;IACA,QAAQ,IAAI,gBAAgB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACnD,QAAQ,IAAI,gBAAgB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACnD,QAAQ,IAAI,YAAY,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AAC/C;IACA,QAAQ,OAAO,SAAS,WAAW,EAAE;IACrC,YAAY,IAAI,IAAI,CAAC,yBAAyB,EAAE;IAChD,gBAAgB,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,EAAE,CAAC;IACvG,gBAAgB,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,SAAS,EAAE,CAAC;IAC/F,gBAAgB,MAAM,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;IACpF,gBAAgB,MAAM,aAAa,GAAG,aAAa,IAAI,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE,CAAC;IAC/E,gBAAgB,MAAM,CAAC,IAAI,aAAa,GAAG,aAAa,IAAI,WAAW,GAAG,IAAI,CAAC,kCAAkC,CAAC,CAAC,CAAC;IACpH,gBAAgB,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC;IAChG,gBAAgB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;IACrD,gBAAgB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC5D,gBAAgB,IAAI,CAAC,IAAI,GAAG,EAAE;IAC9B,oBAAoB,IAAI,CAAC,yBAAyB,GAAG,KAAK,CAAC;IAC3D,iBAAiB;IACjB,aAAa;IACb,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,iBAAiB,GAAG,WAAW;AACnC;IACA,QAAQ,MAAM,gBAAgB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACrD,QAAQ,IAAI,gBAAgB,GAAG,KAAK,CAAC;AACrC;IACA,QAAQ,OAAO,SAAS,SAAS,EAAE;IACnC,YAAY,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;IACvD,YAAY,IAAI,IAAI,CAAC,yBAAyB,EAAE;IAChD,gBAAgB,IAAI,CAAC,WAAW,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;IAChE,gBAAgB,MAAM,yBAAyB,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,EAAE,GAAG,CAAC,CAAC;IAC1G,gBAAgB,IAAI,qBAAqB,GAAG,IAAI,CAAC,GAAG,CAAC,yBAAyB,GAAG,0BAA0B,GAAG,SAAS,EAAE,GAAG,CAAC,CAAC;IAC9H,gBAAgB,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,CAAC;IAC9E,gBAAgB,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;IACzG,gBAAgB,gBAAgB,GAAG,IAAI,CAAC;IACxC,gBAAgB,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC5C,aAAa,MAAM;IACnB,gBAAgB,IAAI,yBAAyB,CAAC;IAC9C,gBAAgB,IAAI,gBAAgB,EAAE,yBAAyB,GAAG,GAAG,CAAC;IACtE,qBAAqB,yBAAyB,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,qBAAqB,EAAE,EAAE,GAAG,CAAC,CAAC;IACzG,gBAAgB,IAAI,yBAAyB,GAAG,CAAC,EAAE;IACnD,oBAAoB,IAAI,CAAC,WAAW,CAAC,iBAAiB,CAAC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;IAC7G,oBAAoB,IAAI,qBAAqB,GAAG,IAAI,CAAC,GAAG,CAAC,yBAAyB,GAAG,2BAA2B,GAAG,SAAS,EAAE,GAAG,CAAC,CAAC;IACnI,oBAAoB,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,qBAAqB,CAAC,CAAC;IAClF,oBAAoB,IAAI,qBAAqB,KAAK,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;IACxG,iBAAiB;IACjB,gBAAgB,IAAI,yBAAyB,GAAG,GAAG,EAAE,IAAI,CAAC,oBAAoB,EAAE,CAAC;IACjF,gBAAgB,gBAAgB,GAAG,KAAK,CAAC;IACzC,aAAa;IACb,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,gBAAgB,GAAG,WAAW;AAClC;IACA,QAAQ,MAAM,OAAO,GAAG,EAAE,CAAC;IAC3B,QAAQ,MAAM,gBAAgB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AACrD;IACA,QAAQ,OAAO,WAAW;IAC1B,YAAY,IAAI,IAAI,CAAC,cAAc,EAAE;IACrC,gBAAgB,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC5C,gBAAgB,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;IAC3D,gBAAgB,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC;IACnC,gBAAgB,IAAI,CAAC,SAAS,CAAC,8BAA8B,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC;IACjH,gBAAgB,IAAI,CAAC,SAAS,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;IAC3E,gBAAgB,IAAI,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;IACxC,oBAAoB,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;IACnE,oBAAoB,IAAI,CAAC,WAAW,CAAC,2BAA2B,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACjG,iBAAiB,MAAM;IACvB,oBAAoB,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;IACpE,iBAAiB;IACjB,aAAa,MAAM;IACnB,gBAAgB,IAAI,IAAI,CAAC,WAAW,CAAC,wBAAwB,EAAE,EAAE,IAAI,CAAC,oBAAoB,EAAE,CAAC;IAC7F,gBAAgB,IAAI,CAAC,WAAW,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;IAChE,aAAa;IACb,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,eAAe,GAAG,WAAW;AACjC;IACA,QAAQ,MAAM,gBAAgB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;AACrD;IACA,QAAQ,OAAO,WAAW;IAC1B,YAAY,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO;IACvC,YAAY,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC;IAC9D,YAAY,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;IACvD,YAAY,MAAM,oBAAoB,GAAG,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,IAAI,CAAC;IACrF,YAAY,MAAM,kBAAkB,GAAG,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC;IACzG,YAAY,MAAM,mBAAmB,GAAG,UAAU,GAAG,CAAC,GAAG,IAAI,CAAC,gBAAgB,GAAG,UAAU,GAAG,GAAG,GAAG,CAAC,CAAC;IACtG,YAAY,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAgB,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,oBAAoB;IAC9F,kCAAkC,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,oBAAoB,EAAE,kBAAkB;IACtG,kCAAkC,IAAI,CAAC,UAAU,IAAI,KAAK,EAAE,UAAU,EAAE,IAAI,CAAC,gBAAgB,EAAE,mBAAmB;IAClH,kCAAkC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE;IACzG,kCAAkC,IAAI,CAAC,SAAS,CAAC,wBAAwB,EAAE,CAAC,CAAC;IAC7E,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,kBAAkB,GAAG;IACzB,QAAQ,IAAI,IAAI,CAAC,gBAAgB,EAAE;IACnC,YAAY,IAAI,CAAC,WAAW,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;IAC7D,YAAY,IAAI,CAAC,WAAW,CAAC,6BAA6B,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACjG,SAAS,MAAM;IACf,YAAY,IAAI,CAAC,WAAW,CAAC,yBAAyB,CAAC,KAAK,CAAC,CAAC;IAC9D,SAAS;IACT,KAAK;AACL;IACA,IAAI,eAAe,GAAG,WAAW;AACjC;IACA,QAAQ,MAAM,SAAS,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC9C,QAAQ,MAAM,mBAAmB,GAAG,EAAE,CAAC;IACvC,QAAQ,MAAM,eAAe,GAAG,IAAIA,gBAAK,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC5D,QAAQ,MAAM,WAAW,GAAG,IAAIA,gBAAK,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACxD,QAAQ,MAAM,eAAe,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACpD,QAAQ,MAAM,cAAc,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACnD,QAAQ,MAAM,WAAW,GAAG,EAAE,CAAC;AAC/B;IACA,QAAQ,MAAM,YAAY,GAAG;IAC7B,YAAY;IACZ,gBAAgB,gBAAgB,EAAE,IAAI;IACtC,gBAAgB,eAAe,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC;IACvD,aAAa;IACb,YAAY;IACZ,gBAAgB,gBAAgB,EAAE,IAAI;IACtC,gBAAgB,eAAe,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;IACnD,aAAa;IACb,YAAY;IACZ,gBAAgB,gBAAgB,EAAE,GAAG;IACrC,gBAAgB,eAAe,EAAE,CAAC,GAAG,CAAC;IACtC,aAAa;IACb,SAAS,CAAC;AACV;IACA,QAAQ,OAAO,eAAe,KAAK,GAAG,KAAK,EAAE;IAC7C,YAAY,IAAI,IAAI,CAAC,WAAW,EAAE,OAAO;IACzC,YAAY,IAAI,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,IAAI,CAAC,EAAE,OAAO;AAC5D;IACA,YAAY,IAAI,SAAS,GAAG,CAAC,CAAC;IAC9B,YAAY,IAAI,YAAY,GAAG,CAAC,CAAC;IACjC,YAAY,IAAI,uBAAuB,GAAG,KAAK,CAAC;IAChD,YAAY,IAAI,uBAAuB,GAAG,KAAK,CAAC;AAChD;IACA,YAAY,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IAC9E,YAAY,SAAS,GAAG,WAAW,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IACzD,YAAY,YAAY,GAAG,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC,MAAM,EAAE,CAAC;AACnG;IACA,YAAY,IAAI,CAAC,KAAK,EAAE;IACxB,gBAAgB,IAAI,CAAC,IAAI,CAAC,wBAAwB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;IAC/G,oBAAoB,IAAI,SAAS,IAAI,IAAI,EAAE,uBAAuB,GAAG,IAAI,CAAC;IAC1E,oBAAoB,IAAI,YAAY,IAAI,GAAG,EAAE,uBAAuB,GAAG,IAAI,CAAC;IAC5E,oBAAoB,IAAI,CAAC,uBAAuB,IAAI,CAAC,uBAAuB,EAAE,OAAO;IACrF,iBAAiB;IACjB,aAAa;AACb;IACA,YAAY,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IACpC,YAAY,MAAM,EAAE,gBAAgB,EAAE,aAAa,EAAE,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;IACvF,YAAY,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;AACrD;IACA,YAAY,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,EAAE,CAAC;IAC7D,YAAY,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;IAChE,YAAY,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;AAC3D;IACA,YAAY,IAAI,IAAI,CAAC,kBAAkB,KAAK,WAAW,CAAC,MAAM,IAAI,CAAC,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;IACtG,gBAAgB,MAAM,IAAI,CAAC,SAAS,CAAC,qBAAqB,CAAC,SAAS,EAAE,IAAI,CAAC,8BAA8B,CAAC,CAAC;IAC3G,aAAa;AACb;IACA,YAAY,IAAI,IAAI,CAAC,SAAS,CAAC,WAAW,IAAI,aAAa,EAAE;IAC7D,gBAAgB,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IACxD,aAAa,MAAM;IACnB,gBAAgB,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;IAC9C,oBAAoB,KAAK,IAAI,WAAW,IAAI,YAAY,EAAE;IAC1D,wBAAwB,IAAI,SAAS,GAAG,WAAW,CAAC,cAAc,EAAE;IACpE,4BAA4B,KAAK,IAAI,YAAY,IAAI,WAAW,CAAC,aAAa,EAAE;IAChF,gCAAgC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,GAAG,YAAY,CAAC,CAAC,CAAC;IACnG,6BAA6B;IAC7B,4BAA4B,MAAM;IAClC,yBAAyB;IACzB,qBAAqB;IACrB,oBAAoB,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;IAC5D,iBAAiB;IACjB,aAAa;IACb,YAAY,IAAI,SAAS,GAAG,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;AACjF;IACA,YAAY,mBAAmB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC5D,YAAY,mBAAmB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC5D,YAAY,mBAAmB,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;AAC5D;IACA,YAAY,MAAM,WAAW,GAAG;IAChC,gBAAgB,eAAe,EAAE,SAAS,CAAC,QAAQ;IACnD,gBAAgB,gBAAgB,EAAE,mBAAmB;IACrD,gBAAgB,kBAAkB,EAAE,IAAI,CAAC,gBAAgB;IACzD,gBAAgB,gBAAgB,EAAE,SAAS;IAC3C,gBAAgB,yBAAyB,EAAE,IAAI,CAAC,kBAAkB;IAClE,aAAa,CAAC;IACd,YAAY,IAAI,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE;IAC5C,gBAAgB,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;IAC9E,aAAa;IACb,YAAY,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE;IAC9C,gBAAgB,WAAW,CAAC,aAAa,GAAG,IAAI,CAAC,uBAAuB,CAAC;IACzE,gBAAgB,WAAW,CAAC,UAAU,GAAG,IAAI,CAAC,oBAAoB,CAAC;IACnE,gBAAgB,IAAI,IAAI,CAAC,kBAAkB,EAAE;IAC7C,oBAAoB,WAAW,CAAC,oBAAoB,GAAG,IAAI,CAAC,8BAA8B,CAAC;IAC3F,iBAAiB;IACjB,aAAa;AACb;IACA,YAAY,IAAI,CAAC,WAAW,GAAG,IAAI,OAAO,CAAC,CAAC,OAAO,KAAK;IACxD,gBAAgB,IAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC;IACnD,aAAa,CAAC,CAAC;AACf;IACA,YAAY,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC;IACxC,gBAAgB,MAAM,EAAE,WAAW;IACnC,aAAa,CAAC,CAAC;AACf;IACA,YAAY,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;IAC1C,gBAAgB,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC3D,gBAAgB,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAClD,aAAa;AACb;IACA,YAAY,IAAI,CAAC,wBAAwB,GAAG,KAAK,CAAC;IAClD,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA;IACA;IACA;IACA,IAAI,uBAAuB,GAAG,WAAW;AACzC;IACA,QAAQ,MAAM,cAAc,GAAG,EAAE,CAAC;IAClC,QAAQ,IAAI,mBAAmB,GAAG,IAAI,CAAC;IACvC,QAAQ,MAAM,YAAY,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACjD,QAAQ,MAAM,YAAY,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACjD,QAAQ,MAAM,UAAU,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC/C,QAAQ,MAAM,SAAS,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC9C,QAAQ,MAAM,aAAa,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAClD,QAAQ,MAAM,cAAc,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACnD,QAAQ,MAAM,gBAAgB,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IACrD,QAAQ,MAAM,OAAO,GAAG,IAAIA,gBAAK,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACpD;IACA,QAAQ,MAAM,OAAO,GAAG,IAAIA,gBAAK,CAAC,OAAO,EAAE,CAAC;IAC5C,QAAQ,MAAM,QAAQ,GAAG,CAAC,IAAI,KAAK;IACnC,YAAY,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC;IACjE,SAAS,CAAC;AACV;IACA,QAAQ,OAAO,SAAS,cAAc,GAAG,KAAK,EAAE;AAChD;IACA,YAAY,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;IACvD,YAAY,MAAM,iBAAiB,GAAG,CAAC,gBAAgB,CAAC,CAAC,GAAG,GAAG,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG,GAAG,GAAGA,gBAAK,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAC7H,YAAY,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,GAAG,GAAG,GAAG,iBAAiB,CAAC,CAAC;IACtF,YAAY,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,GAAG,GAAG,GAAG,iBAAiB,CAAC,CAAC;IACtF,YAAY,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACrD,YAAY,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AACrD;IACA,YAAY,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,EAAE,CAAC;AAC5D;IACA,YAAY,IAAI,SAAS,EAAE;IAC3B,gBAAgB,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,MAAM,EAAE,CAAC;IACrE,gBAAgB,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;AACnE;IACA,gBAAgB,IAAI,eAAe,GAAG,CAAC,CAAC;IACxC,gBAAgB,IAAI,gBAAgB,GAAG,CAAC,CAAC;AACzC;IACA,gBAAgB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACpE,oBAAoB,MAAM,OAAO,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC1D,oBAAoB,SAAS,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IAClD,oBAAoB,IAAI,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE;IACpD,wBAAwB,IAAI,CAAC,SAAS,CAAC,iBAAiB,CAAC,CAAC,EAAE,cAAc,CAAC,CAAC;IAC5E,wBAAwB,SAAS,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;IAC3D,qBAAqB;IACrB,oBAAoB,MAAM,SAAS,GAAG,OAAO,CAAC,gBAAgB,CAAC,MAAM,CAAC;IACtE,oBAAoB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;IACxD,wBAAwB,MAAM,IAAI,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;IACjE,wBAAwB,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE,SAAS;IACzG,wBAAwB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;AAC7E;IACA,wBAAwB,MAAM,cAAc,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC;IACnE,wBAAwB,UAAU,CAAC,SAAS,EAAE,CAAC;AAC/C;IACA,wBAAwB,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;IAC1E,wBAAwB,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;AAC1E;IACA,wBAAwB,MAAM,gBAAgB,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;IAC3E,wBAAwB,MAAM,gBAAgB,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AAC3E;IACA,wBAAwB,MAAM,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;IAClD,wBAAwB,MAAM,SAAS,GAAG,gBAAgB,IAAI,YAAY,GAAG,EAAE,CAAC,CAAC;IACjF,wBAAwB,MAAM,SAAS,GAAG,gBAAgB,IAAI,YAAY,GAAG,EAAE,CAAC,CAAC;IACjF,wBAAwB,IAAI,CAAC,cAAc,KAAK,CAAC,SAAS,IAAI,SAAS,KAAK,cAAc,GAAG,EAAE,CAAC,EAAE;IAClG,4BAA4B,SAAS;IACrC,yBAAyB;IACzB,wBAAwB,gBAAgB,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IACrE,wBAAwB,cAAc,CAAC,eAAe,CAAC,GAAG,IAAI,CAAC;IAC/D,wBAAwB,IAAI,CAAC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IAClE,wBAAwB,eAAe,EAAE,CAAC;IAC1C,qBAAqB;IACrB,iBAAiB;AACjB;IACA,gBAAgB,cAAc,CAAC,MAAM,GAAG,eAAe,CAAC;IACxD,gBAAgB,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK;IAC9C,oBAAoB,IAAI,CAAC,CAAC,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC;IACjF,yBAAyB,OAAO,CAAC,CAAC;IAClC,iBAAiB,CAAC,CAAC;AACnB;IACA,gBAAgB,IAAI,iBAAiB,GAAG,gBAAgB,GAAG,SAAS,CAAC,WAAW,CAAC;IACjF,gBAAgB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,EAAE,CAAC,EAAE,EAAE;IAC1D,oBAAoB,MAAM,IAAI,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;IACnD,oBAAoB,MAAM,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IACpE,oBAAoB,MAAM,eAAe,GAAG,cAAc,GAAG,SAAS,CAAC,WAAW,CAAC;IACnF,oBAAoB,IAAI,QAAQ,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,uBAAuB,CAAC,MAAM;IACtF,mDAAmD,iBAAiB,GAAG,eAAe,EAAE,cAAc,CAAC,CAAC;IACxG,oBAAoB,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IACpD,oBAAoB,iBAAiB,IAAI,eAAe,CAAC;IACzD,iBAAiB;AACjB;IACA,gBAAgB,OAAO;IACvB,oBAAoB,kBAAkB,EAAE,gBAAgB;IACxD,oBAAoB,eAAe,EAAE,KAAK;IAC1C,iBAAiB,CAAC;IAClB,aAAa,MAAM;IACnB,gBAAgB,MAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC;IACvE,gBAAgB,IAAI,CAAC,mBAAmB,IAAI,mBAAmB,CAAC,MAAM,KAAK,eAAe,EAAE;IAC5F,oBAAoB,mBAAmB,GAAG,IAAI,WAAW,CAAC,eAAe,CAAC,CAAC;IAC3E,oBAAoB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,eAAe,EAAE,CAAC,EAAE,EAAE;IAC9D,wBAAwB,mBAAmB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IACnD,qBAAqB;IACrB,iBAAiB;IACjB,gBAAgB,IAAI,CAAC,uBAAuB,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;IACtE,gBAAgB,OAAO;IACvB,oBAAoB,kBAAkB,EAAE,eAAe;IACvD,oBAAoB,eAAe,EAAE,IAAI;IACzC,iBAAiB,CAAC;IAClB,aAAa;IACb,SAAS,CAAC;AACV;IACA,KAAK,EAAE,CAAC;AACR;IACA,IAAI,YAAY,GAAG;IACnB,QAAQ,OAAO,IAAI,CAAC,SAAS,CAAC;IAC9B,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,aAAa,CAAC,UAAU,EAAE;IAC9B,QAAQ,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IACnD,KAAK;AACL;IACA,IAAI,QAAQ,GAAG;IACf,QAAQ,OAAO,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IACpD,KAAK;IACL;;ICp0DA;IACA;IACA;IACA;IACO,MAAM,YAAY,SAASA,gBAAK,CAAC,KAAK,CAAC;AAC9C;IACA,IAAI,WAAW,CAAC,OAAO,GAAG,EAAE,EAAE;IAC9B,QAAQ,KAAK,EAAE,CAAC;AAChB;IACA,QAAQ,OAAO,CAAC,cAAc,GAAG,KAAK,CAAC;IACvC,QAAQ,OAAO,CAAC,kBAAkB,GAAG,KAAK,CAAC;IAC3C,QAAQ,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC;IACnC,QAAQ,OAAO,CAAC,sBAAsB,GAAG,KAAK,CAAC;IAC/C,QAAQ,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;IAClC,QAAQ,OAAO,CAAC,MAAM,GAAG,SAAS,CAAC;IACnC,QAAQ,OAAO,CAAC,QAAQ,GAAG,SAAS,CAAC;AACrC;IACA,QAAQ,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC;IAC1C,QAAQ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;AAC9B;IACA,QAAQ,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC,kBAAkB,EAAE,CAAC;IAC9D,QAAQ,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IACpC,QAAQ,IAAI,CAAC,YAAY,CAAC,cAAc,GAAG,YAAY,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;AAC/F;IACA,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,aAAa,CAAC,IAAI,EAAE,OAAO,GAAG,EAAE,EAAE;IACtC,QAAQ,IAAI,OAAO,CAAC,aAAa,KAAK,KAAK,EAAE,OAAO,CAAC,aAAa,GAAG,IAAI,CAAC;IAC1E,QAAQ,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACxD,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,cAAc,CAAC,YAAY,EAAE,aAAa,EAAE;IAChD,QAAQ,IAAI,aAAa,KAAK,KAAK,EAAE,aAAa,GAAG,IAAI,CAAC;IAC1D,QAAQ,OAAO,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC;IACvE,KAAK;AACL;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,aAAa,CAAC,UAAU,EAAE;IAC9B,QAAQ,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;IACrD,KAAK;AACL;IACA,IAAI,gBAAgB,CAAC,KAAK,EAAE;IAC5B,QAAQ,OAAO,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;IACnD,KAAK;AACL;IACA,IAAI,OAAO,GAAG;IACd,QAAQ,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;IACrC,KAAK;AACL;IACA,IAAI,OAAO,cAAc,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,MAAM,EAAE;IAChE,QAAQ,IAAI,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE;IACtD,YAAY,IAAI,IAAI,CAAC,SAAS,EAAE;IAChC,gBAAgB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IAC5C,aAAa;IACb,YAAY,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC;IACnD,YAAY,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;IAC5C,SAAS;IACT,QAAQ,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;IACxC,KAAK;AACL;IACA,IAAI,OAAO,kBAAkB,GAAG;IAChC,QAAQ,MAAM,QAAQ,GAAG,IAAIA,gBAAK,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAC3D,QAAQ,MAAM,QAAQ,GAAG,IAAIA,gBAAK,CAAC,iBAAiB,EAAE,CAAC;IACvD,QAAQ,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAC;IACpC,QAAQ,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAC;IACpC,QAAQ,MAAM,IAAI,GAAG,IAAIA,gBAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;IACxD,QAAQ,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;IACnC,QAAQ,OAAO,IAAI,CAAC;IACpB,KAAK;AACL;IACA;;;;;;;;;;;;;;;;;;;;;;;;;"}